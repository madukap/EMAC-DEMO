
EMAC_EMAC_EXAMPLE_TAIJI_DUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d20  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084d20  00084d20  0000cd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20070000  00084d28  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00003f54  20070998  000856c0  00010994  2**3
                  ALLOC
  4 .stack        00002004  200748ec  00089614  00010994  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010994  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109bd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000cb7e  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002157  00000000  00000000  0001d596  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005d12  00000000  00000000  0001f6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009e0  00000000  00000000  000253ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000978  00000000  00000000  00025ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00017dab  00000000  00000000  00026757  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d199  00000000  00000000  0003e502  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065341  00000000  00000000  0004b69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002264  00000000  00000000  000b09dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200768f0 	.word	0x200768f0
   80004:	00081135 	.word	0x00081135
   80008:	00081131 	.word	0x00081131
   8000c:	00081131 	.word	0x00081131
   80010:	00081131 	.word	0x00081131
   80014:	00081131 	.word	0x00081131
   80018:	00081131 	.word	0x00081131
	...
   8002c:	00081131 	.word	0x00081131
   80030:	00081131 	.word	0x00081131
   80034:	00000000 	.word	0x00000000
   80038:	00081131 	.word	0x00081131
   8003c:	00081131 	.word	0x00081131
   80040:	00081131 	.word	0x00081131
   80044:	00081131 	.word	0x00081131
   80048:	00081131 	.word	0x00081131
   8004c:	00081131 	.word	0x00081131
   80050:	00081131 	.word	0x00081131
   80054:	00081131 	.word	0x00081131
   80058:	00081131 	.word	0x00081131
   8005c:	00081131 	.word	0x00081131
   80060:	00081131 	.word	0x00081131
   80064:	00081131 	.word	0x00081131
   80068:	00000000 	.word	0x00000000
   8006c:	00080eed 	.word	0x00080eed
   80070:	00080f01 	.word	0x00080f01
   80074:	00080f15 	.word	0x00080f15
   80078:	00080f29 	.word	0x00080f29
	...
   80084:	00081131 	.word	0x00081131
   80088:	00081131 	.word	0x00081131
   8008c:	00081131 	.word	0x00081131
   80090:	00081131 	.word	0x00081131
   80094:	00081131 	.word	0x00081131
   80098:	00081131 	.word	0x00081131
   8009c:	00081131 	.word	0x00081131
   800a0:	00081131 	.word	0x00081131
   800a4:	00000000 	.word	0x00000000
   800a8:	00081131 	.word	0x00081131
   800ac:	00081131 	.word	0x00081131
   800b0:	00081131 	.word	0x00081131
   800b4:	00081131 	.word	0x00081131
   800b8:	00081131 	.word	0x00081131
   800bc:	00081131 	.word	0x00081131
   800c0:	00081131 	.word	0x00081131
   800c4:	00081131 	.word	0x00081131
   800c8:	00081131 	.word	0x00081131
   800cc:	00081131 	.word	0x00081131
   800d0:	00081131 	.word	0x00081131
   800d4:	00081131 	.word	0x00081131
   800d8:	00081131 	.word	0x00081131
   800dc:	00081131 	.word	0x00081131
   800e0:	00081131 	.word	0x00081131
   800e4:	00081131 	.word	0x00081131
   800e8:	00081495 	.word	0x00081495
   800ec:	00081131 	.word	0x00081131
   800f0:	00081131 	.word	0x00081131

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070998 	.word	0x20070998
   80110:	00000000 	.word	0x00000000
   80114:	00084d28 	.word	0x00084d28

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00084d28 	.word	0x00084d28
   80144:	2007099c 	.word	0x2007099c
   80148:	00084d28 	.word	0x00084d28
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	2000      	movs	r0, #0
   8015a:	213e      	movs	r1, #62	; 0x3e
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	00080fa5 	.word	0x00080fa5
   80198:	00080ff9 	.word	0x00080ff9
   8019c:	00081009 	.word	0x00081009
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	00081019 	.word	0x00081019
   801ac:	00080f3d 	.word	0x00080f3d
   801b0:	000811e5 	.word	0x000811e5

000801b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801b4:	b9a8      	cbnz	r0, 801e2 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ba:	460c      	mov	r4, r1
   801bc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801be:	2a00      	cmp	r2, #0
   801c0:	dd0a      	ble.n	801d8 <_read+0x24>
   801c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801c4:	4e08      	ldr	r6, [pc, #32]	; (801e8 <_read+0x34>)
   801c6:	4d09      	ldr	r5, [pc, #36]	; (801ec <_read+0x38>)
   801c8:	6830      	ldr	r0, [r6, #0]
   801ca:	4621      	mov	r1, r4
   801cc:	682b      	ldr	r3, [r5, #0]
   801ce:	4798      	blx	r3
		ptr++;
   801d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	42bc      	cmp	r4, r7
   801d4:	d1f8      	bne.n	801c8 <_read+0x14>
   801d6:	e001      	b.n	801dc <_read+0x28>
   801d8:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   801dc:	4640      	mov	r0, r8
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801e2:	f04f 30ff 	mov.w	r0, #4294967295
   801e6:	4770      	bx	lr
   801e8:	200748e4 	.word	0x200748e4
   801ec:	200748dc 	.word	0x200748dc

000801f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f0:	3801      	subs	r0, #1
   801f2:	2802      	cmp	r0, #2
   801f4:	d818      	bhi.n	80228 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801fa:	460e      	mov	r6, r1
   801fc:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801fe:	b182      	cbz	r2, 80222 <_write+0x32>
   80200:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80202:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8023c <_write+0x4c>
   80206:	4f0c      	ldr	r7, [pc, #48]	; (80238 <_write+0x48>)
   80208:	f8d8 0000 	ldr.w	r0, [r8]
   8020c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80210:	683b      	ldr	r3, [r7, #0]
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	db0a      	blt.n	8022e <_write+0x3e>
   80218:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8021a:	3c01      	subs	r4, #1
   8021c:	d1f4      	bne.n	80208 <_write+0x18>
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80222:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80228:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   8022c:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8022e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	200748e0 	.word	0x200748e0
   8023c:	200748e4 	.word	0x200748e4

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b26      	ldr	r3, [pc, #152]	; (802e0 <board_init+0xa0>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c25      	ldr	r4, [pc, #148]	; (802e4 <board_init+0xa4>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	203b      	movs	r0, #59	; 0x3b
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	4c21      	ldr	r4, [pc, #132]	; (802e8 <board_init+0xa8>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	2055      	movs	r0, #85	; 0x55
   80268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	2056      	movs	r0, #86	; 0x56
   80270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	2068      	movs	r0, #104	; 0x68
   80278:	491c      	ldr	r1, [pc, #112]	; (802ec <board_init+0xac>)
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	205c      	movs	r0, #92	; 0x5c
   8027e:	491c      	ldr	r1, [pc, #112]	; (802f0 <board_init+0xb0>)
   80280:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80282:	481c      	ldr	r0, [pc, #112]	; (802f4 <board_init+0xb4>)
   80284:	f44f 7140 	mov.w	r1, #768	; 0x300
   80288:	4a1b      	ldr	r2, [pc, #108]	; (802f8 <board_init+0xb8>)
   8028a:	4b1c      	ldr	r3, [pc, #112]	; (802fc <board_init+0xbc>)
   8028c:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif

#ifdef CONF_BOARD_EMAC
	gpio_configure_pin(PIN_EEMAC_EREFCK, PIN_EMAC_FLAGS);
   8028e:	2020      	movs	r0, #32
   80290:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80294:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_ETX0, PIN_EMAC_FLAGS);
   80296:	2022      	movs	r0, #34	; 0x22
   80298:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8029c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_ETX1, PIN_EMAC_FLAGS);
   8029e:	2023      	movs	r0, #35	; 0x23
   802a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802a4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_ETXEN, PIN_EMAC_FLAGS);
   802a6:	2021      	movs	r0, #33	; 0x21
   802a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802ac:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_ECRSDV, PIN_EMAC_FLAGS);
   802ae:	2024      	movs	r0, #36	; 0x24
   802b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802b4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_ERX0, PIN_EMAC_FLAGS);
   802b6:	2025      	movs	r0, #37	; 0x25
   802b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802bc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_ERX1, PIN_EMAC_FLAGS);
   802be:	2026      	movs	r0, #38	; 0x26
   802c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802c4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_ERXER, PIN_EMAC_FLAGS);
   802c6:	2027      	movs	r0, #39	; 0x27
   802c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_EMDC, PIN_EMAC_FLAGS);
   802ce:	2028      	movs	r0, #40	; 0x28
   802d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802d4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EMAC_EMDIO, PIN_EMAC_FLAGS);
   802d6:	2029      	movs	r0, #41	; 0x29
   802d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802dc:	47a0      	blx	r4
   802de:	bd10      	pop	{r4, pc}
   802e0:	400e1a50 	.word	0x400e1a50
   802e4:	00081029 	.word	0x00081029
   802e8:	00080d29 	.word	0x00080d29
   802ec:	28000079 	.word	0x28000079
   802f0:	28000001 	.word	0x28000001
   802f4:	400e0e00 	.word	0x400e0e00
   802f8:	08000001 	.word	0x08000001
   802fc:	00080dfd 	.word	0x00080dfd

00080300 <ethernet_phy_set_link>:
 *
 * Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout. 
 */
uint8_t ethernet_phy_set_link(Emac *p_emac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
   80300:	b5f0      	push	{r4, r5, r6, r7, lr}
   80302:	b083      	sub	sp, #12
   80304:	4604      	mov	r4, r0
   80306:	460f      	mov	r7, r1
   80308:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable EMAC management, else to enable it.
 */
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
   8030a:	6803      	ldr	r3, [r0, #0]
   8030c:	f043 0310 	orr.w	r3, r3, #16
   80310:	6003      	str	r3, [r0, #0]

	emac_enable_management(p_emac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = emac_phy_read(p_emac, uc_phy_address, MII_BMSR, &ul_stat1);
   80312:	2201      	movs	r2, #1
   80314:	ab01      	add	r3, sp, #4
   80316:	4d35      	ldr	r5, [pc, #212]	; (803ec <ethernet_phy_set_link+0xec>)
   80318:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   8031a:	b120      	cbz	r0, 80326 <ethernet_phy_set_link+0x26>
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   8031c:	6822      	ldr	r2, [r4, #0]
   8031e:	f022 0210 	bic.w	r2, r2, #16
   80322:	6022      	str	r2, [r4, #0]
		/* Disable PHY management and start the EMAC transfer */
		emac_enable_management(p_emac, false);

		return uc_rc;
   80324:	e05f      	b.n	803e6 <ethernet_phy_set_link+0xe6>
	}

	if ((ul_stat1 & MII_LINK_STATUS) == 0) {
   80326:	9b01      	ldr	r3, [sp, #4]
   80328:	f013 0f04 	tst.w	r3, #4
   8032c:	d105      	bne.n	8033a <ethernet_phy_set_link+0x3a>
   8032e:	6823      	ldr	r3, [r4, #0]
   80330:	f023 0310 	bic.w	r3, r3, #16
   80334:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the EMAC transfer */
		emac_enable_management(p_emac, false);

		return EMAC_INVALID;
   80336:	20ff      	movs	r0, #255	; 0xff
   80338:	e055      	b.n	803e6 <ethernet_phy_set_link+0xe6>
	}

	if (uc_apply_setting_flag == 0) {
   8033a:	b92e      	cbnz	r6, 80348 <ethernet_phy_set_link+0x48>
   8033c:	6823      	ldr	r3, [r4, #0]
   8033e:	f023 0310 	bic.w	r3, r3, #16
   80342:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the EMAC transfer */
		emac_enable_management(p_emac, false);

		return uc_rc;
   80344:	2000      	movs	r0, #0
   80346:	e04e      	b.n	803e6 <ethernet_phy_set_link+0xe6>
	}

	/* Re-configure Link speed */
	uc_rc = emac_phy_read(p_emac, uc_phy_address, MII_DSCSR, &ul_stat2);
   80348:	4620      	mov	r0, r4
   8034a:	4639      	mov	r1, r7
   8034c:	2211      	movs	r2, #17
   8034e:	466b      	mov	r3, sp
   80350:	4d26      	ldr	r5, [pc, #152]	; (803ec <ethernet_phy_set_link+0xec>)
   80352:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   80354:	b120      	cbz	r0, 80360 <ethernet_phy_set_link+0x60>
   80356:	6822      	ldr	r2, [r4, #0]
   80358:	f022 0210 	bic.w	r2, r2, #16
   8035c:	6022      	str	r2, [r4, #0]
		/* Disable PHY management and start the EMAC transfer */
		emac_enable_management(p_emac, false);

		return uc_rc;
   8035e:	e042      	b.n	803e6 <ethernet_phy_set_link+0xe6>
	}

	if ((ul_stat1 & MII_100BASE_TX_FD) && (ul_stat2 & MII_100FDX)) {
   80360:	9b01      	ldr	r3, [sp, #4]
		/* Set EMAC for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
	}

	if ((ul_stat1 & MII_10BASE_T_FD) && (ul_stat2 & MII_10FDX)) {
   80362:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   80366:	bf1d      	ittte	ne
   80368:	9a00      	ldrne	r2, [sp, #0]
   8036a:	f482 5200 	eorne.w	r2, r2, #8192	; 0x2000
   8036e:	f3c2 3240 	ubfxne	r2, r2, #13, #1
   80372:	2201      	moveq	r2, #1
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
		uc_fd = true;
	}

	if ((ul_stat1 & MII_100BASE_T4_HD) && (ul_stat2 & MII_100HDX)) {
   80374:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   80378:	d003      	beq.n	80382 <ethernet_phy_set_link+0x82>
   8037a:	9900      	ldr	r1, [sp, #0]
   8037c:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   80380:	d128      	bne.n	803d4 <ethernet_phy_set_link+0xd4>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
	}

	if ((ul_stat1 & MII_10BASE_T_HD) && (ul_stat2 & MII_10HDX)) {
   80382:	f413 6f00 	tst.w	r3, #2048	; 0x800
   80386:	d003      	beq.n	80390 <ethernet_phy_set_link+0x90>
   80388:	9b00      	ldr	r3, [sp, #0]
   8038a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   8038e:	d108      	bne.n	803a2 <ethernet_phy_set_link+0xa2>
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void emac_set_speed(Emac* p_emac, uint8_t uc_speed)
{
	if (uc_speed) {
   80390:	b14a      	cbz	r2, 803a6 <ethernet_phy_set_link+0xa6>
   80392:	2301      	movs	r3, #1
   80394:	e000      	b.n	80398 <ethernet_phy_set_link+0x98>
	}

	if ((ul_stat1 & MII_100BASE_T4_HD) && (ul_stat2 & MII_100HDX)) {
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
   80396:	2300      	movs	r3, #0
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_SPD;
   80398:	6862      	ldr	r2, [r4, #4]
   8039a:	f042 0201 	orr.w	r2, r2, #1
   8039e:	6062      	str	r2, [r4, #4]
   803a0:	e008      	b.n	803b4 <ethernet_phy_set_link+0xb4>
	}

	if ((ul_stat1 & MII_10BASE_T_HD) && (ul_stat2 & MII_10HDX)) {
		/* Set MII for 10BaseT and Half Duplex */
		uc_speed = false;
		uc_fd = false;
   803a2:	2300      	movs	r3, #0
   803a4:	e002      	b.n	803ac <ethernet_phy_set_link+0xac>
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void emac_set_speed(Emac* p_emac, uint8_t uc_speed)
{
	if (uc_speed) {
   803a6:	2301      	movs	r3, #1
   803a8:	e000      	b.n	803ac <ethernet_phy_set_link+0xac>
   803aa:	2300      	movs	r3, #0
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_SPD;
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_SPD;
   803ac:	6862      	ldr	r2, [r4, #4]
   803ae:	f022 0201 	bic.w	r2, r2, #1
   803b2:	6062      	str	r2, [r4, #4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void emac_enable_full_duplex(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
   803b4:	b123      	cbz	r3, 803c0 <ethernet_phy_set_link+0xc0>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_FD;
   803b6:	6863      	ldr	r3, [r4, #4]
   803b8:	f043 0302 	orr.w	r3, r3, #2
   803bc:	6063      	str	r3, [r4, #4]
   803be:	e003      	b.n	803c8 <ethernet_phy_set_link+0xc8>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_FD;
   803c0:	6863      	ldr	r3, [r4, #4]
   803c2:	f023 0302 	bic.w	r3, r3, #2
   803c6:	6063      	str	r3, [r4, #4]
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   803c8:	6823      	ldr	r3, [r4, #0]
   803ca:	f023 0310 	bic.w	r3, r3, #16
   803ce:	6023      	str	r3, [r4, #0]
	emac_set_speed(p_emac, uc_speed);
	emac_enable_full_duplex(p_emac, uc_fd);

	/* Start the EMAC transfers */
	emac_enable_management(p_emac, false);
	return uc_rc;
   803d0:	2000      	movs	r0, #0
   803d2:	e008      	b.n	803e6 <ethernet_phy_set_link+0xe6>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
	}

	if ((ul_stat1 & MII_10BASE_T_HD) && (ul_stat2 & MII_10HDX)) {
   803d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
   803d8:	d0dd      	beq.n	80396 <ethernet_phy_set_link+0x96>
   803da:	9b00      	ldr	r3, [sp, #0]
   803dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   803e0:	d1e3      	bne.n	803aa <ethernet_phy_set_link+0xaa>
	}

	if ((ul_stat1 & MII_100BASE_T4_HD) && (ul_stat2 & MII_100HDX)) {
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
   803e2:	2300      	movs	r3, #0
   803e4:	e7d8      	b.n	80398 <ethernet_phy_set_link+0x98>
	emac_enable_full_duplex(p_emac, uc_fd);

	/* Start the EMAC transfers */
	emac_enable_management(p_emac, false);
	return uc_rc;
}
   803e6:	b003      	add	sp, #12
   803e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   803ea:	bf00      	nop
   803ec:	00080789 	.word	0x00080789

000803f0 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout. 
 */
uint8_t ethernet_phy_auto_negotiate(Emac *p_emac, uint8_t uc_phy_addr)
{
   803f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803f4:	b082      	sub	sp, #8
   803f6:	4604      	mov	r4, r0
   803f8:	460d      	mov	r5, r1
 * \param uc_enable   0 to disable EMAC management, else to enable it.
 */
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
   803fa:	6803      	ldr	r3, [r0, #0]
   803fc:	f043 0310 	orr.w	r3, r3, #16
   80400:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc = EMAC_TIMEOUT;

	emac_enable_management(p_emac, true);

	/* Set up control register */
	uc_rc = emac_phy_read(p_emac, uc_phy_addr, MII_BMCR, &ul_value);
   80402:	2200      	movs	r2, #0
   80404:	ab01      	add	r3, sp, #4
   80406:	4e58      	ldr	r6, [pc, #352]	; (80568 <ethernet_phy_auto_negotiate+0x178>)
   80408:	47b0      	blx	r6
	if (uc_rc != EMAC_OK) {
   8040a:	b120      	cbz	r0, 80416 <ethernet_phy_auto_negotiate+0x26>
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   8040c:	6822      	ldr	r2, [r4, #0]
   8040e:	f022 0210 	bic.w	r2, r2, #16
   80412:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   80414:	e0a5      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
	}

	ul_value &= ~MII_AUTONEG; /* Remove auto-negotiation enable */
	ul_value &= ~(MII_LOOPBACK | MII_POWER_DOWN);
   80416:	9b01      	ldr	r3, [sp, #4]
   80418:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= MII_ISOLATE; /* Electrically isolate PHY */
   8041c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80420:	9301      	str	r3, [sp, #4]
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_BMCR, ul_value);
   80422:	4620      	mov	r0, r4
   80424:	4629      	mov	r1, r5
   80426:	2200      	movs	r2, #0
   80428:	4e50      	ldr	r6, [pc, #320]	; (8056c <ethernet_phy_auto_negotiate+0x17c>)
   8042a:	47b0      	blx	r6
	if (uc_rc != EMAC_OK) {
   8042c:	b120      	cbz	r0, 80438 <ethernet_phy_auto_negotiate+0x48>
   8042e:	6822      	ldr	r2, [r4, #0]
   80430:	f022 0210 	bic.w	r2, r2, #16
   80434:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   80436:	e094      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
	 * MII advertising for Next page.
	 * 100BaseTxFD and HD, 10BaseTFD and HD, IEEE 802.3.
	 */
	ul_phy_anar = MII_TX_FDX | MII_TX_HDX | MII_10_FDX | MII_10_HDX | 
			MII_AN_IEEE_802_3;
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_ANAR, ul_phy_anar);
   80438:	4620      	mov	r0, r4
   8043a:	4629      	mov	r1, r5
   8043c:	2204      	movs	r2, #4
   8043e:	f240 13e1 	movw	r3, #481	; 0x1e1
   80442:	4e4a      	ldr	r6, [pc, #296]	; (8056c <ethernet_phy_auto_negotiate+0x17c>)
   80444:	47b0      	blx	r6
	if (uc_rc != EMAC_OK) {
   80446:	b120      	cbz	r0, 80452 <ethernet_phy_auto_negotiate+0x62>
   80448:	6822      	ldr	r2, [r4, #0]
   8044a:	f022 0210 	bic.w	r2, r2, #16
   8044e:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   80450:	e087      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
	}

	/* Read & modify control register */
	uc_rc = emac_phy_read(p_emac, uc_phy_addr, MII_BMCR, &ul_value);
   80452:	4620      	mov	r0, r4
   80454:	4629      	mov	r1, r5
   80456:	2200      	movs	r2, #0
   80458:	ab01      	add	r3, sp, #4
   8045a:	4e43      	ldr	r6, [pc, #268]	; (80568 <ethernet_phy_auto_negotiate+0x178>)
   8045c:	47b0      	blx	r6
	if (uc_rc != EMAC_OK) {
   8045e:	b120      	cbz	r0, 8046a <ethernet_phy_auto_negotiate+0x7a>
   80460:	6822      	ldr	r2, [r4, #0]
   80462:	f022 0210 	bic.w	r2, r2, #16
   80466:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   80468:	e07b      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
	}

	ul_value |= MII_SPEED_SELECT | MII_AUTONEG | MII_DUPLEX_MODE;
   8046a:	9b01      	ldr	r3, [sp, #4]
   8046c:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
   80470:	9301      	str	r3, [sp, #4]
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_BMCR, ul_value);
   80472:	4620      	mov	r0, r4
   80474:	4629      	mov	r1, r5
   80476:	2200      	movs	r2, #0
   80478:	4e3c      	ldr	r6, [pc, #240]	; (8056c <ethernet_phy_auto_negotiate+0x17c>)
   8047a:	47b0      	blx	r6
	if (uc_rc != EMAC_OK) {
   8047c:	b120      	cbz	r0, 80488 <ethernet_phy_auto_negotiate+0x98>
   8047e:	6822      	ldr	r2, [r4, #0]
   80480:	f022 0210 	bic.w	r2, r2, #16
   80484:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   80486:	e06c      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
	}

	/* Restart auto negotiation */
	ul_value |= MII_RESTART_AUTONEG;
	ul_value &= ~MII_ISOLATE;
   80488:	9b01      	ldr	r3, [sp, #4]
   8048a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   8048e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80492:	9301      	str	r3, [sp, #4]
	uc_rc = emac_phy_write(p_emac, uc_phy_addr, MII_BMCR, ul_value);
   80494:	4620      	mov	r0, r4
   80496:	4629      	mov	r1, r5
   80498:	2200      	movs	r2, #0
   8049a:	4e34      	ldr	r6, [pc, #208]	; (8056c <ethernet_phy_auto_negotiate+0x17c>)
   8049c:	47b0      	blx	r6
	if (uc_rc != EMAC_OK) {
   8049e:	b120      	cbz	r0, 804aa <ethernet_phy_auto_negotiate+0xba>
   804a0:	6822      	ldr	r2, [r4, #0]
   804a2:	f022 0210 	bic.w	r2, r2, #16
   804a6:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   804a8:	e05b      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
   804aa:	4e31      	ldr	r6, [pc, #196]	; (80570 <ethernet_phy_auto_negotiate+0x180>)
	}

	/* Check if auto negotiation is completed */
	while (1) {
		uc_rc = emac_phy_read(p_emac, uc_phy_addr, MII_BMSR, &ul_value);
   804ac:	f04f 0801 	mov.w	r8, #1
   804b0:	4f2d      	ldr	r7, [pc, #180]	; (80568 <ethernet_phy_auto_negotiate+0x178>)
   804b2:	4620      	mov	r0, r4
   804b4:	4629      	mov	r1, r5
   804b6:	4642      	mov	r2, r8
   804b8:	ab01      	add	r3, sp, #4
   804ba:	47b8      	blx	r7
		if (uc_rc != EMAC_OK) {
   804bc:	b120      	cbz	r0, 804c8 <ethernet_phy_auto_negotiate+0xd8>
   804be:	6822      	ldr	r2, [r4, #0]
   804c0:	f022 0210 	bic.w	r2, r2, #16
   804c4:	6022      	str	r2, [r4, #0]
			emac_enable_management(p_emac, false);
			return uc_rc;
   804c6:	e04c      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
		}
		/* Done successfully */
		if (ul_value & MII_AUTONEG_COMP) {
   804c8:	9b01      	ldr	r3, [sp, #4]
   804ca:	f013 0f20 	tst.w	r3, #32
   804ce:	d107      	bne.n	804e0 <ethernet_phy_auto_negotiate+0xf0>
			break;
		}

		/* Timeout check */
		if (ul_retry_max) {
			if (++ul_retry_count >= ul_retry_max) {
   804d0:	3e01      	subs	r6, #1
   804d2:	d1ee      	bne.n	804b2 <ethernet_phy_auto_negotiate+0xc2>
   804d4:	6823      	ldr	r3, [r4, #0]
   804d6:	f023 0310 	bic.w	r3, r3, #16
   804da:	6023      	str	r3, [r4, #0]
				emac_enable_management(p_emac, false);
				return EMAC_TIMEOUT;
   804dc:	2001      	movs	r0, #1
   804de:	e040      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
			}
		}
	}

	/* Get the auto negotiate link partner base page */
	uc_rc = emac_phy_read(p_emac, uc_phy_addr, MII_ANLPAR, &ul_phy_analpar);
   804e0:	4620      	mov	r0, r4
   804e2:	4629      	mov	r1, r5
   804e4:	2205      	movs	r2, #5
   804e6:	466b      	mov	r3, sp
   804e8:	4d1f      	ldr	r5, [pc, #124]	; (80568 <ethernet_phy_auto_negotiate+0x178>)
   804ea:	47a8      	blx	r5
	if (uc_rc != EMAC_OK) {
   804ec:	b120      	cbz	r0, 804f8 <ethernet_phy_auto_negotiate+0x108>
   804ee:	6822      	ldr	r2, [r4, #0]
   804f0:	f022 0210 	bic.w	r2, r2, #16
   804f4:	6022      	str	r2, [r4, #0]
		emac_enable_management(p_emac, false);
		return uc_rc;
   804f6:	e034      	b.n	80562 <ethernet_phy_auto_negotiate+0x172>
	}

	/* Set up the EMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & MII_TX_FDX) {
   804f8:	9b00      	ldr	r3, [sp, #0]
   804fa:	f413 7f80 	tst.w	r3, #256	; 0x100
   804fe:	d109      	bne.n	80514 <ethernet_phy_auto_negotiate+0x124>
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
	} else if ((ul_phy_anar & ul_phy_analpar) & MII_10_FDX) {
   80500:	f013 0f40 	tst.w	r3, #64	; 0x40
   80504:	d10c      	bne.n	80520 <ethernet_phy_auto_negotiate+0x130>
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void emac_set_speed(Emac* p_emac, uint8_t uc_speed)
{
	if (uc_speed) {
   80506:	f013 0f80 	tst.w	r3, #128	; 0x80
		uc_speed = false;
		uc_fd = true;
	} else if ((ul_phy_anar & ul_phy_analpar) & MII_TX_HDX) {
		/* Set MII for 100BaseTX and half Duplex */
		uc_speed = true;
		uc_fd = false;
   8050a:	bf08      	it	eq
   8050c:	2300      	moveq	r3, #0
   8050e:	d009      	beq.n	80524 <ethernet_phy_auto_negotiate+0x134>
   80510:	2300      	movs	r3, #0
   80512:	e000      	b.n	80516 <ethernet_phy_auto_negotiate+0x126>

	/* Set up the EMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & MII_TX_FDX) {
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
   80514:	2301      	movs	r3, #1
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_SPD;
   80516:	6862      	ldr	r2, [r4, #4]
   80518:	f042 0201 	orr.w	r2, r2, #1
   8051c:	6062      	str	r2, [r4, #4]
   8051e:	e005      	b.n	8052c <ethernet_phy_auto_negotiate+0x13c>
	} else if ((ul_phy_anar & ul_phy_analpar) & MII_10_FDX) {
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
		uc_fd = true;
   80520:	2301      	movs	r3, #1
   80522:	e7ff      	b.n	80524 <ethernet_phy_auto_negotiate+0x134>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_SPD;
   80524:	6862      	ldr	r2, [r4, #4]
   80526:	f022 0201 	bic.w	r2, r2, #1
   8052a:	6062      	str	r2, [r4, #4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void emac_enable_full_duplex(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
   8052c:	b123      	cbz	r3, 80538 <ethernet_phy_auto_negotiate+0x148>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_FD;
   8052e:	6863      	ldr	r3, [r4, #4]
   80530:	f043 0302 	orr.w	r3, r3, #2
   80534:	6063      	str	r3, [r4, #4]
   80536:	e003      	b.n	80540 <ethernet_phy_auto_negotiate+0x150>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_FD;
   80538:	6863      	ldr	r3, [r4, #4]
   8053a:	f023 0302 	bic.w	r3, r3, #2
   8053e:	6063      	str	r3, [r4, #4]
 * \param uc_enable   0 to disable the RMII mode, else to enable it.
 */
static inline void emac_enable_rmii(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_USRIO |= EMAC_USRIO_RMII;
   80540:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   80544:	f043 0301 	orr.w	r3, r3, #1
   80548:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 */
static inline void emac_enable_transceiver_clock(Emac* p_emac,
		uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_USRIO |= EMAC_USRIO_CLKEN;
   8054c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   80550:	f043 0302 	orr.w	r3, r3, #2
   80554:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   80558:	6823      	ldr	r3, [r4, #0]
   8055a:	f023 0310 	bic.w	r3, r3, #16
   8055e:	6023      	str	r3, [r4, #0]

	emac_enable_rmii(p_emac, ETH_PHY_MODE);
	emac_enable_transceiver_clock(p_emac, true);

	emac_enable_management(p_emac, false);
	return uc_rc;
   80560:	2000      	movs	r0, #0
}
   80562:	b002      	add	sp, #8
   80564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80568:	00080789 	.word	0x00080789
   8056c:	000807e9 	.word	0x000807e9
   80570:	000f4240 	.word	0x000f4240

00080574 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Emac *p_emac, uint8_t uc_phy_addr)
{
   80574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80578:	b083      	sub	sp, #12
   8057a:	4605      	mov	r5, r0
   8057c:	4689      	mov	r9, r1
	uint32_t ul_bmcr = MII_RESET;
   8057e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80582:	ae02      	add	r6, sp, #8
   80584:	f846 3d04 	str.w	r3, [r6, #-4]!
 * \param uc_enable   0 to disable EMAC management, else to enable it.
 */
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
   80588:	6802      	ldr	r2, [r0, #0]
   8058a:	f042 0210 	orr.w	r2, r2, #16
   8058e:	6002      	str	r2, [r0, #0]
	uint8_t uc_rc = EMAC_TIMEOUT;

	emac_enable_management(p_emac, true);

	ul_bmcr = MII_RESET;
	emac_phy_write(p_emac, uc_phy_address, MII_BMCR, ul_bmcr);
   80590:	2200      	movs	r2, #0
   80592:	4c0e      	ldr	r4, [pc, #56]	; (805cc <ethernet_phy_reset+0x58>)
   80594:	47a0      	blx	r4
 */
uint8_t ethernet_phy_reset(Emac *p_emac, uint8_t uc_phy_addr)
{
	uint32_t ul_bmcr = MII_RESET;
	uint8_t uc_phy_address = uc_phy_addr;
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
   80596:	240a      	movs	r4, #10

	ul_bmcr = MII_RESET;
	emac_phy_write(p_emac, uc_phy_address, MII_BMCR, ul_bmcr);

	do {
		emac_phy_read(p_emac, uc_phy_address, MII_BMCR, &ul_bmcr);
   80598:	f04f 0800 	mov.w	r8, #0
   8059c:	4f0c      	ldr	r7, [pc, #48]	; (805d0 <ethernet_phy_reset+0x5c>)
   8059e:	4628      	mov	r0, r5
   805a0:	4649      	mov	r1, r9
   805a2:	4642      	mov	r2, r8
   805a4:	4633      	mov	r3, r6
   805a6:	47b8      	blx	r7
		ul_timeout--;
   805a8:	3c01      	subs	r4, #1
	} while ((ul_bmcr & MII_RESET) && ul_timeout);
   805aa:	9b01      	ldr	r3, [sp, #4]
   805ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   805b0:	d001      	beq.n	805b6 <ethernet_phy_reset+0x42>
   805b2:	2c00      	cmp	r4, #0
   805b4:	d1f3      	bne.n	8059e <ethernet_phy_reset+0x2a>
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   805b6:	682b      	ldr	r3, [r5, #0]
   805b8:	f023 0310 	bic.w	r3, r3, #16
   805bc:	602b      	str	r3, [r5, #0]
	if (!ul_timeout) {
		uc_rc = EMAC_OK;
	}

	return (uc_rc);
}
   805be:	1c20      	adds	r0, r4, #0
   805c0:	bf18      	it	ne
   805c2:	2001      	movne	r0, #1
   805c4:	b003      	add	sp, #12
   805c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   805ca:	bf00      	nop
   805cc:	000807e9 	.word	0x000807e9
   805d0:	00080789 	.word	0x00080789

000805d4 <ethernet_phy_init>:
 */
static inline uint8_t emac_set_clock(Emac* p_emac, uint32_t ul_mck)
{
	uint32_t ul_clk;

	if (ul_mck > EMAC_CLOCK_SPEED_160MHZ) {
   805d4:	4b39      	ldr	r3, [pc, #228]	; (806bc <ethernet_phy_init+0xe8>)
   805d6:	429a      	cmp	r2, r3
   805d8:	d86e      	bhi.n	806b8 <ethernet_phy_init+0xe4>
 * \param ul_mck EMAC MCK. 
 *
 * Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_init(Emac *p_emac, uint8_t uc_phy_addr, uint32_t mck)
{
   805da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   805de:	b083      	sub	sp, #12
		return EMAC_INVALID;
	} else if (ul_mck > EMAC_CLOCK_SPEED_80MHZ) {
   805e0:	4b37      	ldr	r3, [pc, #220]	; (806c0 <ethernet_phy_init+0xec>)
   805e2:	429a      	cmp	r2, r3
   805e4:	d809      	bhi.n	805fa <ethernet_phy_init+0x26>
		ul_clk = EMAC_NCFGR_CLK_MCK_64;
	} else if (ul_mck > EMAC_CLOCK_SPEED_40MHZ) {
   805e6:	4b37      	ldr	r3, [pc, #220]	; (806c4 <ethernet_phy_init+0xf0>)
   805e8:	429a      	cmp	r2, r3
   805ea:	d809      	bhi.n	80600 <ethernet_phy_init+0x2c>
		ul_clk = EMAC_NCFGR_CLK_MCK_32;
	} else if (ul_mck > EMAC_CLOCK_SPEED_20MHZ) {
		ul_clk = EMAC_NCFGR_CLK_MCK_16;
	} else {
		ul_clk = EMAC_NCFGR_CLK_MCK_8;
   805ec:	4b36      	ldr	r3, [pc, #216]	; (806c8 <ethernet_phy_init+0xf4>)
   805ee:	429a      	cmp	r2, r3
   805f0:	bf8c      	ite	hi
   805f2:	f44f 6280 	movhi.w	r2, #1024	; 0x400
   805f6:	2200      	movls	r2, #0
   805f8:	e004      	b.n	80604 <ethernet_phy_init+0x30>
	uint32_t ul_clk;

	if (ul_mck > EMAC_CLOCK_SPEED_160MHZ) {
		return EMAC_INVALID;
	} else if (ul_mck > EMAC_CLOCK_SPEED_80MHZ) {
		ul_clk = EMAC_NCFGR_CLK_MCK_64;
   805fa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   805fe:	e001      	b.n	80604 <ethernet_phy_init+0x30>
	} else if (ul_mck > EMAC_CLOCK_SPEED_40MHZ) {
		ul_clk = EMAC_NCFGR_CLK_MCK_32;
   80600:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80604:	4689      	mov	r9, r1
   80606:	4606      	mov	r6, r0
		ul_clk = EMAC_NCFGR_CLK_MCK_16;
	} else {
		ul_clk = EMAC_NCFGR_CLK_MCK_8;
	}

	p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_CLK_Msk;
   80608:	6843      	ldr	r3, [r0, #4]
   8060a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   8060e:	6043      	str	r3, [r0, #4]
	p_emac->EMAC_NCFGR |= ul_clk;
   80610:	6843      	ldr	r3, [r0, #4]
   80612:	431a      	orrs	r2, r3
   80614:	6042      	str	r2, [r0, #4]
 * \return 0xFF when no valid PHY address is found. 
 */
static uint8_t ethernet_phy_find_valid(Emac *p_emac, uint8_t uc_phy_addr,
		uint8_t addrStart)
{
	uint32_t ul_value = 0;
   80616:	ab02      	add	r3, sp, #8
   80618:	2200      	movs	r2, #0
   8061a:	f843 2d04 	str.w	r2, [r3, #-4]!
 * \param uc_enable   0 to disable EMAC management, else to enable it.
 */
static inline void emac_enable_management(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_MPE;
   8061e:	6802      	ldr	r2, [r0, #0]
   80620:	f042 0210 	orr.w	r2, r2, #16
   80624:	6002      	str	r2, [r0, #0]

	emac_enable_management(p_emac, true);

	/* Check the current PHY address */
	uc_rc = uc_phy_address;
	if (emac_phy_read(p_emac, uc_phy_addr, MII_PHYID1, &ul_value) != EMAC_OK) {
   80626:	2202      	movs	r2, #2
   80628:	4c28      	ldr	r4, [pc, #160]	; (806cc <ethernet_phy_init+0xf8>)
   8062a:	47a0      	blx	r4
	}

	/* Find another one */
	if (ul_value != MII_OUI_MSB) {
   8062c:	f240 1381 	movw	r3, #385	; 0x181
   80630:	9a01      	ldr	r2, [sp, #4]
   80632:	429a      	cmp	r2, r3
   80634:	d035      	beq.n	806a2 <ethernet_phy_init+0xce>
   80636:	464c      	mov	r4, r9
   80638:	2520      	movs	r5, #32
		uc_rc = 0xFF;
		for (uc_cnt = addrStart; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
			emac_phy_read(p_emac, uc_phy_address, MII_PHYID1, &ul_value);
   8063a:	f04f 0802 	mov.w	r8, #2
   8063e:	4f23      	ldr	r7, [pc, #140]	; (806cc <ethernet_phy_init+0xf8>)

	/* Find another one */
	if (ul_value != MII_OUI_MSB) {
		uc_rc = 0xFF;
		for (uc_cnt = addrStart; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
   80640:	3401      	adds	r4, #1
   80642:	f004 041f 	and.w	r4, r4, #31
			emac_phy_read(p_emac, uc_phy_address, MII_PHYID1, &ul_value);
   80646:	4630      	mov	r0, r6
   80648:	4621      	mov	r1, r4
   8064a:	4642      	mov	r2, r8
   8064c:	ab01      	add	r3, sp, #4
   8064e:	47b8      	blx	r7
			if (ul_value == MII_OUI_MSB) {
   80650:	f240 1381 	movw	r3, #385	; 0x181
   80654:	9a01      	ldr	r2, [sp, #4]
   80656:	429a      	cmp	r2, r3
   80658:	d004      	beq.n	80664 <ethernet_phy_init+0x90>
   8065a:	1e6b      	subs	r3, r5, #1
	}

	/* Find another one */
	if (ul_value != MII_OUI_MSB) {
		uc_rc = 0xFF;
		for (uc_cnt = addrStart; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
   8065c:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
   80660:	d1ee      	bne.n	80640 <ethernet_phy_init+0x6c>
   80662:	e012      	b.n	8068a <ethernet_phy_init+0xb6>
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_MPE;
   80664:	6833      	ldr	r3, [r6, #0]
   80666:	f023 0310 	bic.w	r3, r3, #16
   8066a:	6033      	str	r3, [r6, #0]
		}
	}

	emac_enable_management(p_emac, false);

	if (uc_rc != 0xFF) {
   8066c:	2cff      	cmp	r4, #255	; 0xff
   8066e:	d01f      	beq.n	806b0 <ethernet_phy_init+0xdc>
		emac_phy_read(p_emac, uc_phy_address, MII_DSCSR, &ul_value);
   80670:	4630      	mov	r0, r6
   80672:	4621      	mov	r1, r4
   80674:	2211      	movs	r2, #17
   80676:	ab01      	add	r3, sp, #4
   80678:	4d14      	ldr	r5, [pc, #80]	; (806cc <ethernet_phy_init+0xf8>)
   8067a:	47a8      	blx	r5
	/* Check PHY Address */
	uc_phy = ethernet_phy_find_valid(p_emac, uc_phy_addr, 0);
	if (uc_phy == 0xFF) {
		return 0;
	}
	if (uc_phy != uc_phy_addr) {
   8067c:	45a1      	cmp	r9, r4
   8067e:	d017      	beq.n	806b0 <ethernet_phy_init+0xdc>
		ethernet_phy_reset(p_emac, uc_phy_addr);
   80680:	4630      	mov	r0, r6
   80682:	4649      	mov	r1, r9
   80684:	4b12      	ldr	r3, [pc, #72]	; (806d0 <ethernet_phy_init+0xfc>)
   80686:	4798      	blx	r3
   80688:	e012      	b.n	806b0 <ethernet_phy_init+0xdc>
   8068a:	6833      	ldr	r3, [r6, #0]
   8068c:	f023 0310 	bic.w	r3, r3, #16
   80690:	6033      	str	r3, [r6, #0]
   80692:	e00d      	b.n	806b0 <ethernet_phy_init+0xdc>
	}

	emac_enable_management(p_emac, false);

	if (uc_rc != 0xFF) {
		emac_phy_read(p_emac, uc_phy_address, MII_DSCSR, &ul_value);
   80694:	4630      	mov	r0, r6
   80696:	4649      	mov	r1, r9
   80698:	2211      	movs	r2, #17
   8069a:	ab01      	add	r3, sp, #4
   8069c:	4c0b      	ldr	r4, [pc, #44]	; (806cc <ethernet_phy_init+0xf8>)
   8069e:	47a0      	blx	r4
   806a0:	e006      	b.n	806b0 <ethernet_phy_init+0xdc>
   806a2:	6833      	ldr	r3, [r6, #0]
   806a4:	f023 0310 	bic.w	r3, r3, #16
   806a8:	6033      	str	r3, [r6, #0]
		}
	}

	emac_enable_management(p_emac, false);

	if (uc_rc != 0xFF) {
   806aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   806ae:	d1f1      	bne.n	80694 <ethernet_phy_init+0xc0>
	if (uc_phy != uc_phy_addr) {
		ethernet_phy_reset(p_emac, uc_phy_addr);
	}

	return uc_rc;
}
   806b0:	2000      	movs	r0, #0
   806b2:	b003      	add	sp, #12
   806b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   806b8:	2000      	movs	r0, #0
   806ba:	4770      	bx	lr
   806bc:	09896800 	.word	0x09896800
   806c0:	04c4b400 	.word	0x04c4b400
   806c4:	02625a00 	.word	0x02625a00
   806c8:	01312d00 	.word	0x01312d00
   806cc:	00080789 	.word	0x00080789
   806d0:	00080575 	.word	0x00080575

000806d4 <circ_inc>:
#define CIRC_CLEAR(head, tail)     (head = tail = 0)

/** Increment head or tail */
static void circ_inc(uint16_t *headortail, uint32_t size)
{
        (*headortail)++;
   806d4:	8803      	ldrh	r3, [r0, #0]
   806d6:	3301      	adds	r3, #1
        if((*headortail) >= size) {
   806d8:	b29b      	uxth	r3, r3
            (*headortail) = 0;
   806da:	428b      	cmp	r3, r1
   806dc:	bf28      	it	cs
   806de:	2300      	movcs	r3, #0
   806e0:	8003      	strh	r3, [r0, #0]
   806e2:	4770      	bx	lr

000806e4 <emac_reset_tx_mem>:
 *
 * \param p_dev Pointer to EMAC driver instance.
 *
 */
static void emac_reset_tx_mem(emac_device_t* p_dev)
{
   806e4:	b4f0      	push	{r4, r5, r6, r7}
	Emac *p_hw = p_dev->p_hw;
   806e6:	6807      	ldr	r7, [r0, #0]
	uint8_t *p_tx_buff = p_dev->p_tx_buffer;
   806e8:	6842      	ldr	r2, [r0, #4]
	emac_tx_descriptor_t *p_td = p_dev->p_tx_dscr;
   806ea:	6905      	ldr	r5, [r0, #16]
static inline void emac_enable_transmit(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_TE;
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_TE;
   806ec:	683b      	ldr	r3, [r7, #0]
   806ee:	f023 0308 	bic.w	r3, r3, #8
   806f2:	603b      	str	r3, [r7, #0]

	/* Disable TX */
	emac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->us_tx_head, p_dev->us_tx_tail);
   806f4:	2300      	movs	r3, #0
   806f6:	8503      	strh	r3, [r0, #40]	; 0x28
   806f8:	84c3      	strh	r3, [r0, #38]	; 0x26
	for (ul_index = 0; ul_index < p_dev->us_tx_list_size; ul_index++) {
   806fa:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   806fc:	b173      	cbz	r3, 8071c <emac_reset_tx_mem+0x38>
   806fe:	4629      	mov	r1, r5
   80700:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * EMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = EMAC_TXD_USED;
   80702:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->us_tx_head, p_dev->us_tx_tail);
	for (ul_index = 0; ul_index < p_dev->us_tx_list_size; ul_index++) {
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * EMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
   80706:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
		p_td[ul_index].status.val = EMAC_TXD_USED;
   8070a:	604e      	str	r6, [r1, #4]
	/* Disable TX */
	emac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->us_tx_head, p_dev->us_tx_tail);
	for (ul_index = 0; ul_index < p_dev->us_tx_list_size; ul_index++) {
   8070c:	3301      	adds	r3, #1
   8070e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   80710:	f202 52ee 	addw	r2, r2, #1518	; 0x5ee
   80714:	3108      	adds	r1, #8
   80716:	429c      	cmp	r4, r3
   80718:	d8f5      	bhi.n	80706 <emac_reset_tx_mem+0x22>
   8071a:	e000      	b.n	8071e <emac_reset_tx_mem+0x3a>
   8071c:	2400      	movs	r4, #0
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * EMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = EMAC_TXD_USED;
	}
	p_td[p_dev->us_tx_list_size - 1].status.val =
   8071e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   80722:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   80726:	f844 3c04 	str.w	r3, [r4, #-4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_addr  Tx queue address.
 */
static inline void emac_set_tx_queue(Emac* p_emac, uint32_t ul_addr)
{
	p_emac->EMAC_TBQP = EMAC_TBQP_ADDR_Msk & ul_addr;
   8072a:	f025 0503 	bic.w	r5, r5, #3
   8072e:	61fd      	str	r5, [r7, #28]
			EMAC_TXD_USED | EMAC_TXD_WRAP;

	/* Set transmit buffer queue */
	emac_set_tx_queue(p_hw, (uint32_t) p_td);
}
   80730:	bcf0      	pop	{r4, r5, r6, r7}
   80732:	4770      	bx	lr

00080734 <emac_reset_rx_mem>:
 * \brief Disable receiver, reset registers and descriptor list.
 *
 * \param p_drv Pointer to EMAC Driver instance.
 */
static void emac_reset_rx_mem(emac_device_t* p_dev)
{
   80734:	b4f0      	push	{r4, r5, r6, r7}
	Emac *p_hw = p_dev->p_hw;
   80736:	6807      	ldr	r7, [r0, #0]
	uint8_t *p_rx_buff = p_dev->p_rx_buffer;
   80738:	6882      	ldr	r2, [r0, #8]
	emac_rx_descriptor_t *pRd = p_dev->p_rx_dscr;
   8073a:	68c5      	ldr	r5, [r0, #12]
static inline void emac_enable_receive(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_RE;
	} else {
		p_emac->EMAC_NCR &= ~EMAC_NCR_RE;
   8073c:	683b      	ldr	r3, [r7, #0]
   8073e:	f023 0304 	bic.w	r3, r3, #4
   80742:	603b      	str	r3, [r7, #0]

	/* Disable RX */
	emac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->us_rx_idx = 0;
   80744:	2300      	movs	r3, #0
   80746:	8443      	strh	r3, [r0, #34]	; 0x22
	for (ul_index = 0; ul_index < p_dev->us_rx_list_size; ul_index++) {
   80748:	8c03      	ldrh	r3, [r0, #32]
   8074a:	b173      	cbz	r3, 8076a <emac_reset_rx_mem+0x36>
   8074c:	4629      	mov	r1, r5
   8074e:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * EMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & EMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
   80750:	461e      	mov	r6, r3

	/* Set up the RX descriptors */
	p_dev->us_rx_idx = 0;
	for (ul_index = 0; ul_index < p_dev->us_rx_list_size; ul_index++) {
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * EMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & EMAC_RXD_ADDR_MASK;
   80752:	f022 0403 	bic.w	r4, r2, #3
   80756:	f845 4033 	str.w	r4, [r5, r3, lsl #3]
		pRd[ul_index].status.val = 0;
   8075a:	604e      	str	r6, [r1, #4]
	/* Disable RX */
	emac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->us_rx_idx = 0;
	for (ul_index = 0; ul_index < p_dev->us_rx_list_size; ul_index++) {
   8075c:	3301      	adds	r3, #1
   8075e:	8c04      	ldrh	r4, [r0, #32]
   80760:	3280      	adds	r2, #128	; 0x80
   80762:	3108      	adds	r1, #8
   80764:	429c      	cmp	r4, r3
   80766:	d8f4      	bhi.n	80752 <emac_reset_rx_mem+0x1e>
   80768:	e000      	b.n	8076c <emac_reset_rx_mem+0x38>
   8076a:	2400      	movs	r4, #0
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * EMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & EMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
	}
	pRd[p_dev->us_rx_list_size - 1].addr.val |= EMAC_RXD_WRAP;
   8076c:	f104 5400 	add.w	r4, r4, #536870912	; 0x20000000
   80770:	3c01      	subs	r4, #1
   80772:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
   80776:	f043 0302 	orr.w	r3, r3, #2
   8077a:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_addr   Rx queue address.
 */
static inline void emac_set_rx_queue(Emac* p_emac, uint32_t ul_addr)
{
	p_emac->EMAC_RBQP = EMAC_RBQP_ADDR_Msk & ul_addr;
   8077e:	f025 0503 	bic.w	r5, r5, #3
   80782:	61bd      	str	r5, [r7, #24]

	/* Set receive buffer queue */
	emac_set_rx_queue(p_hw, (uint32_t) pRd);
}
   80784:	bcf0      	pop	{r4, r5, r6, r7}
   80786:	4770      	bx	lr

00080788 <emac_phy_read>:
 *
 * \Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout.
 */
uint8_t emac_phy_read(Emac* p_emac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
   80788:	b410      	push	{r4}
   8078a:	b083      	sub	sp, #12
static inline void emac_maintain_phy(Emac* p_emac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
   8078c:	6884      	ldr	r4, [r0, #8]
   8078e:	f014 0f04 	tst.w	r4, #4
   80792:	d0fb      	beq.n	8078c <emac_phy_read+0x4>
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
			| EMAC_MAN_SOF(EMAC_MAN_SOF_VALUE)
			| EMAC_MAN_PHYA(uc_phy_addr)
			| EMAC_MAN_REGA(uc_reg_addr)
   80794:	0492      	lsls	r2, r2, #18
   80796:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
   8079a:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
   8079e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
			| EMAC_MAN_SOF(EMAC_MAN_SOF_VALUE)
			| EMAC_MAN_PHYA(uc_phy_addr)
   807a2:	05c9      	lsls	r1, r1, #23
   807a4:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| EMAC_MAN_REGA(uc_reg_addr)
			| EMAC_MAN_RW((uc_rw ? EMAC_MAN_RW_TYPE : EMAC_MAN_READ_ONLY))
			| EMAC_MAN_DATA(us_data);
   807a8:	430a      	orrs	r2, r1
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
   807aa:	6342      	str	r2, [r0, #52]	; 0x34
 *
 * Return EMAC_OK if the operation is completed successfully.
 */
static uint8_t emac_wait_phy(Emac* p_emac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;
   807ac:	2200      	movs	r2, #0
   807ae:	9201      	str	r2, [sp, #4]
			continue;
		}

		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
   807b0:	490c      	ldr	r1, [pc, #48]	; (807e4 <emac_phy_read+0x5c>)
   807b2:	e005      	b.n	807c0 <emac_phy_read+0x38>
	while (!emac_is_phy_idle(p_emac)) {
		if (ul_retry == 0) {
			continue;
		}

		ul_retry_count++;
   807b4:	9a01      	ldr	r2, [sp, #4]
   807b6:	3201      	adds	r2, #1
   807b8:	9201      	str	r2, [sp, #4]

		if (ul_retry_count >= ul_retry) {
   807ba:	9a01      	ldr	r2, [sp, #4]
   807bc:	428a      	cmp	r2, r1
   807be:	d80c      	bhi.n	807da <emac_phy_read+0x52>
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t emac_is_phy_idle(Emac* p_emac)
{
	return ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) > 0);
   807c0:	6882      	ldr	r2, [r0, #8]
 */
static uint8_t emac_wait_phy(Emac* p_emac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!emac_is_phy_idle(p_emac)) {
   807c2:	f012 0f04 	tst.w	r2, #4
   807c6:	d0f5      	beq.n	807b4 <emac_phy_read+0x2c>
 * \return Get PHY data.
 */
static inline uint16_t emac_get_phy_data(Emac* p_emac)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
   807c8:	6882      	ldr	r2, [r0, #8]
   807ca:	f012 0f04 	tst.w	r2, #4
   807ce:	d0fb      	beq.n	807c8 <emac_phy_read+0x40>
	/* Return data */
	return (uint16_t) (p_emac->EMAC_MAN & EMAC_MAN_DATA_Msk);
   807d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
	emac_maintain_phy(p_emac, uc_phy_address, uc_address, 1, 0);

	if (emac_wait_phy(p_emac, MAC_PHY_RETRY_MAX) == EMAC_TIMEOUT) {
		return EMAC_TIMEOUT;
	}
	*p_value = emac_get_phy_data(p_emac);
   807d2:	b292      	uxth	r2, r2
   807d4:	601a      	str	r2, [r3, #0]
	return EMAC_OK;
   807d6:	2000      	movs	r0, #0
   807d8:	e000      	b.n	807dc <emac_phy_read+0x54>
		uint32_t* p_value)
{
	emac_maintain_phy(p_emac, uc_phy_address, uc_address, 1, 0);

	if (emac_wait_phy(p_emac, MAC_PHY_RETRY_MAX) == EMAC_TIMEOUT) {
		return EMAC_TIMEOUT;
   807da:	2001      	movs	r0, #1
	}
	*p_value = emac_get_phy_data(p_emac);
	return EMAC_OK;
}
   807dc:	b003      	add	sp, #12
   807de:	f85d 4b04 	ldr.w	r4, [sp], #4
   807e2:	4770      	bx	lr
   807e4:	000f423f 	.word	0x000f423f

000807e8 <emac_phy_write>:
 *
 * \Return EMAC_OK if successfully, EMAC_TIMEOUT if timeout.
 */
uint8_t emac_phy_write(Emac* p_emac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
   807e8:	b410      	push	{r4}
   807ea:	b083      	sub	sp, #12
static inline void emac_maintain_phy(Emac* p_emac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
   807ec:	6884      	ldr	r4, [r0, #8]
   807ee:	f014 0f04 	tst.w	r4, #4
   807f2:	d0fb      	beq.n	807ec <emac_phy_write+0x4>
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
			| EMAC_MAN_SOF(EMAC_MAN_SOF_VALUE)
			| EMAC_MAN_PHYA(uc_phy_addr)
			| EMAC_MAN_REGA(uc_reg_addr)
   807f4:	0492      	lsls	r2, r2, #18
   807f6:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
   807fa:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
   807fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
			| EMAC_MAN_SOF(EMAC_MAN_SOF_VALUE)
			| EMAC_MAN_PHYA(uc_phy_addr)
   80802:	05c9      	lsls	r1, r1, #23
   80804:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
   80808:	430a      	orrs	r2, r1
			| EMAC_MAN_REGA(uc_reg_addr)
			| EMAC_MAN_RW((uc_rw ? EMAC_MAN_RW_TYPE : EMAC_MAN_READ_ONLY))
			| EMAC_MAN_DATA(us_data);
   8080a:	b29b      	uxth	r3, r3
   8080c:	431a      	orrs	r2, r3
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_emac->EMAC_MAN = EMAC_MAN_CODE(EMAC_MAN_CODE_VALUE)
   8080e:	6342      	str	r2, [r0, #52]	; 0x34
 *
 * Return EMAC_OK if the operation is completed successfully.
 */
static uint8_t emac_wait_phy(Emac* p_emac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;
   80810:	2300      	movs	r3, #0
   80812:	9301      	str	r3, [sp, #4]
			continue;
		}

		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
   80814:	4a09      	ldr	r2, [pc, #36]	; (8083c <emac_phy_write+0x54>)
   80816:	e005      	b.n	80824 <emac_phy_write+0x3c>
	while (!emac_is_phy_idle(p_emac)) {
		if (ul_retry == 0) {
			continue;
		}

		ul_retry_count++;
   80818:	9b01      	ldr	r3, [sp, #4]
   8081a:	3301      	adds	r3, #1
   8081c:	9301      	str	r3, [sp, #4]

		if (ul_retry_count >= ul_retry) {
   8081e:	9b01      	ldr	r3, [sp, #4]
   80820:	4293      	cmp	r3, r2
   80822:	d805      	bhi.n	80830 <emac_phy_write+0x48>
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t emac_is_phy_idle(Emac* p_emac)
{
	return ((p_emac->EMAC_NSR & EMAC_NSR_IDLE) > 0);
   80824:	6883      	ldr	r3, [r0, #8]
 */
static uint8_t emac_wait_phy(Emac* p_emac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!emac_is_phy_idle(p_emac)) {
   80826:	f013 0f04 	tst.w	r3, #4
   8082a:	d0f5      	beq.n	80818 <emac_phy_write+0x30>

		if (ul_retry_count >= ul_retry) {
			return EMAC_TIMEOUT;
		}
	}
	return EMAC_OK;
   8082c:	2000      	movs	r0, #0
   8082e:	e000      	b.n	80832 <emac_phy_write+0x4a>
		}

		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
			return EMAC_TIMEOUT;
   80830:	2001      	movs	r0, #1

	if (emac_wait_phy(p_emac, MAC_PHY_RETRY_MAX) == EMAC_TIMEOUT) {
		return EMAC_TIMEOUT;
	}
	return EMAC_OK;
}
   80832:	b003      	add	sp, #12
   80834:	f85d 4b04 	ldr.w	r4, [sp], #4
   80838:	4770      	bx	lr
   8083a:	bf00      	nop
   8083c:	000f423f 	.word	0x000f423f

00080840 <emac_dev_init>:
 * \param p_emac_dev Pointer to the EMAC device instance. 
 * \param p_opt EMAC configure options.
 */
void emac_dev_init(Emac* p_emac, emac_device_t* p_emac_dev,
		emac_options_t* p_opt)
{
   80840:	b570      	push	{r4, r5, r6, lr}
   80842:	4604      	mov	r4, r0
   80844:	460d      	mov	r5, r1
   80846:	4616      	mov	r6, r2
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_ncr   Network control value.
 */
static inline void emac_network_control(Emac* p_emac, uint32_t ul_ncr)
{
	p_emac->EMAC_NCR = ul_ncr;
   80848:	2300      	movs	r3, #0
   8084a:	6003      	str	r3, [r0, #0]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_source   Interrupt source(s) to be disabled.
 */
static inline void emac_disable_interrupt(Emac* p_emac, uint32_t ul_source)
{
	p_emac->EMAC_IDR = ul_source;
   8084c:	f04f 33ff 	mov.w	r3, #4294967295
   80850:	62c3      	str	r3, [r0, #44]	; 0x2c
 *
 * \param p_emac   Pointer to the EMAC instance.
 */
static inline void emac_clear_statistics(Emac* p_emac)
{
	p_emac->EMAC_NCR |= EMAC_NCR_CLRSTAT;
   80852:	6803      	ldr	r3, [r0, #0]
   80854:	f043 0320 	orr.w	r3, r3, #32
   80858:	6003      	str	r3, [r0, #0]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_status   Receive status.
 */
static inline void emac_clear_rx_status(Emac* p_emac, uint32_t ul_status)
{
	p_emac->EMAC_RSR = ul_status;
   8085a:	2307      	movs	r3, #7
   8085c:	6203      	str	r3, [r0, #32]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_status   Transmit status.
 */
static inline void emac_clear_tx_status(Emac* p_emac, uint32_t ul_status)
{
	p_emac->EMAC_TSR = ul_status;
   8085e:	2377      	movs	r3, #119	; 0x77
   80860:	6143      	str	r3, [r0, #20]
 *
 * \return Interrupt status.
 */
static inline uint32_t emac_get_interrupt_status(Emac* p_emac)
{
	return p_emac->EMAC_ISR;
   80862:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * \return Network configuration.
 */
static inline uint32_t emac_get_configure(Emac* p_emac)
{
	return p_emac->EMAC_NCFGR;
   80864:	6843      	ldr	r3, [r0, #4]
	/* Clear interrupts */
	emac_get_interrupt_status(p_emac);

	/* Enable the copy of data into the buffers
	   ignore broadcasts, and not copy FCS. */
	emac_set_configure(p_emac,
   80866:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
 * \param p_emac   Pointer to the EMAC instance.
  * \param ul_cfg   Network configuration value.
 */
static inline void emac_set_configure(Emac* p_emac, uint32_t ul_cfg)
{
	p_emac->EMAC_NCFGR = ul_cfg;
   8086a:	6043      	str	r3, [r0, #4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_enable   0 to disable copying all valid frames, else to enable it.
 */
static inline void emac_enable_copy_all(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
   8086c:	7813      	ldrb	r3, [r2, #0]
   8086e:	b123      	cbz	r3, 8087a <emac_dev_init+0x3a>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_CAF;
   80870:	6843      	ldr	r3, [r0, #4]
   80872:	f043 0310 	orr.w	r3, r3, #16
   80876:	6043      	str	r3, [r0, #4]
   80878:	e003      	b.n	80882 <emac_dev_init+0x42>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_CAF;
   8087a:	6843      	ldr	r3, [r0, #4]
   8087c:	f023 0310 	bic.w	r3, r3, #16
   80880:	6043      	str	r3, [r0, #4]
 * \param p_emac   Pointer to the EMAC instance.
 * \param uc_enable   1 to disable the broadcast, else to enable it.
 */
static inline void emac_disable_broadcast(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
   80882:	7873      	ldrb	r3, [r6, #1]
   80884:	b123      	cbz	r3, 80890 <emac_dev_init+0x50>
		p_emac->EMAC_NCFGR |= EMAC_NCFGR_NBC;
   80886:	6863      	ldr	r3, [r4, #4]
   80888:	f043 0320 	orr.w	r3, r3, #32
   8088c:	6063      	str	r3, [r4, #4]
   8088e:	e003      	b.n	80898 <emac_dev_init+0x58>
	} else {
		p_emac->EMAC_NCFGR &= ~EMAC_NCFGR_NBC;
   80890:	6863      	ldr	r3, [r4, #4]
   80892:	f023 0320 	bic.w	r3, r3, #32
   80896:	6063      	str	r3, [r4, #4]
	if (p_dev_mm->us_rx_size <= 1 || p_dev_mm->us_tx_size <= 1 || p_tx_cb == NULL) {
		return EMAC_PARAM;
	}

	/* Assign RX buffers */
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
   80898:	4b1e      	ldr	r3, [pc, #120]	; (80914 <emac_dev_init+0xd4>)
			|| ((uint32_t) p_dev_mm->p_rx_dscr & 0x7)) {
		p_dev_mm->us_rx_size--;
	}
	p_emac_dev->p_rx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
   8089a:	f023 0307 	bic.w	r3, r3, #7
	/* Assign RX buffers */
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
			|| ((uint32_t) p_dev_mm->p_rx_dscr & 0x7)) {
		p_dev_mm->us_rx_size--;
	}
	p_emac_dev->p_rx_buffer =
   8089e:	60ab      	str	r3, [r5, #8]
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
	p_emac_dev->p_rx_dscr =
			(emac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr 
   808a0:	4b1d      	ldr	r3, [pc, #116]	; (80918 <emac_dev_init+0xd8>)
			& 0xFFFFFFF8);
   808a2:	f023 0307 	bic.w	r3, r3, #7
			|| ((uint32_t) p_dev_mm->p_rx_dscr & 0x7)) {
		p_dev_mm->us_rx_size--;
	}
	p_emac_dev->p_rx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
	p_emac_dev->p_rx_dscr =
   808a6:	60eb      	str	r3, [r5, #12]
			(emac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr 
			& 0xFFFFFFF8);
	p_emac_dev->us_rx_list_size = p_dev_mm->us_rx_size;
   808a8:	2310      	movs	r3, #16
   808aa:	842b      	strh	r3, [r5, #32]

	/* Assign TX buffers */
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
   808ac:	4b1b      	ldr	r3, [pc, #108]	; (8091c <emac_dev_init+0xdc>)
			|| ((uint32_t) p_dev_mm->p_tx_dscr & 0x7)) {
		p_dev_mm->us_tx_size--;
	}
	p_emac_dev->p_tx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
   808ae:	f023 0307 	bic.w	r3, r3, #7
	/* Assign TX buffers */
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
			|| ((uint32_t) p_dev_mm->p_tx_dscr & 0x7)) {
		p_dev_mm->us_tx_size--;
	}
	p_emac_dev->p_tx_buffer =
   808b2:	606b      	str	r3, [r5, #4]
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
	p_emac_dev->p_tx_dscr =
			(emac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr 
   808b4:	4b1a      	ldr	r3, [pc, #104]	; (80920 <emac_dev_init+0xe0>)
			& 0xFFFFFFF8);
   808b6:	f023 0307 	bic.w	r3, r3, #7
			|| ((uint32_t) p_dev_mm->p_tx_dscr & 0x7)) {
		p_dev_mm->us_tx_size--;
	}
	p_emac_dev->p_tx_buffer =
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
	p_emac_dev->p_tx_dscr =
   808ba:	612b      	str	r3, [r5, #16]
			(emac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr 
			& 0xFFFFFFF8);
	p_emac_dev->us_tx_list_size = p_dev_mm->us_tx_size;
   808bc:	2308      	movs	r3, #8
   808be:	84ab      	strh	r3, [r5, #36]	; 0x24
	p_emac_dev->func_tx_cb_list = p_tx_cb;
   808c0:	4b18      	ldr	r3, [pc, #96]	; (80924 <emac_dev_init+0xe4>)
   808c2:	61eb      	str	r3, [r5, #28]

	/* Reset TX & RX */
	emac_reset_rx_mem(p_emac_dev);
   808c4:	4628      	mov	r0, r5
   808c6:	4b18      	ldr	r3, [pc, #96]	; (80928 <emac_dev_init+0xe8>)
   808c8:	4798      	blx	r3
	emac_reset_tx_mem(p_emac_dev);
   808ca:	4628      	mov	r0, r5
   808cc:	4b17      	ldr	r3, [pc, #92]	; (8092c <emac_dev_init+0xec>)
   808ce:	4798      	blx	r3
 * \param uc_enable   0 to disable EMAC transmit, else to enable it.
 */
static inline void emac_enable_transmit(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_TE;
   808d0:	6823      	ldr	r3, [r4, #0]
   808d2:	f043 0308 	orr.w	r3, r3, #8
   808d6:	6023      	str	r3, [r4, #0]
 * \param uc_enable   0 to disable EMAC receiver, else to enable it.
 */
static inline void emac_enable_receive(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_RE;
   808d8:	6823      	ldr	r3, [r4, #0]
   808da:	f043 0304 	orr.w	r3, r3, #4
   808de:	6023      	str	r3, [r4, #0]
 */
static inline void emac_enable_statistics_write(Emac* p_emac,
		uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_WESTAT;
   808e0:	6823      	ldr	r3, [r4, #0]
   808e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   808e6:	6023      	str	r3, [r4, #0]
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_source   Interrupt source(s) to be enabled.
 */
static inline void emac_enable_interrupt(Emac* p_emac, uint32_t ul_source)
{
	p_emac->EMAC_IER = ul_source;
   808e8:	f643 43f4 	movw	r3, #15604	; 0x3cf4
   808ec:	62a3      	str	r3, [r4, #40]	; 0x28
 * \param p_mac_addr  EMAC address.
 */
static inline void emac_set_address(Emac* p_emac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_emac->EMAC_SA[uc_index].EMAC_SAxB = (p_mac_addr[3] << 24)
   808ee:	7972      	ldrb	r2, [r6, #5]
			| (p_mac_addr[2] << 16)
   808f0:	7933      	ldrb	r3, [r6, #4]
   808f2:	041b      	lsls	r3, r3, #16
   808f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
   808f8:	78b2      	ldrb	r2, [r6, #2]
   808fa:	4313      	orrs	r3, r2
static inline void emac_set_address(Emac* p_emac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_emac->EMAC_SA[uc_index].EMAC_SAxB = (p_mac_addr[3] << 24)
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
   808fc:	78f2      	ldrb	r2, [r6, #3]
			| (p_mac_addr[0]);
   808fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 * \param p_mac_addr  EMAC address.
 */
static inline void emac_set_address(Emac* p_emac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_emac->EMAC_SA[uc_index].EMAC_SAxB = (p_mac_addr[3] << 24)
   80902:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
	p_emac->EMAC_SA[uc_index].EMAC_SAxT = (p_mac_addr[5] << 8)
   80906:	79f2      	ldrb	r2, [r6, #7]
			| (p_mac_addr[4]);
   80908:	79b3      	ldrb	r3, [r6, #6]
   8090a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
{
	p_emac->EMAC_SA[uc_index].EMAC_SAxB = (p_mac_addr[3] << 24)
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
	p_emac->EMAC_SA[uc_index].EMAC_SAxT = (p_mac_addr[5] << 8)
   8090e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
   80912:	bd70      	pop	{r4, r5, r6, pc}
   80914:	20073988 	.word	0x20073988
   80918:	20074188 	.word	0x20074188
   8091c:	200709f8 	.word	0x200709f8
   80920:	200709b8 	.word	0x200709b8
   80924:	20073968 	.word	0x20073968
   80928:	00080735 	.word	0x00080735
   8092c:	000806e5 	.word	0x000806e5

00080930 <emac_dev_read>:
 *
 * \return EMAC_OK if receiving frame successfully, otherwise failed.
 */
uint32_t emac_dev_read(emac_device_t* p_emac_dev, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
   80930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80934:	b085      	sub	sp, #20
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;
	uint16_t us_tmp_idx = p_emac_dev->us_rx_idx;
   80936:	8c44      	ldrh	r4, [r0, #34]	; 0x22
   80938:	f8ad 400e 	strh.w	r4, [sp, #14]
	emac_rx_descriptor_t *p_rx_td =
			&p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
   8093c:	68c6      	ldr	r6, [r0, #12]
	int8_t c_is_frame = 0;

	if (p_frame == NULL)
   8093e:	2900      	cmp	r1, #0
   80940:	f000 80a0 	beq.w	80a84 <emac_dev_read+0x154>
   80944:	460f      	mov	r7, r1
{
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;
	uint16_t us_tmp_idx = p_emac_dev->us_rx_idx;
	emac_rx_descriptor_t *p_rx_td =
   80946:	eb06 05c4 	add.w	r5, r6, r4, lsl #3

	if (p_frame == NULL)
		return EMAC_PARAM;

	/* Set the default return value */
	*p_rcv_size = 0;
   8094a:	2100      	movs	r1, #0
   8094c:	6019      	str	r1, [r3, #0]

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
   8094e:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
   80952:	f011 0f01 	tst.w	r1, #1
   80956:	f000 8097 	beq.w	80a88 <emac_dev_read+0x158>
   8095a:	9700      	str	r7, [sp, #0]
   8095c:	9301      	str	r3, [sp, #4]
   8095e:	4693      	mov	fp, r2
   80960:	4604      	mov	r4, r0
   80962:	f04f 0a00 	mov.w	sl, #0
   80966:	46d1      	mov	r9, sl
   80968:	46d0      	mov	r8, sl
			/* Start to gather buffers in a frame */
			c_is_frame = 1;
		}

		/* Increment the pointer */
		circ_inc(&us_tmp_idx, p_emac_dev->us_rx_list_size);
   8096a:	4e4f      	ldr	r6, [pc, #316]	; (80aa8 <emac_dev_read+0x178>)
   8096c:	4657      	mov	r7, sl
	*p_rcv_size = 0;

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
		/* A start of frame has been received, discard previous fragments */
		if ((p_rx_td->status.val & EMAC_RXD_SOF) == EMAC_RXD_SOF) {
   8096e:	686b      	ldr	r3, [r5, #4]
   80970:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   80974:	d019      	beq.n	809aa <emac_dev_read+0x7a>
			/* Skip previous fragment */
			while (us_tmp_idx != p_emac_dev->us_rx_idx) {
   80976:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   80978:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   8097c:	429a      	cmp	r2, r3
   8097e:	f000 8085 	beq.w	80a8c <emac_dev_read+0x15c>
				p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
				p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);

				circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   80982:	f104 0722 	add.w	r7, r4, #34	; 0x22
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
		/* A start of frame has been received, discard previous fragments */
		if ((p_rx_td->status.val & EMAC_RXD_SOF) == EMAC_RXD_SOF) {
			/* Skip previous fragment */
			while (us_tmp_idx != p_emac_dev->us_rx_idx) {
				p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
   80986:	68e2      	ldr	r2, [r4, #12]
   80988:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
				p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
   8098c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   80990:	f021 0101 	bic.w	r1, r1, #1
   80994:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   80998:	4638      	mov	r0, r7
   8099a:	8c21      	ldrh	r1, [r4, #32]
   8099c:	47b0      	blx	r6
	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
		/* A start of frame has been received, discard previous fragments */
		if ((p_rx_td->status.val & EMAC_RXD_SOF) == EMAC_RXD_SOF) {
			/* Skip previous fragment */
			while (us_tmp_idx != p_emac_dev->us_rx_idx) {
   8099e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   809a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   809a4:	429a      	cmp	r2, r3
   809a6:	d1ee      	bne.n	80986 <emac_dev_read+0x56>
   809a8:	e070      	b.n	80a8c <emac_dev_read+0x15c>
			/* Start to gather buffers in a frame */
			c_is_frame = 1;
		}

		/* Increment the pointer */
		circ_inc(&us_tmp_idx, p_emac_dev->us_rx_list_size);
   809aa:	f10d 000e 	add.w	r0, sp, #14
   809ae:	8c21      	ldrh	r1, [r4, #32]
   809b0:	47b0      	blx	r6

		/* Copy data in the frame buffer */
		if (c_is_frame) {
   809b2:	2f00      	cmp	r7, #0
   809b4:	d052      	beq.n	80a5c <emac_dev_read+0x12c>
			if (us_tmp_idx == p_emac_dev->us_rx_idx) {
   809b6:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   809b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   809bc:	429a      	cmp	r2, r3
   809be:	d114      	bne.n	809ea <emac_dev_read+0xba>
				do {
					p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   809c0:	f104 0622 	add.w	r6, r4, #34	; 0x22
   809c4:	4d38      	ldr	r5, [pc, #224]	; (80aa8 <emac_dev_read+0x178>)

		/* Copy data in the frame buffer */
		if (c_is_frame) {
			if (us_tmp_idx == p_emac_dev->us_rx_idx) {
				do {
					p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
   809c6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   809c8:	68e2      	ldr	r2, [r4, #12]
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
   809ca:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
   809ce:	f023 0301 	bic.w	r3, r3, #1
   809d2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   809d6:	4630      	mov	r0, r6
   809d8:	8c21      	ldrh	r1, [r4, #32]
   809da:	47a8      	blx	r5
							
				} while (us_tmp_idx != p_emac_dev->us_rx_idx);
   809dc:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   809de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   809e2:	429a      	cmp	r2, r3
   809e4:	d1ef      	bne.n	809c6 <emac_dev_read+0x96>

				return EMAC_RX_NULL;
   809e6:	2003      	movs	r0, #3
   809e8:	e05a      	b.n	80aa0 <emac_dev_read+0x170>
			}
			/* Copy the buffer into the application frame */
			us_buffer_length = EMAC_RX_UNITSIZE;
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
   809ea:	f108 0380 	add.w	r3, r8, #128	; 0x80
   809ee:	455b      	cmp	r3, fp
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
   809f0:	bf86      	itte	hi
   809f2:	ebc8 0a0b 	rsbhi	sl, r8, fp
   809f6:	fa1f fa8a 	uxthhi.w	sl, sl
				} while (us_tmp_idx != p_emac_dev->us_rx_idx);

				return EMAC_RX_NULL;
			}
			/* Copy the buffer into the application frame */
			us_buffer_length = EMAC_RX_UNITSIZE;
   809fa:	f04f 0a80 	movls.w	sl, #128	; 0x80
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
			}

			memcpy(p_tmp_frame,
					(void *)(p_rx_td->addr.val & EMAC_RXD_ADDR_MASK),
   809fe:	6829      	ldr	r1, [r5, #0]
			us_buffer_length = EMAC_RX_UNITSIZE;
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
			}

			memcpy(p_tmp_frame,
   80a00:	4648      	mov	r0, r9
   80a02:	f021 0103 	bic.w	r1, r1, #3
   80a06:	4652      	mov	r2, sl
   80a08:	4b28      	ldr	r3, [pc, #160]	; (80aac <emac_dev_read+0x17c>)
   80a0a:	4798      	blx	r3
					(void *)(p_rx_td->addr.val & EMAC_RXD_ADDR_MASK),
					us_buffer_length);
			p_tmp_frame += us_buffer_length;
   80a0c:	44d1      	add	r9, sl
			tmp_ul_frame_size += us_buffer_length;
   80a0e:	44d0      	add	r8, sl

			/* An end of frame has been received, return the data */
			if ((p_rx_td->status.val & EMAC_RXD_EOF) == EMAC_RXD_EOF) {
   80a10:	686b      	ldr	r3, [r5, #4]
   80a12:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   80a16:	d028      	beq.n	80a6a <emac_dev_read+0x13a>
				/* Frame size from the EMAC */
				*p_rcv_size = (p_rx_td->status.val & EMAC_RXD_LEN_MASK);
   80a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
   80a1c:	9a01      	ldr	r2, [sp, #4]
   80a1e:	6013      	str	r3, [r2, #0]

				/* All data have been copied in the application frame buffer => release TD */
				while (p_emac_dev->us_rx_idx != us_tmp_idx) {
   80a20:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   80a22:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   80a26:	429a      	cmp	r2, r3
   80a28:	d011      	beq.n	80a4e <emac_dev_read+0x11e>
					p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   80a2a:	f104 0622 	add.w	r6, r4, #34	; 0x22
   80a2e:	4d1e      	ldr	r5, [pc, #120]	; (80aa8 <emac_dev_read+0x178>)
				/* Frame size from the EMAC */
				*p_rcv_size = (p_rx_td->status.val & EMAC_RXD_LEN_MASK);

				/* All data have been copied in the application frame buffer => release TD */
				while (p_emac_dev->us_rx_idx != us_tmp_idx) {
					p_rx_td = &p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
   80a30:	68e1      	ldr	r1, [r4, #12]
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
   80a32:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
   80a36:	f022 0201 	bic.w	r2, r2, #1
   80a3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
   80a3e:	4630      	mov	r0, r6
   80a40:	8c21      	ldrh	r1, [r4, #32]
   80a42:	47a8      	blx	r5
			if ((p_rx_td->status.val & EMAC_RXD_EOF) == EMAC_RXD_EOF) {
				/* Frame size from the EMAC */
				*p_rcv_size = (p_rx_td->status.val & EMAC_RXD_LEN_MASK);

				/* All data have been copied in the application frame buffer => release TD */
				while (p_emac_dev->us_rx_idx != us_tmp_idx) {
   80a44:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   80a46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   80a4a:	429a      	cmp	r2, r3
   80a4c:	d1f0      	bne.n	80a30 <emac_dev_read+0x100>
					p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
					circ_inc(&p_emac_dev->us_rx_idx, p_emac_dev->us_rx_list_size);
				}

				/* Application frame buffer is too small so that all data have not been copied */
				if (tmp_ul_frame_size < *p_rcv_size) {
   80a4e:	9b01      	ldr	r3, [sp, #4]
   80a50:	6818      	ldr	r0, [r3, #0]
					return EMAC_SIZE_TOO_SMALL;
				}

				return EMAC_OK;
   80a52:	4540      	cmp	r0, r8
   80a54:	bf8c      	ite	hi
   80a56:	2004      	movhi	r0, #4
   80a58:	2000      	movls	r0, #0
   80a5a:	e021      	b.n	80aa0 <emac_dev_read+0x170>
			}
		}
		/* SOF has not been detected, skip the fragment */
		else {
			p_rx_td->addr.val &= ~(EMAC_RXD_OWNERSHIP);
   80a5c:	682b      	ldr	r3, [r5, #0]
   80a5e:	f023 0301 	bic.w	r3, r3, #1
   80a62:	602b      	str	r3, [r5, #0]
			p_emac_dev->us_rx_idx = us_tmp_idx;
   80a64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   80a68:	8463      	strh	r3, [r4, #34]	; 0x22
		}

		/* Process the next buffer */
		p_rx_td = &p_emac_dev->p_rx_dscr[us_tmp_idx];
   80a6a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   80a6e:	68e3      	ldr	r3, [r4, #12]
   80a70:	eb03 05c2 	add.w	r5, r3, r2, lsl #3

	/* Set the default return value */
	*p_rcv_size = 0;

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & EMAC_RXD_OWNERSHIP) == EMAC_RXD_OWNERSHIP) {
   80a74:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   80a78:	f013 0f01 	tst.w	r3, #1
   80a7c:	f47f af77 	bne.w	8096e <emac_dev_read+0x3e>

		/* Process the next buffer */
		p_rx_td = &p_emac_dev->p_rx_dscr[us_tmp_idx];
	}

	return EMAC_RX_NULL;
   80a80:	2003      	movs	r0, #3
   80a82:	e00d      	b.n	80aa0 <emac_dev_read+0x170>
	emac_rx_descriptor_t *p_rx_td =
			&p_emac_dev->p_rx_dscr[p_emac_dev->us_rx_idx];
	int8_t c_is_frame = 0;

	if (p_frame == NULL)
		return EMAC_PARAM;
   80a84:	2005      	movs	r0, #5
   80a86:	e00b      	b.n	80aa0 <emac_dev_read+0x170>

		/* Process the next buffer */
		p_rx_td = &p_emac_dev->p_rx_dscr[us_tmp_idx];
	}

	return EMAC_RX_NULL;
   80a88:	2003      	movs	r0, #3
   80a8a:	e009      	b.n	80aa0 <emac_dev_read+0x170>
			/* Start to gather buffers in a frame */
			c_is_frame = 1;
		}

		/* Increment the pointer */
		circ_inc(&us_tmp_idx, p_emac_dev->us_rx_list_size);
   80a8c:	f10d 000e 	add.w	r0, sp, #14
   80a90:	8c21      	ldrh	r1, [r4, #32]
   80a92:	47b0      	blx	r6
   80a94:	f8dd 9000 	ldr.w	r9, [sp]
   80a98:	2701      	movs	r7, #1
   80a9a:	f04f 0800 	mov.w	r8, #0
   80a9e:	e78a      	b.n	809b6 <emac_dev_read+0x86>
		/* Process the next buffer */
		p_rx_td = &p_emac_dev->p_rx_dscr[us_tmp_idx];
	}

	return EMAC_RX_NULL;
}
   80aa0:	b005      	add	sp, #20
   80aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80aa6:	bf00      	nop
   80aa8:	000806d5 	.word	0x000806d5
   80aac:	00081a91 	.word	0x00081a91

00080ab0 <emac_dev_write>:
 *
 * \return Length sent.
 */
uint32_t emac_dev_write(emac_device_t* p_emac_dev, void *p_buffer,
		uint32_t ul_size, emac_dev_tx_cb_t func_tx_cb)
{
   80ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	volatile emac_tx_descriptor_t *p_tx_td;
	volatile emac_dev_tx_cb_t *p_func_tx_cb;

	Emac *p_hw = p_emac_dev->p_hw;
   80ab4:	6805      	ldr	r5, [r0, #0]


	/* Check parameter */
	if (ul_size > EMAC_TX_UNITSIZE) {
   80ab6:	f240 54ee 	movw	r4, #1518	; 0x5ee
   80aba:	42a2      	cmp	r2, r4
   80abc:	d833      	bhi.n	80b26 <emac_dev_write+0x76>
		return EMAC_PARAM;
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_emac_dev->p_tx_dscr[p_emac_dev->us_tx_head];
   80abe:	f8d0 e010 	ldr.w	lr, [r0, #16]
   80ac2:	8cc6      	ldrh	r6, [r0, #38]	; 0x26

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
	if (CIRC_SPACE(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
   80ac4:	8d07      	ldrh	r7, [r0, #40]	; 0x28
   80ac6:	43f4      	mvns	r4, r6
   80ac8:	443c      	add	r4, r7
   80aca:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   80acc:	fb94 fcf7 	sdiv	ip, r4, r7
   80ad0:	fb07 441c 	mls	r4, r7, ip, r4
   80ad4:	b354      	cbz	r4, 80b2c <emac_dev_write+0x7c>
   80ad6:	461f      	mov	r7, r3
   80ad8:	4690      	mov	r8, r2
   80ada:	4604      	mov	r4, r0
	if (ul_size > EMAC_TX_UNITSIZE) {
		return EMAC_PARAM;
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_emac_dev->p_tx_dscr[p_emac_dev->us_tx_head];
   80adc:	eb0e 09c6 	add.w	r9, lr, r6, lsl #3
					p_emac_dev->us_tx_list_size) == 0) {
		return EMAC_TX_BUSY;
	}

	/* Pointers to the current Tx callback */
	p_func_tx_cb = &p_emac_dev->func_tx_cb_list[p_emac_dev->us_tx_head];
   80ae0:	f8d0 a01c 	ldr.w	sl, [r0, #28]

	/* Set up/copy data to transmission buffer */
	if (p_buffer && ul_size) {
   80ae4:	b121      	cbz	r1, 80af0 <emac_dev_write+0x40>
   80ae6:	b11a      	cbz	r2, 80af0 <emac_dev_write+0x40>
		/* Driver manages the ring buffer */
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
   80ae8:	f85e 0036 	ldr.w	r0, [lr, r6, lsl #3]
   80aec:	4b11      	ldr	r3, [pc, #68]	; (80b34 <emac_dev_write+0x84>)
   80aee:	4798      	blx	r3
	}

	/* Tx callback */
	*p_func_tx_cb = func_tx_cb;
   80af0:	f84a 7026 	str.w	r7, [sl, r6, lsl #2]

	/* Update transmit descriptor status */

	/* The buffer size defined is the length of ethernet frame,
	   so it's always the last buffer of the frame. */
	if (p_emac_dev->us_tx_head == p_emac_dev->us_tx_list_size - 1) {
   80af4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   80af6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   80af8:	3b01      	subs	r3, #1
   80afa:	429a      	cmp	r2, r3
		p_tx_td->status.val =
				(ul_size & EMAC_TXD_LEN_MASK) | EMAC_TXD_LAST
   80afc:	f3c8 020a 	ubfx	r2, r8, #0, #11
				| EMAC_TXD_WRAP;
   80b00:	bf08      	it	eq
   80b02:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
	} else {
		p_tx_td->status.val =
				(ul_size & EMAC_TXD_LEN_MASK) | EMAC_TXD_LAST;
   80b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
	if (p_emac_dev->us_tx_head == p_emac_dev->us_tx_list_size - 1) {
		p_tx_td->status.val =
				(ul_size & EMAC_TXD_LEN_MASK) | EMAC_TXD_LAST
				| EMAC_TXD_WRAP;
	} else {
		p_tx_td->status.val =
   80b0a:	f8c9 2004 	str.w	r2, [r9, #4]
				(ul_size & EMAC_TXD_LEN_MASK) | EMAC_TXD_LAST;
	}

	circ_inc(&p_emac_dev->us_tx_head, p_emac_dev->us_tx_list_size);
   80b0e:	f104 0026 	add.w	r0, r4, #38	; 0x26
   80b12:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   80b14:	4b08      	ldr	r3, [pc, #32]	; (80b38 <emac_dev_write+0x88>)
   80b16:	4798      	blx	r3
 *
 * \param p_emac   Pointer to the EMAC instance.
 */
static inline void emac_start_transmission(Emac* p_emac)
{
	p_emac->EMAC_NCR |= EMAC_NCR_TSTART;
   80b18:	682b      	ldr	r3, [r5, #0]
   80b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80b1e:	602b      	str	r3, [r5, #0]

	/* Now start to transmit if it is still not done */
	emac_start_transmission(p_hw);

	return EMAC_OK;
   80b20:	2000      	movs	r0, #0
   80b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Emac *p_hw = p_emac_dev->p_hw;


	/* Check parameter */
	if (ul_size > EMAC_TX_UNITSIZE) {
		return EMAC_PARAM;
   80b26:	2005      	movs	r0, #5
   80b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	p_tx_td = &p_emac_dev->p_tx_dscr[p_emac_dev->us_tx_head];

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
	if (CIRC_SPACE(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
					p_emac_dev->us_tx_list_size) == 0) {
		return EMAC_TX_BUSY;
   80b2c:	2002      	movs	r0, #2

	/* Now start to transmit if it is still not done */
	emac_start_transmission(p_hw);

	return EMAC_OK;
}
   80b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80b32:	bf00      	nop
   80b34:	00081a91 	.word	0x00081a91
   80b38:	000806d5 	.word	0x000806d5

00080b3c <emac_handler>:
 * \brief EMAC Interrupt handler.
 *
 * \param p_emac_dev   Pointer to EMAC device instance.
 */
void emac_handler(emac_device_t* p_emac_dev)
{
   80b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b40:	b084      	sub	sp, #16
   80b42:	4604      	mov	r4, r0
	Emac *p_hw = p_emac_dev->p_hw;
   80b44:	6807      	ldr	r7, [r0, #0]
 *
 * \return Interrupt status.
 */
static inline uint32_t emac_get_interrupt_status(Emac* p_emac)
{
	return p_emac->EMAC_ISR;
   80b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	volatile uint32_t ul_rsr;
	volatile uint32_t ul_tsr;
	uint32_t ul_rx_status_flag;
	uint32_t ul_tx_status_flag;

	ul_isr = emac_get_interrupt_status(p_hw);
   80b48:	9303      	str	r3, [sp, #12]
 *
 * \param p_emac   Pointer to the EMAC instance.
 */
static inline uint32_t emac_get_rx_status(Emac* p_emac)
{
	return p_emac->EMAC_RSR;
   80b4a:	6a3b      	ldr	r3, [r7, #32]
	ul_rsr = emac_get_rx_status(p_hw);
   80b4c:	9302      	str	r3, [sp, #8]
 *
 * \return  Transmit status.
 */
static inline uint32_t emac_get_tx_status(Emac* p_emac)
{
	return p_emac->EMAC_TSR;
   80b4e:	697b      	ldr	r3, [r7, #20]
	ul_tsr = emac_get_tx_status(p_hw);
   80b50:	9301      	str	r3, [sp, #4]
 *
 * \return Interrupt mask.
 */
static inline uint32_t emac_get_interrupt_mask(Emac* p_emac)
{
	return p_emac->EMAC_IMR;
   80b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30

	ul_isr &= ~(emac_get_interrupt_mask(p_hw) | 0xFFC300);
   80b54:	9a03      	ldr	r2, [sp, #12]
   80b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
   80b5a:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
   80b5e:	ea22 0303 	bic.w	r3, r2, r3
   80b62:	9303      	str	r3, [sp, #12]

	/* RX packet */
	if ((ul_isr & EMAC_ISR_RCOMP) || (ul_rsr & EMAC_RSR_REC)) {
   80b64:	9b03      	ldr	r3, [sp, #12]
   80b66:	f013 0f02 	tst.w	r3, #2
   80b6a:	d103      	bne.n	80b74 <emac_handler+0x38>
   80b6c:	9b02      	ldr	r3, [sp, #8]
   80b6e:	f013 0f02 	tst.w	r3, #2
   80b72:	d010      	beq.n	80b96 <emac_handler+0x5a>
		ul_rx_status_flag = EMAC_RSR_REC;

		/* Check OVR */
		if (ul_rsr & EMAC_RSR_OVR) {
   80b74:	9b02      	ldr	r3, [sp, #8]
   80b76:	f003 0304 	and.w	r3, r3, #4
			ul_rx_status_flag |= EMAC_RSR_OVR;
   80b7a:	2b00      	cmp	r3, #0
   80b7c:	bf0c      	ite	eq
   80b7e:	2002      	moveq	r0, #2
   80b80:	2006      	movne	r0, #6
		}
		/* Check BNA */
		if (ul_rsr & EMAC_RSR_BNA) {
   80b82:	9b02      	ldr	r3, [sp, #8]
   80b84:	f013 0f01 	tst.w	r3, #1
			ul_rx_status_flag |= EMAC_RSR_BNA;
   80b88:	bf18      	it	ne
   80b8a:	f040 0001 	orrne.w	r0, r0, #1
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_status   Receive status.
 */
static inline void emac_clear_rx_status(Emac* p_emac, uint32_t ul_status)
{
	p_emac->EMAC_RSR = ul_status;
   80b8e:	6238      	str	r0, [r7, #32]
		}
		/* Clear status */
		emac_clear_rx_status(p_hw, ul_rx_status_flag);

		/* Invoke callbacks */
		if (p_emac_dev->func_rx_cb) {
   80b90:	6963      	ldr	r3, [r4, #20]
   80b92:	b103      	cbz	r3, 80b96 <emac_handler+0x5a>
			p_emac_dev->func_rx_cb(ul_rx_status_flag);
   80b94:	4798      	blx	r3
		}
	}

	/* TX packet */
	if ((ul_isr & EMAC_ISR_TCOMP) || (ul_tsr & EMAC_TSR_COMP)) {
   80b96:	9b03      	ldr	r3, [sp, #12]
   80b98:	f013 0f80 	tst.w	r3, #128	; 0x80
   80b9c:	d103      	bne.n	80ba6 <emac_handler+0x6a>
   80b9e:	9b01      	ldr	r3, [sp, #4]
   80ba0:	f013 0f20 	tst.w	r3, #32
   80ba4:	d067      	beq.n	80c76 <emac_handler+0x13a>
		ul_tx_status_flag = EMAC_TSR_COMP;

		/* A frame transmitted */

		/* Check RLE */
		if (ul_tsr & EMAC_TSR_RLES) {
   80ba6:	9b01      	ldr	r3, [sp, #4]
   80ba8:	f013 0f04 	tst.w	r3, #4
   80bac:	d014      	beq.n	80bd8 <emac_handler+0x9c>
			/* Status RLE & Number of discarded buffers */
			ul_tx_status_flag = EMAC_TSR_RLES | CIRC_CNT(p_emac_dev->us_tx_head,
   80bae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   80bb0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   80bb2:	1a5b      	subs	r3, r3, r1
   80bb4:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
   80bb6:	fb93 f2f5 	sdiv	r2, r3, r5
   80bba:	fb05 3512 	mls	r5, r5, r2, r3
   80bbe:	f045 0504 	orr.w	r5, r5, #4
					p_emac_dev->us_tx_tail, p_emac_dev->us_tx_list_size);
			p_tx_cb = &p_emac_dev->func_tx_cb_list[p_emac_dev->us_tx_tail];
   80bc2:	69e6      	ldr	r6, [r4, #28]
   80bc4:	eb06 0681 	add.w	r6, r6, r1, lsl #2
			emac_reset_tx_mem(p_emac_dev);
   80bc8:	4620      	mov	r0, r4
   80bca:	4b2c      	ldr	r3, [pc, #176]	; (80c7c <emac_handler+0x140>)
   80bcc:	4798      	blx	r3
 * \param uc_enable   0 to disable EMAC transmit, else to enable it.
 */
static inline void emac_enable_transmit(Emac* p_emac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_emac->EMAC_NCR |= EMAC_NCR_TE;
   80bce:	683b      	ldr	r3, [r7, #0]
   80bd0:	f043 0308 	orr.w	r3, r3, #8
   80bd4:	603b      	str	r3, [r7, #0]
   80bd6:	e000      	b.n	80bda <emac_handler+0x9e>
	}

	/* TX packet */
	if ((ul_isr & EMAC_ISR_TCOMP) || (ul_tsr & EMAC_TSR_COMP)) {

		ul_tx_status_flag = EMAC_TSR_COMP;
   80bd8:	2520      	movs	r5, #32
			p_tx_cb = &p_emac_dev->func_tx_cb_list[p_emac_dev->us_tx_tail];
			emac_reset_tx_mem(p_emac_dev);
			emac_enable_transmit(p_hw, 1);
		}
		/* Check COL */
		if (ul_tsr & EMAC_TSR_COL) {
   80bda:	9b01      	ldr	r3, [sp, #4]
   80bdc:	f013 0f02 	tst.w	r3, #2
			ul_tx_status_flag |= EMAC_TSR_COL;
   80be0:	bf18      	it	ne
   80be2:	f045 0502 	orrne.w	r5, r5, #2
		}
		/* Check BEX */
		if (ul_tsr & EMAC_TSR_BEX) {
   80be6:	9b01      	ldr	r3, [sp, #4]
   80be8:	f013 0f10 	tst.w	r3, #16
			ul_tx_status_flag |= EMAC_TSR_BEX;
   80bec:	bf18      	it	ne
   80bee:	f045 0510 	orrne.w	r5, r5, #16
		}
		/* Check UND */
		if (ul_tsr & EMAC_TSR_UND) {
   80bf2:	9b01      	ldr	r3, [sp, #4]
   80bf4:	f013 0f40 	tst.w	r3, #64	; 0x40
			ul_tx_status_flag |= EMAC_TSR_UND;
   80bf8:	bf18      	it	ne
   80bfa:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 * \param p_emac   Pointer to the EMAC instance.
 * \param ul_status   Transmit status.
 */
static inline void emac_clear_tx_status(Emac* p_emac, uint32_t ul_status)
{
	p_emac->EMAC_TSR = ul_status;
   80bfe:	617d      	str	r5, [r7, #20]
		}
		/* Clear status */
		emac_clear_tx_status(p_hw, ul_tx_status_flag);

		if (!CIRC_EMPTY(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail)) {
   80c00:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   80c02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   80c04:	429a      	cmp	r2, r3
   80c06:	d01e      	beq.n	80c46 <emac_handler+0x10a>
				/* Notify upper layer that a packet has been sent */
				if (*p_tx_cb) {
					(*p_tx_cb) (ul_tx_status_flag);
				}

				circ_inc(&p_emac_dev->us_tx_tail, p_emac_dev->us_tx_list_size);
   80c08:	f104 0828 	add.w	r8, r4, #40	; 0x28
   80c0c:	4f1c      	ldr	r7, [pc, #112]	; (80c80 <emac_handler+0x144>)
		emac_clear_tx_status(p_hw, ul_tx_status_flag);

		if (!CIRC_EMPTY(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail)) {
			/* Check the buffers */
			do {
				p_tx_td = &p_emac_dev->p_tx_dscr[p_emac_dev->us_tx_tail];
   80c0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				p_tx_cb = &p_emac_dev->func_tx_cb_list[p_emac_dev->us_tx_tail];
   80c10:	69e1      	ldr	r1, [r4, #28]
   80c12:	eb01 0682 	add.w	r6, r1, r2, lsl #2
				/* Any error? Exit if buffer has not been sent yet */
				if ((p_tx_td->status.val & EMAC_TXD_USED) == 0) {
   80c16:	6923      	ldr	r3, [r4, #16]
   80c18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   80c1c:	685b      	ldr	r3, [r3, #4]
   80c1e:	2b00      	cmp	r3, #0
   80c20:	da11      	bge.n	80c46 <emac_handler+0x10a>
					break;
				}

				/* Notify upper layer that a packet has been sent */
				if (*p_tx_cb) {
   80c22:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   80c26:	b10b      	cbz	r3, 80c2c <emac_handler+0xf0>
					(*p_tx_cb) (ul_tx_status_flag);
   80c28:	4628      	mov	r0, r5
   80c2a:	4798      	blx	r3
				}

				circ_inc(&p_emac_dev->us_tx_tail, p_emac_dev->us_tx_list_size);
   80c2c:	4640      	mov	r0, r8
   80c2e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   80c30:	47b8      	blx	r7
			} while (CIRC_CNT(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
   80c32:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   80c34:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   80c36:	1a9b      	subs	r3, r3, r2
   80c38:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   80c3a:	fb93 f2f1 	sdiv	r2, r3, r1
   80c3e:	fb01 3312 	mls	r3, r1, r2, r3
   80c42:	2b00      	cmp	r3, #0
   80c44:	d1e3      	bne.n	80c0e <emac_handler+0xd2>
							p_emac_dev->us_tx_list_size));
		}

		if (ul_tsr & EMAC_TSR_RLES) {
   80c46:	9b01      	ldr	r3, [sp, #4]
   80c48:	f013 0f04 	tst.w	r3, #4
   80c4c:	d003      	beq.n	80c56 <emac_handler+0x11a>
			/* Notify upper layer RLE */
			if (*p_tx_cb) {
   80c4e:	6833      	ldr	r3, [r6, #0]
   80c50:	b10b      	cbz	r3, 80c56 <emac_handler+0x11a>
				(*p_tx_cb) (ul_tx_status_flag);
   80c52:	4628      	mov	r0, r5
   80c54:	4798      	blx	r3
			}
		}

		/* If a wakeup has been scheduled, notify upper layer that it can
		   send other packets, and the sending will be successful. */
		if ((CIRC_SPACE(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
   80c56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   80c58:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   80c5a:	43db      	mvns	r3, r3
   80c5c:	4413      	add	r3, r2
   80c5e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   80c60:	fb93 f2f1 	sdiv	r2, r3, r1
   80c64:	fb01 3312 	mls	r3, r1, r2, r3
				p_emac_dev->us_tx_list_size) >= p_emac_dev->uc_wakeup_threshold)
   80c68:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
			}
		}

		/* If a wakeup has been scheduled, notify upper layer that it can
		   send other packets, and the sending will be successful. */
		if ((CIRC_SPACE(p_emac_dev->us_tx_head, p_emac_dev->us_tx_tail,
   80c6c:	4293      	cmp	r3, r2
   80c6e:	db02      	blt.n	80c76 <emac_handler+0x13a>
				p_emac_dev->us_tx_list_size) >= p_emac_dev->uc_wakeup_threshold)
				&& p_emac_dev->func_wakeup_cb) {
   80c70:	69a3      	ldr	r3, [r4, #24]
   80c72:	b103      	cbz	r3, 80c76 <emac_handler+0x13a>
			p_emac_dev->func_wakeup_cb();
   80c74:	4798      	blx	r3
		}
	}
}
   80c76:	b004      	add	sp, #16
   80c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c7c:	000806e5 	.word	0x000806e5
   80c80:	000806d5 	.word	0x000806d5

00080c84 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80c84:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80c86:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80c8a:	d016      	beq.n	80cba <pio_set_peripheral+0x36>
   80c8c:	d804      	bhi.n	80c98 <pio_set_peripheral+0x14>
   80c8e:	b1c1      	cbz	r1, 80cc2 <pio_set_peripheral+0x3e>
   80c90:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80c94:	d00a      	beq.n	80cac <pio_set_peripheral+0x28>
   80c96:	e013      	b.n	80cc0 <pio_set_peripheral+0x3c>
   80c98:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80c9c:	d011      	beq.n	80cc2 <pio_set_peripheral+0x3e>
   80c9e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80ca2:	d00e      	beq.n	80cc2 <pio_set_peripheral+0x3e>
   80ca4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80ca8:	d10a      	bne.n	80cc0 <pio_set_peripheral+0x3c>
   80caa:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80cac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80cae:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80cb0:	400b      	ands	r3, r1
   80cb2:	ea23 0302 	bic.w	r3, r3, r2
   80cb6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80cb8:	e002      	b.n	80cc0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80cba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80cbc:	4313      	orrs	r3, r2
   80cbe:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80cc0:	6042      	str	r2, [r0, #4]
   80cc2:	4770      	bx	lr

00080cc4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80cc4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80cc6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80cca:	bf14      	ite	ne
   80ccc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80cce:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80cd0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80cd4:	bf14      	ite	ne
   80cd6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80cd8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80cda:	f012 0f02 	tst.w	r2, #2
   80cde:	d002      	beq.n	80ce6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80ce0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80ce4:	e004      	b.n	80cf0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80ce6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80cea:	bf18      	it	ne
   80cec:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80cf0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80cf2:	6001      	str	r1, [r0, #0]
   80cf4:	4770      	bx	lr
   80cf6:	bf00      	nop

00080cf8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80cf8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80cfa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80cfc:	9c01      	ldr	r4, [sp, #4]
   80cfe:	b10c      	cbz	r4, 80d04 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80d00:	6641      	str	r1, [r0, #100]	; 0x64
   80d02:	e000      	b.n	80d06 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80d04:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80d06:	b10b      	cbz	r3, 80d0c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80d08:	6501      	str	r1, [r0, #80]	; 0x50
   80d0a:	e000      	b.n	80d0e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80d0c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80d0e:	b10a      	cbz	r2, 80d14 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80d10:	6301      	str	r1, [r0, #48]	; 0x30
   80d12:	e000      	b.n	80d16 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80d14:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80d16:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80d18:	6001      	str	r1, [r0, #0]
}
   80d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
   80d1e:	4770      	bx	lr

00080d20 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80d20:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80d22:	4770      	bx	lr

00080d24 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80d24:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80d26:	4770      	bx	lr

00080d28 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80d28:	b570      	push	{r4, r5, r6, lr}
   80d2a:	b082      	sub	sp, #8
   80d2c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80d2e:	0943      	lsrs	r3, r0, #5
   80d30:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80d34:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80d38:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80d3a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80d3e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80d42:	d030      	beq.n	80da6 <pio_configure_pin+0x7e>
   80d44:	d806      	bhi.n	80d54 <pio_configure_pin+0x2c>
   80d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80d4a:	d00a      	beq.n	80d62 <pio_configure_pin+0x3a>
   80d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80d50:	d018      	beq.n	80d84 <pio_configure_pin+0x5c>
   80d52:	e049      	b.n	80de8 <pio_configure_pin+0xc0>
   80d54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80d58:	d030      	beq.n	80dbc <pio_configure_pin+0x94>
   80d5a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80d5e:	d02d      	beq.n	80dbc <pio_configure_pin+0x94>
   80d60:	e042      	b.n	80de8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80d62:	f000 001f 	and.w	r0, r0, #31
   80d66:	2601      	movs	r6, #1
   80d68:	4086      	lsls	r6, r0
   80d6a:	4620      	mov	r0, r4
   80d6c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d70:	4632      	mov	r2, r6
   80d72:	4b1f      	ldr	r3, [pc, #124]	; (80df0 <pio_configure_pin+0xc8>)
   80d74:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80d76:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80d7a:	bf14      	ite	ne
   80d7c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80d7e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80d80:	2001      	movs	r0, #1
   80d82:	e032      	b.n	80dea <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80d84:	f000 001f 	and.w	r0, r0, #31
   80d88:	2601      	movs	r6, #1
   80d8a:	4086      	lsls	r6, r0
   80d8c:	4620      	mov	r0, r4
   80d8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d92:	4632      	mov	r2, r6
   80d94:	4b16      	ldr	r3, [pc, #88]	; (80df0 <pio_configure_pin+0xc8>)
   80d96:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80d98:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80d9c:	bf14      	ite	ne
   80d9e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80da0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80da2:	2001      	movs	r0, #1
   80da4:	e021      	b.n	80dea <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80da6:	f000 031f 	and.w	r3, r0, #31
   80daa:	2601      	movs	r6, #1
   80dac:	4620      	mov	r0, r4
   80dae:	fa06 f103 	lsl.w	r1, r6, r3
   80db2:	462a      	mov	r2, r5
   80db4:	4b0f      	ldr	r3, [pc, #60]	; (80df4 <pio_configure_pin+0xcc>)
   80db6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80db8:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80dba:	e016      	b.n	80dea <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80dbc:	f000 031f 	and.w	r3, r0, #31
   80dc0:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80dc2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80dc6:	ea05 0106 	and.w	r1, r5, r6
   80dca:	9100      	str	r1, [sp, #0]
   80dcc:	4620      	mov	r0, r4
   80dce:	fa06 f103 	lsl.w	r1, r6, r3
   80dd2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80dd6:	bf14      	ite	ne
   80dd8:	2200      	movne	r2, #0
   80dda:	2201      	moveq	r2, #1
   80ddc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80de0:	4c05      	ldr	r4, [pc, #20]	; (80df8 <pio_configure_pin+0xd0>)
   80de2:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80de4:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80de6:	e000      	b.n	80dea <pio_configure_pin+0xc2>

	default:
		return 0;
   80de8:	2000      	movs	r0, #0
	}

	return 1;
}
   80dea:	b002      	add	sp, #8
   80dec:	bd70      	pop	{r4, r5, r6, pc}
   80dee:	bf00      	nop
   80df0:	00080c85 	.word	0x00080c85
   80df4:	00080cc5 	.word	0x00080cc5
   80df8:	00080cf9 	.word	0x00080cf9

00080dfc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80dfc:	b570      	push	{r4, r5, r6, lr}
   80dfe:	b082      	sub	sp, #8
   80e00:	4606      	mov	r6, r0
   80e02:	460d      	mov	r5, r1
   80e04:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80e06:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80e0a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80e0e:	d026      	beq.n	80e5e <pio_configure_pin_group+0x62>
   80e10:	d806      	bhi.n	80e20 <pio_configure_pin_group+0x24>
   80e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80e16:	d00a      	beq.n	80e2e <pio_configure_pin_group+0x32>
   80e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80e1c:	d013      	beq.n	80e46 <pio_configure_pin_group+0x4a>
   80e1e:	e034      	b.n	80e8a <pio_configure_pin_group+0x8e>
   80e20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80e24:	d01f      	beq.n	80e66 <pio_configure_pin_group+0x6a>
   80e26:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80e2a:	d01c      	beq.n	80e66 <pio_configure_pin_group+0x6a>
   80e2c:	e02d      	b.n	80e8a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80e2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e32:	462a      	mov	r2, r5
   80e34:	4b16      	ldr	r3, [pc, #88]	; (80e90 <pio_configure_pin_group+0x94>)
   80e36:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80e38:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80e3c:	bf14      	ite	ne
   80e3e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80e40:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80e42:	2001      	movs	r0, #1
   80e44:	e022      	b.n	80e8c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80e46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80e4a:	462a      	mov	r2, r5
   80e4c:	4b10      	ldr	r3, [pc, #64]	; (80e90 <pio_configure_pin_group+0x94>)
   80e4e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80e50:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80e54:	bf14      	ite	ne
   80e56:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80e58:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80e5a:	2001      	movs	r0, #1
   80e5c:	e016      	b.n	80e8c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80e5e:	4b0d      	ldr	r3, [pc, #52]	; (80e94 <pio_configure_pin_group+0x98>)
   80e60:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80e62:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80e64:	e012      	b.n	80e8c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80e66:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80e6a:	f004 0301 	and.w	r3, r4, #1
   80e6e:	9300      	str	r3, [sp, #0]
   80e70:	4630      	mov	r0, r6
   80e72:	4629      	mov	r1, r5
   80e74:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80e78:	bf14      	ite	ne
   80e7a:	2200      	movne	r2, #0
   80e7c:	2201      	moveq	r2, #1
   80e7e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80e82:	4c05      	ldr	r4, [pc, #20]	; (80e98 <pio_configure_pin_group+0x9c>)
   80e84:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80e86:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80e88:	e000      	b.n	80e8c <pio_configure_pin_group+0x90>

	default:
		return 0;
   80e8a:	2000      	movs	r0, #0
	}

	return 1;
}
   80e8c:	b002      	add	sp, #8
   80e8e:	bd70      	pop	{r4, r5, r6, pc}
   80e90:	00080c85 	.word	0x00080c85
   80e94:	00080cc5 	.word	0x00080cc5
   80e98:	00080cf9 	.word	0x00080cf9

00080e9c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ea0:	4604      	mov	r4, r0
   80ea2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80ea4:	4b0e      	ldr	r3, [pc, #56]	; (80ee0 <pio_handler_process+0x44>)
   80ea6:	4798      	blx	r3
   80ea8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80eaa:	4620      	mov	r0, r4
   80eac:	4b0d      	ldr	r3, [pc, #52]	; (80ee4 <pio_handler_process+0x48>)
   80eae:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80eb0:	4005      	ands	r5, r0
   80eb2:	d013      	beq.n	80edc <pio_handler_process+0x40>
   80eb4:	4c0c      	ldr	r4, [pc, #48]	; (80ee8 <pio_handler_process+0x4c>)
   80eb6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80eba:	6823      	ldr	r3, [r4, #0]
   80ebc:	4543      	cmp	r3, r8
   80ebe:	d108      	bne.n	80ed2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ec0:	6861      	ldr	r1, [r4, #4]
   80ec2:	4229      	tst	r1, r5
   80ec4:	d005      	beq.n	80ed2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80ec6:	68e3      	ldr	r3, [r4, #12]
   80ec8:	4640      	mov	r0, r8
   80eca:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80ecc:	6863      	ldr	r3, [r4, #4]
   80ece:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80ed2:	42b4      	cmp	r4, r6
   80ed4:	d002      	beq.n	80edc <pio_handler_process+0x40>
   80ed6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80ed8:	2d00      	cmp	r5, #0
   80eda:	d1ee      	bne.n	80eba <pio_handler_process+0x1e>
   80edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ee0:	00080d21 	.word	0x00080d21
   80ee4:	00080d25 	.word	0x00080d25
   80ee8:	20074208 	.word	0x20074208

00080eec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80eec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80eee:	4802      	ldr	r0, [pc, #8]	; (80ef8 <PIOA_Handler+0xc>)
   80ef0:	210b      	movs	r1, #11
   80ef2:	4b02      	ldr	r3, [pc, #8]	; (80efc <PIOA_Handler+0x10>)
   80ef4:	4798      	blx	r3
   80ef6:	bd08      	pop	{r3, pc}
   80ef8:	400e0e00 	.word	0x400e0e00
   80efc:	00080e9d 	.word	0x00080e9d

00080f00 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80f00:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80f02:	4802      	ldr	r0, [pc, #8]	; (80f0c <PIOB_Handler+0xc>)
   80f04:	210c      	movs	r1, #12
   80f06:	4b02      	ldr	r3, [pc, #8]	; (80f10 <PIOB_Handler+0x10>)
   80f08:	4798      	blx	r3
   80f0a:	bd08      	pop	{r3, pc}
   80f0c:	400e1000 	.word	0x400e1000
   80f10:	00080e9d 	.word	0x00080e9d

00080f14 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80f14:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80f16:	4802      	ldr	r0, [pc, #8]	; (80f20 <PIOC_Handler+0xc>)
   80f18:	210d      	movs	r1, #13
   80f1a:	4b02      	ldr	r3, [pc, #8]	; (80f24 <PIOC_Handler+0x10>)
   80f1c:	4798      	blx	r3
   80f1e:	bd08      	pop	{r3, pc}
   80f20:	400e1200 	.word	0x400e1200
   80f24:	00080e9d 	.word	0x00080e9d

00080f28 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80f28:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80f2a:	4802      	ldr	r0, [pc, #8]	; (80f34 <PIOD_Handler+0xc>)
   80f2c:	210e      	movs	r1, #14
   80f2e:	4b02      	ldr	r3, [pc, #8]	; (80f38 <PIOD_Handler+0x10>)
   80f30:	4798      	blx	r3
   80f32:	bd08      	pop	{r3, pc}
   80f34:	400e1400 	.word	0x400e1400
   80f38:	00080e9d 	.word	0x00080e9d

00080f3c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80f3c:	4a18      	ldr	r2, [pc, #96]	; (80fa0 <pmc_switch_mck_to_pllack+0x64>)
   80f3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80f44:	4318      	orrs	r0, r3
   80f46:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f48:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80f4a:	f013 0f08 	tst.w	r3, #8
   80f4e:	d003      	beq.n	80f58 <pmc_switch_mck_to_pllack+0x1c>
   80f50:	e009      	b.n	80f66 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80f52:	3b01      	subs	r3, #1
   80f54:	d103      	bne.n	80f5e <pmc_switch_mck_to_pllack+0x22>
   80f56:	e01e      	b.n	80f96 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80f5c:	4910      	ldr	r1, [pc, #64]	; (80fa0 <pmc_switch_mck_to_pllack+0x64>)
   80f5e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80f60:	f012 0f08 	tst.w	r2, #8
   80f64:	d0f5      	beq.n	80f52 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80f66:	4a0e      	ldr	r2, [pc, #56]	; (80fa0 <pmc_switch_mck_to_pllack+0x64>)
   80f68:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80f6a:	f023 0303 	bic.w	r3, r3, #3
   80f6e:	f043 0302 	orr.w	r3, r3, #2
   80f72:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f74:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80f76:	f010 0008 	ands.w	r0, r0, #8
   80f7a:	d004      	beq.n	80f86 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80f7c:	2000      	movs	r0, #0
   80f7e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80f80:	3b01      	subs	r3, #1
   80f82:	d103      	bne.n	80f8c <pmc_switch_mck_to_pllack+0x50>
   80f84:	e009      	b.n	80f9a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80f86:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80f8a:	4905      	ldr	r1, [pc, #20]	; (80fa0 <pmc_switch_mck_to_pllack+0x64>)
   80f8c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80f8e:	f012 0f08 	tst.w	r2, #8
   80f92:	d0f5      	beq.n	80f80 <pmc_switch_mck_to_pllack+0x44>
   80f94:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80f96:	2001      	movs	r0, #1
   80f98:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80f9a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80f9c:	4770      	bx	lr
   80f9e:	bf00      	nop
   80fa0:	400e0600 	.word	0x400e0600

00080fa4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80fa4:	b138      	cbz	r0, 80fb6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80fa6:	4911      	ldr	r1, [pc, #68]	; (80fec <pmc_switch_mainck_to_xtal+0x48>)
   80fa8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80faa:	4a11      	ldr	r2, [pc, #68]	; (80ff0 <pmc_switch_mainck_to_xtal+0x4c>)
   80fac:	401a      	ands	r2, r3
   80fae:	4b11      	ldr	r3, [pc, #68]	; (80ff4 <pmc_switch_mainck_to_xtal+0x50>)
   80fb0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80fb2:	620b      	str	r3, [r1, #32]
   80fb4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80fb6:	4a0d      	ldr	r2, [pc, #52]	; (80fec <pmc_switch_mainck_to_xtal+0x48>)
   80fb8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80fba:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80fbe:	f023 0303 	bic.w	r3, r3, #3
   80fc2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80fc6:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80fca:	0209      	lsls	r1, r1, #8
   80fcc:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80fce:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80fd0:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80fd2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80fd4:	f013 0f01 	tst.w	r3, #1
   80fd8:	d0fb      	beq.n	80fd2 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80fda:	4a04      	ldr	r2, [pc, #16]	; (80fec <pmc_switch_mainck_to_xtal+0x48>)
   80fdc:	6a13      	ldr	r3, [r2, #32]
   80fde:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80fe6:	6213      	str	r3, [r2, #32]
   80fe8:	4770      	bx	lr
   80fea:	bf00      	nop
   80fec:	400e0600 	.word	0x400e0600
   80ff0:	fec8fffc 	.word	0xfec8fffc
   80ff4:	01370002 	.word	0x01370002

00080ff8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80ff8:	4b02      	ldr	r3, [pc, #8]	; (81004 <pmc_osc_is_ready_mainck+0xc>)
   80ffa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80ffc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81000:	4770      	bx	lr
   81002:	bf00      	nop
   81004:	400e0600 	.word	0x400e0600

00081008 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81008:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8100c:	4b01      	ldr	r3, [pc, #4]	; (81014 <pmc_disable_pllack+0xc>)
   8100e:	629a      	str	r2, [r3, #40]	; 0x28
   81010:	4770      	bx	lr
   81012:	bf00      	nop
   81014:	400e0600 	.word	0x400e0600

00081018 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81018:	4b02      	ldr	r3, [pc, #8]	; (81024 <pmc_is_locked_pllack+0xc>)
   8101a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8101c:	f000 0002 	and.w	r0, r0, #2
   81020:	4770      	bx	lr
   81022:	bf00      	nop
   81024:	400e0600 	.word	0x400e0600

00081028 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81028:	282c      	cmp	r0, #44	; 0x2c
   8102a:	d81e      	bhi.n	8106a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8102c:	281f      	cmp	r0, #31
   8102e:	d80c      	bhi.n	8104a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81030:	4b11      	ldr	r3, [pc, #68]	; (81078 <pmc_enable_periph_clk+0x50>)
   81032:	699a      	ldr	r2, [r3, #24]
   81034:	2301      	movs	r3, #1
   81036:	4083      	lsls	r3, r0
   81038:	401a      	ands	r2, r3
   8103a:	4293      	cmp	r3, r2
   8103c:	d017      	beq.n	8106e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8103e:	2301      	movs	r3, #1
   81040:	4083      	lsls	r3, r0
   81042:	4a0d      	ldr	r2, [pc, #52]	; (81078 <pmc_enable_periph_clk+0x50>)
   81044:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81046:	2000      	movs	r0, #0
   81048:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8104a:	4b0b      	ldr	r3, [pc, #44]	; (81078 <pmc_enable_periph_clk+0x50>)
   8104c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   81050:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81052:	2301      	movs	r3, #1
   81054:	4083      	lsls	r3, r0
   81056:	401a      	ands	r2, r3
   81058:	4293      	cmp	r3, r2
   8105a:	d00a      	beq.n	81072 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8105c:	2301      	movs	r3, #1
   8105e:	4083      	lsls	r3, r0
   81060:	4a05      	ldr	r2, [pc, #20]	; (81078 <pmc_enable_periph_clk+0x50>)
   81062:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   81066:	2000      	movs	r0, #0
   81068:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8106a:	2001      	movs	r0, #1
   8106c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8106e:	2000      	movs	r0, #0
   81070:	4770      	bx	lr
   81072:	2000      	movs	r0, #0
}
   81074:	4770      	bx	lr
   81076:	bf00      	nop
   81078:	400e0600 	.word	0x400e0600

0008107c <rstc_set_external_reset>:
		const uint32_t ul_length)
{
	/* Validate the parameters. */
	Assert(p_rstc);
	
	uint32_t mode = p_rstc->RSTC_MR;
   8107c:	6883      	ldr	r3, [r0, #8]

	mode &= ~(RSTC_MR_ERSTL_Msk | RSTC_MR_KEY_Msk);
   8107e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   81082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   81086:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
	mode |= (RSTC_MR_ERSTL(ul_length) | RSTC_KEY);
   8108a:	0209      	lsls	r1, r1, #8
   8108c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   81090:	430b      	orrs	r3, r1

	p_rstc->RSTC_MR = mode;
   81092:	6083      	str	r3, [r0, #8]
   81094:	4770      	bx	lr
   81096:	bf00      	nop

00081098 <rstc_reset_extern>:
 * \param[out] p_rstc Module hardware register base address pointer
 */
void rstc_reset_extern(
		Rstc *p_rstc)
{
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_EXTRST;
   81098:	4b01      	ldr	r3, [pc, #4]	; (810a0 <rstc_reset_extern+0x8>)
   8109a:	6003      	str	r3, [r0, #0]
   8109c:	4770      	bx	lr
   8109e:	bf00      	nop
   810a0:	a5000008 	.word	0xa5000008

000810a4 <rstc_get_status>:
 * \return RSTC status.
 */
uint32_t rstc_get_status(
		Rstc *p_rstc)
{
	return p_rstc->RSTC_SR;
   810a4:	6840      	ldr	r0, [r0, #4]
}
   810a6:	4770      	bx	lr

000810a8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   810a8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   810aa:	23ac      	movs	r3, #172	; 0xac
   810ac:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   810ae:	680b      	ldr	r3, [r1, #0]
   810b0:	684a      	ldr	r2, [r1, #4]
   810b2:	fbb3 f3f2 	udiv	r3, r3, r2
   810b6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   810b8:	1e5c      	subs	r4, r3, #1
   810ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   810be:	4294      	cmp	r4, r2
   810c0:	d80a      	bhi.n	810d8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   810c2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   810c4:	688b      	ldr	r3, [r1, #8]
   810c6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   810c8:	f240 2302 	movw	r3, #514	; 0x202
   810cc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   810d0:	2350      	movs	r3, #80	; 0x50
   810d2:	6003      	str	r3, [r0, #0]

	return 0;
   810d4:	2000      	movs	r0, #0
   810d6:	e000      	b.n	810da <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   810d8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   810da:	f85d 4b04 	ldr.w	r4, [sp], #4
   810de:	4770      	bx	lr

000810e0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   810e0:	6943      	ldr	r3, [r0, #20]
   810e2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   810e6:	bf1a      	itte	ne
   810e8:	61c1      	strne	r1, [r0, #28]
	return 0;
   810ea:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   810ec:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   810ee:	4770      	bx	lr

000810f0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   810f0:	6943      	ldr	r3, [r0, #20]
   810f2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   810f6:	bf1d      	ittte	ne
   810f8:	6983      	ldrne	r3, [r0, #24]
   810fa:	700b      	strbne	r3, [r1, #0]
	return 0;
   810fc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   810fe:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81100:	4770      	bx	lr
   81102:	bf00      	nop

00081104 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81104:	6943      	ldr	r3, [r0, #20]
   81106:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8110a:	bf1d      	ittte	ne
   8110c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81110:	61c1      	strne	r1, [r0, #28]
	return 0;
   81112:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81114:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81116:	4770      	bx	lr

00081118 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81118:	6943      	ldr	r3, [r0, #20]
   8111a:	f013 0f01 	tst.w	r3, #1
   8111e:	d005      	beq.n	8112c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81120:	6983      	ldr	r3, [r0, #24]
   81122:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81126:	600b      	str	r3, [r1, #0]

	return 0;
   81128:	2000      	movs	r0, #0
   8112a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8112c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8112e:	4770      	bx	lr

00081130 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   81130:	e7fe      	b.n	81130 <Dummy_Handler>
   81132:	bf00      	nop

00081134 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81134:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81136:	4b1f      	ldr	r3, [pc, #124]	; (811b4 <Reset_Handler+0x80>)
   81138:	4a1f      	ldr	r2, [pc, #124]	; (811b8 <Reset_Handler+0x84>)
   8113a:	429a      	cmp	r2, r3
   8113c:	d003      	beq.n	81146 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8113e:	4b1f      	ldr	r3, [pc, #124]	; (811bc <Reset_Handler+0x88>)
   81140:	4a1c      	ldr	r2, [pc, #112]	; (811b4 <Reset_Handler+0x80>)
   81142:	429a      	cmp	r2, r3
   81144:	d304      	bcc.n	81150 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81146:	4b1e      	ldr	r3, [pc, #120]	; (811c0 <Reset_Handler+0x8c>)
   81148:	4a1e      	ldr	r2, [pc, #120]	; (811c4 <Reset_Handler+0x90>)
   8114a:	429a      	cmp	r2, r3
   8114c:	d310      	bcc.n	81170 <Reset_Handler+0x3c>
   8114e:	e01b      	b.n	81188 <Reset_Handler+0x54>
   81150:	4918      	ldr	r1, [pc, #96]	; (811b4 <Reset_Handler+0x80>)
   81152:	1d0a      	adds	r2, r1, #4
   81154:	4b1c      	ldr	r3, [pc, #112]	; (811c8 <Reset_Handler+0x94>)
   81156:	1a9b      	subs	r3, r3, r2
   81158:	f023 0303 	bic.w	r3, r3, #3
   8115c:	3304      	adds	r3, #4
   8115e:	4a16      	ldr	r2, [pc, #88]	; (811b8 <Reset_Handler+0x84>)
   81160:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   81162:	f852 0b04 	ldr.w	r0, [r2], #4
   81166:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8116a:	429a      	cmp	r2, r3
   8116c:	d1f9      	bne.n	81162 <Reset_Handler+0x2e>
   8116e:	e7ea      	b.n	81146 <Reset_Handler+0x12>
   81170:	4b16      	ldr	r3, [pc, #88]	; (811cc <Reset_Handler+0x98>)
   81172:	4a17      	ldr	r2, [pc, #92]	; (811d0 <Reset_Handler+0x9c>)
   81174:	1ad2      	subs	r2, r2, r3
   81176:	f022 0203 	bic.w	r2, r2, #3
   8117a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8117c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8117e:	2100      	movs	r1, #0
   81180:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81184:	4293      	cmp	r3, r2
   81186:	d1fb      	bne.n	81180 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81188:	4b12      	ldr	r3, [pc, #72]	; (811d4 <Reset_Handler+0xa0>)
   8118a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8118e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81192:	4911      	ldr	r1, [pc, #68]	; (811d8 <Reset_Handler+0xa4>)
   81194:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81196:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8119a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8119e:	d203      	bcs.n	811a8 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   811a0:	688b      	ldr	r3, [r1, #8]
   811a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   811a6:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   811a8:	4b0c      	ldr	r3, [pc, #48]	; (811dc <Reset_Handler+0xa8>)
   811aa:	4798      	blx	r3

	/* Branch to main function */
	main();
   811ac:	4b0c      	ldr	r3, [pc, #48]	; (811e0 <Reset_Handler+0xac>)
   811ae:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   811b0:	e7fe      	b.n	811b0 <Reset_Handler+0x7c>
   811b2:	bf00      	nop
   811b4:	20070000 	.word	0x20070000
   811b8:	00084d28 	.word	0x00084d28
   811bc:	20070994 	.word	0x20070994
   811c0:	200748ec 	.word	0x200748ec
   811c4:	20070998 	.word	0x20070998
   811c8:	20070997 	.word	0x20070997
   811cc:	2007099c 	.word	0x2007099c
   811d0:	200748ef 	.word	0x200748ef
   811d4:	00080000 	.word	0x00080000
   811d8:	e000ed00 	.word	0xe000ed00
   811dc:	00081a19 	.word	0x00081a19
   811e0:	000814a9 	.word	0x000814a9

000811e4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   811e4:	4b3e      	ldr	r3, [pc, #248]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   811e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   811e8:	f003 0303 	and.w	r3, r3, #3
   811ec:	2b03      	cmp	r3, #3
   811ee:	d85f      	bhi.n	812b0 <SystemCoreClockUpdate+0xcc>
   811f0:	e8df f003 	tbb	[pc, r3]
   811f4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   811f8:	4b3a      	ldr	r3, [pc, #232]	; (812e4 <SystemCoreClockUpdate+0x100>)
   811fa:	695b      	ldr	r3, [r3, #20]
   811fc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81200:	bf14      	ite	ne
   81202:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81206:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8120a:	4b37      	ldr	r3, [pc, #220]	; (812e8 <SystemCoreClockUpdate+0x104>)
   8120c:	601a      	str	r2, [r3, #0]
   8120e:	e04f      	b.n	812b0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81210:	4b33      	ldr	r3, [pc, #204]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   81212:	6a1b      	ldr	r3, [r3, #32]
   81214:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81218:	d003      	beq.n	81222 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8121a:	4a34      	ldr	r2, [pc, #208]	; (812ec <SystemCoreClockUpdate+0x108>)
   8121c:	4b32      	ldr	r3, [pc, #200]	; (812e8 <SystemCoreClockUpdate+0x104>)
   8121e:	601a      	str	r2, [r3, #0]
   81220:	e046      	b.n	812b0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81222:	4a33      	ldr	r2, [pc, #204]	; (812f0 <SystemCoreClockUpdate+0x10c>)
   81224:	4b30      	ldr	r3, [pc, #192]	; (812e8 <SystemCoreClockUpdate+0x104>)
   81226:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81228:	4b2d      	ldr	r3, [pc, #180]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   8122a:	6a1b      	ldr	r3, [r3, #32]
   8122c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81230:	2b10      	cmp	r3, #16
   81232:	d002      	beq.n	8123a <SystemCoreClockUpdate+0x56>
   81234:	2b20      	cmp	r3, #32
   81236:	d004      	beq.n	81242 <SystemCoreClockUpdate+0x5e>
   81238:	e03a      	b.n	812b0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8123a:	4a2e      	ldr	r2, [pc, #184]	; (812f4 <SystemCoreClockUpdate+0x110>)
   8123c:	4b2a      	ldr	r3, [pc, #168]	; (812e8 <SystemCoreClockUpdate+0x104>)
   8123e:	601a      	str	r2, [r3, #0]
				break;
   81240:	e036      	b.n	812b0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81242:	4a2a      	ldr	r2, [pc, #168]	; (812ec <SystemCoreClockUpdate+0x108>)
   81244:	4b28      	ldr	r3, [pc, #160]	; (812e8 <SystemCoreClockUpdate+0x104>)
   81246:	601a      	str	r2, [r3, #0]
				break;
   81248:	e032      	b.n	812b0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8124a:	4b25      	ldr	r3, [pc, #148]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   8124c:	6a1b      	ldr	r3, [r3, #32]
   8124e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81252:	d003      	beq.n	8125c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81254:	4a25      	ldr	r2, [pc, #148]	; (812ec <SystemCoreClockUpdate+0x108>)
   81256:	4b24      	ldr	r3, [pc, #144]	; (812e8 <SystemCoreClockUpdate+0x104>)
   81258:	601a      	str	r2, [r3, #0]
   8125a:	e012      	b.n	81282 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8125c:	4a24      	ldr	r2, [pc, #144]	; (812f0 <SystemCoreClockUpdate+0x10c>)
   8125e:	4b22      	ldr	r3, [pc, #136]	; (812e8 <SystemCoreClockUpdate+0x104>)
   81260:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81262:	4b1f      	ldr	r3, [pc, #124]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   81264:	6a1b      	ldr	r3, [r3, #32]
   81266:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8126a:	2b10      	cmp	r3, #16
   8126c:	d002      	beq.n	81274 <SystemCoreClockUpdate+0x90>
   8126e:	2b20      	cmp	r3, #32
   81270:	d004      	beq.n	8127c <SystemCoreClockUpdate+0x98>
   81272:	e006      	b.n	81282 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81274:	4a1f      	ldr	r2, [pc, #124]	; (812f4 <SystemCoreClockUpdate+0x110>)
   81276:	4b1c      	ldr	r3, [pc, #112]	; (812e8 <SystemCoreClockUpdate+0x104>)
   81278:	601a      	str	r2, [r3, #0]
				break;
   8127a:	e002      	b.n	81282 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8127c:	4a1b      	ldr	r2, [pc, #108]	; (812ec <SystemCoreClockUpdate+0x108>)
   8127e:	4b1a      	ldr	r3, [pc, #104]	; (812e8 <SystemCoreClockUpdate+0x104>)
   81280:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81282:	4b17      	ldr	r3, [pc, #92]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   81284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81286:	f003 0303 	and.w	r3, r3, #3
   8128a:	2b02      	cmp	r3, #2
   8128c:	d10d      	bne.n	812aa <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8128e:	4a14      	ldr	r2, [pc, #80]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   81290:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81292:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81294:	4814      	ldr	r0, [pc, #80]	; (812e8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81296:	f3c3 410a 	ubfx	r1, r3, #16, #11
   8129a:	6803      	ldr	r3, [r0, #0]
   8129c:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   812a0:	b2d2      	uxtb	r2, r2
   812a2:	fbb3 f3f2 	udiv	r3, r3, r2
   812a6:	6003      	str	r3, [r0, #0]
   812a8:	e002      	b.n	812b0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   812aa:	4a13      	ldr	r2, [pc, #76]	; (812f8 <SystemCoreClockUpdate+0x114>)
   812ac:	4b0e      	ldr	r3, [pc, #56]	; (812e8 <SystemCoreClockUpdate+0x104>)
   812ae:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   812b0:	4b0b      	ldr	r3, [pc, #44]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   812b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   812b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   812b8:	2b70      	cmp	r3, #112	; 0x70
   812ba:	d107      	bne.n	812cc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   812bc:	4a0a      	ldr	r2, [pc, #40]	; (812e8 <SystemCoreClockUpdate+0x104>)
   812be:	6813      	ldr	r3, [r2, #0]
   812c0:	490e      	ldr	r1, [pc, #56]	; (812fc <SystemCoreClockUpdate+0x118>)
   812c2:	fba1 1303 	umull	r1, r3, r1, r3
   812c6:	085b      	lsrs	r3, r3, #1
   812c8:	6013      	str	r3, [r2, #0]
   812ca:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   812cc:	4b04      	ldr	r3, [pc, #16]	; (812e0 <SystemCoreClockUpdate+0xfc>)
   812ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   812d0:	4905      	ldr	r1, [pc, #20]	; (812e8 <SystemCoreClockUpdate+0x104>)
   812d2:	f3c2 1202 	ubfx	r2, r2, #4, #3
   812d6:	680b      	ldr	r3, [r1, #0]
   812d8:	40d3      	lsrs	r3, r2
   812da:	600b      	str	r3, [r1, #0]
   812dc:	4770      	bx	lr
   812de:	bf00      	nop
   812e0:	400e0600 	.word	0x400e0600
   812e4:	400e1a10 	.word	0x400e1a10
   812e8:	2007012c 	.word	0x2007012c
   812ec:	00b71b00 	.word	0x00b71b00
   812f0:	003d0900 	.word	0x003d0900
   812f4:	007a1200 	.word	0x007a1200
   812f8:	0e4e1c00 	.word	0x0e4e1c00
   812fc:	aaaaaaab 	.word	0xaaaaaaab

00081300 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81300:	4b09      	ldr	r3, [pc, #36]	; (81328 <_sbrk+0x28>)
   81302:	681b      	ldr	r3, [r3, #0]
   81304:	b913      	cbnz	r3, 8130c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81306:	4a09      	ldr	r2, [pc, #36]	; (8132c <_sbrk+0x2c>)
   81308:	4b07      	ldr	r3, [pc, #28]	; (81328 <_sbrk+0x28>)
   8130a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8130c:	4b06      	ldr	r3, [pc, #24]	; (81328 <_sbrk+0x28>)
   8130e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81310:	181a      	adds	r2, r3, r0
   81312:	4907      	ldr	r1, [pc, #28]	; (81330 <_sbrk+0x30>)
   81314:	4291      	cmp	r1, r2
   81316:	db04      	blt.n	81322 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81318:	4610      	mov	r0, r2
   8131a:	4a03      	ldr	r2, [pc, #12]	; (81328 <_sbrk+0x28>)
   8131c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8131e:	4618      	mov	r0, r3
   81320:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81322:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81326:	4770      	bx	lr
   81328:	20074278 	.word	0x20074278
   8132c:	200768f0 	.word	0x200768f0
   81330:	20087ffc 	.word	0x20087ffc

00081334 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81334:	f04f 30ff 	mov.w	r0, #4294967295
   81338:	4770      	bx	lr
   8133a:	bf00      	nop

0008133c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8133c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81340:	604b      	str	r3, [r1, #4]

	return 0;
}
   81342:	2000      	movs	r0, #0
   81344:	4770      	bx	lr
   81346:	bf00      	nop

00081348 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81348:	2001      	movs	r0, #1
   8134a:	4770      	bx	lr

0008134c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8134c:	2000      	movs	r0, #0
   8134e:	4770      	bx	lr

00081350 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81350:	b5f0      	push	{r4, r5, r6, r7, lr}
   81352:	b083      	sub	sp, #12
   81354:	4604      	mov	r4, r0
   81356:	460d      	mov	r5, r1
	uint32_t val = 0;
   81358:	2300      	movs	r3, #0
   8135a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8135c:	4b1f      	ldr	r3, [pc, #124]	; (813dc <usart_serial_getchar+0x8c>)
   8135e:	4298      	cmp	r0, r3
   81360:	d107      	bne.n	81372 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81362:	461f      	mov	r7, r3
   81364:	4e1e      	ldr	r6, [pc, #120]	; (813e0 <usart_serial_getchar+0x90>)
   81366:	4638      	mov	r0, r7
   81368:	4629      	mov	r1, r5
   8136a:	47b0      	blx	r6
   8136c:	2800      	cmp	r0, #0
   8136e:	d1fa      	bne.n	81366 <usart_serial_getchar+0x16>
   81370:	e019      	b.n	813a6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81372:	4b1c      	ldr	r3, [pc, #112]	; (813e4 <usart_serial_getchar+0x94>)
   81374:	4298      	cmp	r0, r3
   81376:	d109      	bne.n	8138c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81378:	461f      	mov	r7, r3
   8137a:	4e1b      	ldr	r6, [pc, #108]	; (813e8 <usart_serial_getchar+0x98>)
   8137c:	4638      	mov	r0, r7
   8137e:	a901      	add	r1, sp, #4
   81380:	47b0      	blx	r6
   81382:	2800      	cmp	r0, #0
   81384:	d1fa      	bne.n	8137c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81386:	9b01      	ldr	r3, [sp, #4]
   81388:	702b      	strb	r3, [r5, #0]
   8138a:	e019      	b.n	813c0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8138c:	4b17      	ldr	r3, [pc, #92]	; (813ec <usart_serial_getchar+0x9c>)
   8138e:	4298      	cmp	r0, r3
   81390:	d109      	bne.n	813a6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81392:	461e      	mov	r6, r3
   81394:	4c14      	ldr	r4, [pc, #80]	; (813e8 <usart_serial_getchar+0x98>)
   81396:	4630      	mov	r0, r6
   81398:	a901      	add	r1, sp, #4
   8139a:	47a0      	blx	r4
   8139c:	2800      	cmp	r0, #0
   8139e:	d1fa      	bne.n	81396 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   813a0:	9b01      	ldr	r3, [sp, #4]
   813a2:	702b      	strb	r3, [r5, #0]
   813a4:	e018      	b.n	813d8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   813a6:	4b12      	ldr	r3, [pc, #72]	; (813f0 <usart_serial_getchar+0xa0>)
   813a8:	429c      	cmp	r4, r3
   813aa:	d109      	bne.n	813c0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   813ac:	461e      	mov	r6, r3
   813ae:	4c0e      	ldr	r4, [pc, #56]	; (813e8 <usart_serial_getchar+0x98>)
   813b0:	4630      	mov	r0, r6
   813b2:	a901      	add	r1, sp, #4
   813b4:	47a0      	blx	r4
   813b6:	2800      	cmp	r0, #0
   813b8:	d1fa      	bne.n	813b0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   813ba:	9b01      	ldr	r3, [sp, #4]
   813bc:	702b      	strb	r3, [r5, #0]
   813be:	e00b      	b.n	813d8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   813c0:	4b0c      	ldr	r3, [pc, #48]	; (813f4 <usart_serial_getchar+0xa4>)
   813c2:	429c      	cmp	r4, r3
   813c4:	d108      	bne.n	813d8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   813c6:	461e      	mov	r6, r3
   813c8:	4c07      	ldr	r4, [pc, #28]	; (813e8 <usart_serial_getchar+0x98>)
   813ca:	4630      	mov	r0, r6
   813cc:	a901      	add	r1, sp, #4
   813ce:	47a0      	blx	r4
   813d0:	2800      	cmp	r0, #0
   813d2:	d1fa      	bne.n	813ca <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   813d4:	9b01      	ldr	r3, [sp, #4]
   813d6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   813d8:	b003      	add	sp, #12
   813da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   813dc:	400e0800 	.word	0x400e0800
   813e0:	000810f1 	.word	0x000810f1
   813e4:	40098000 	.word	0x40098000
   813e8:	00081119 	.word	0x00081119
   813ec:	4009c000 	.word	0x4009c000
   813f0:	400a0000 	.word	0x400a0000
   813f4:	400a4000 	.word	0x400a4000

000813f8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   813f8:	b570      	push	{r4, r5, r6, lr}
   813fa:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   813fc:	4b1e      	ldr	r3, [pc, #120]	; (81478 <usart_serial_putchar+0x80>)
   813fe:	4298      	cmp	r0, r3
   81400:	d108      	bne.n	81414 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   81402:	461e      	mov	r6, r3
   81404:	4d1d      	ldr	r5, [pc, #116]	; (8147c <usart_serial_putchar+0x84>)
   81406:	4630      	mov	r0, r6
   81408:	4621      	mov	r1, r4
   8140a:	47a8      	blx	r5
   8140c:	2800      	cmp	r0, #0
   8140e:	d1fa      	bne.n	81406 <usart_serial_putchar+0xe>
		return 1;
   81410:	2001      	movs	r0, #1
   81412:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81414:	4b1a      	ldr	r3, [pc, #104]	; (81480 <usart_serial_putchar+0x88>)
   81416:	4298      	cmp	r0, r3
   81418:	d108      	bne.n	8142c <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   8141a:	461e      	mov	r6, r3
   8141c:	4d19      	ldr	r5, [pc, #100]	; (81484 <usart_serial_putchar+0x8c>)
   8141e:	4630      	mov	r0, r6
   81420:	4621      	mov	r1, r4
   81422:	47a8      	blx	r5
   81424:	2800      	cmp	r0, #0
   81426:	d1fa      	bne.n	8141e <usart_serial_putchar+0x26>
		return 1;
   81428:	2001      	movs	r0, #1
   8142a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8142c:	4b16      	ldr	r3, [pc, #88]	; (81488 <usart_serial_putchar+0x90>)
   8142e:	4298      	cmp	r0, r3
   81430:	d108      	bne.n	81444 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   81432:	461e      	mov	r6, r3
   81434:	4d13      	ldr	r5, [pc, #76]	; (81484 <usart_serial_putchar+0x8c>)
   81436:	4630      	mov	r0, r6
   81438:	4621      	mov	r1, r4
   8143a:	47a8      	blx	r5
   8143c:	2800      	cmp	r0, #0
   8143e:	d1fa      	bne.n	81436 <usart_serial_putchar+0x3e>
		return 1;
   81440:	2001      	movs	r0, #1
   81442:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81444:	4b11      	ldr	r3, [pc, #68]	; (8148c <usart_serial_putchar+0x94>)
   81446:	4298      	cmp	r0, r3
   81448:	d108      	bne.n	8145c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   8144a:	461e      	mov	r6, r3
   8144c:	4d0d      	ldr	r5, [pc, #52]	; (81484 <usart_serial_putchar+0x8c>)
   8144e:	4630      	mov	r0, r6
   81450:	4621      	mov	r1, r4
   81452:	47a8      	blx	r5
   81454:	2800      	cmp	r0, #0
   81456:	d1fa      	bne.n	8144e <usart_serial_putchar+0x56>
		return 1;
   81458:	2001      	movs	r0, #1
   8145a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8145c:	4b0c      	ldr	r3, [pc, #48]	; (81490 <usart_serial_putchar+0x98>)
   8145e:	4298      	cmp	r0, r3
   81460:	d108      	bne.n	81474 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   81462:	461e      	mov	r6, r3
   81464:	4d07      	ldr	r5, [pc, #28]	; (81484 <usart_serial_putchar+0x8c>)
   81466:	4630      	mov	r0, r6
   81468:	4621      	mov	r1, r4
   8146a:	47a8      	blx	r5
   8146c:	2800      	cmp	r0, #0
   8146e:	d1fa      	bne.n	81466 <usart_serial_putchar+0x6e>
		return 1;
   81470:	2001      	movs	r0, #1
   81472:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81474:	2000      	movs	r0, #0
}
   81476:	bd70      	pop	{r4, r5, r6, pc}
   81478:	400e0800 	.word	0x400e0800
   8147c:	000810e1 	.word	0x000810e1
   81480:	40098000 	.word	0x40098000
   81484:	00081105 	.word	0x00081105
   81488:	4009c000 	.word	0x4009c000
   8148c:	400a0000 	.word	0x400a0000
   81490:	400a4000 	.word	0x400a4000

00081494 <EMAC_Handler>:

/**
 * \brief EMAC interrupt handler.
 */
void EMAC_Handler(void)
{
   81494:	b508      	push	{r3, lr}
	emac_handler(&gs_emac_dev);
   81496:	4802      	ldr	r0, [pc, #8]	; (814a0 <EMAC_Handler+0xc>)
   81498:	4b02      	ldr	r3, [pc, #8]	; (814a4 <EMAC_Handler+0x10>)
   8149a:	4798      	blx	r3
   8149c:	bd08      	pop	{r3, pc}
   8149e:	bf00      	nop
   814a0:	2007427c 	.word	0x2007427c
   814a4:	00080b3d 	.word	0x00080b3d

000814a8 <main>:
 *  \brief EMAC example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   814a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814ac:	b099      	sub	sp, #100	; 0x64
	uint32_t ul_frm_size;
	volatile uint32_t ul_delay;
	emac_options_t emac_option;

	/* Initialize the SAM system. */
	sysclk_init();
   814ae:	4b8a      	ldr	r3, [pc, #552]	; (816d8 <main+0x230>)
   814b0:	4798      	blx	r3
	board_init();
   814b2:	4b8a      	ldr	r3, [pc, #552]	; (816dc <main+0x234>)
   814b4:	4798      	blx	r3
   814b6:	2008      	movs	r0, #8
   814b8:	4d89      	ldr	r5, [pc, #548]	; (816e0 <main+0x238>)
   814ba:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   814bc:	4c89      	ldr	r4, [pc, #548]	; (816e4 <main+0x23c>)
   814be:	4b8a      	ldr	r3, [pc, #552]	; (816e8 <main+0x240>)
   814c0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   814c2:	4a8a      	ldr	r2, [pc, #552]	; (816ec <main+0x244>)
   814c4:	4b8a      	ldr	r3, [pc, #552]	; (816f0 <main+0x248>)
   814c6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   814c8:	4a8a      	ldr	r2, [pc, #552]	; (816f4 <main+0x24c>)
   814ca:	4b8b      	ldr	r3, [pc, #556]	; (816f8 <main+0x250>)
   814cc:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   814ce:	4b8b      	ldr	r3, [pc, #556]	; (816fc <main+0x254>)
   814d0:	9311      	str	r3, [sp, #68]	; 0x44
	uart_settings.ul_baudrate = opt->baudrate;
   814d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   814d6:	9312      	str	r3, [sp, #72]	; 0x48
	uart_settings.ul_mode = opt->paritytype;
   814d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   814dc:	9313      	str	r3, [sp, #76]	; 0x4c
   814de:	2008      	movs	r0, #8
   814e0:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   814e2:	4620      	mov	r0, r4
   814e4:	a911      	add	r1, sp, #68	; 0x44
   814e6:	4b86      	ldr	r3, [pc, #536]	; (81700 <main+0x258>)
   814e8:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   814ea:	4d86      	ldr	r5, [pc, #536]	; (81704 <main+0x25c>)
   814ec:	682b      	ldr	r3, [r5, #0]
   814ee:	6898      	ldr	r0, [r3, #8]
   814f0:	2100      	movs	r1, #0
   814f2:	4c85      	ldr	r4, [pc, #532]	; (81708 <main+0x260>)
   814f4:	47a0      	blx	r4
	setbuf(stdin, NULL);
   814f6:	682b      	ldr	r3, [r5, #0]
   814f8:	6858      	ldr	r0, [r3, #4]
   814fa:	2100      	movs	r1, #0
   814fc:	47a0      	blx	r4

	/* Initialize the console UART. */
	configure_console();

	puts(STRING_HEADER);
   814fe:	4883      	ldr	r0, [pc, #524]	; (8170c <main+0x264>)
   81500:	4b83      	ldr	r3, [pc, #524]	; (81710 <main+0x268>)
   81502:	4798      	blx	r3

	/* Display MAC & IP settings */
	printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
   81504:	231c      	movs	r3, #28
   81506:	9300      	str	r3, [sp, #0]
   81508:	23a0      	movs	r3, #160	; 0xa0
   8150a:	9301      	str	r3, [sp, #4]
   8150c:	2502      	movs	r5, #2
   8150e:	9502      	str	r5, [sp, #8]
   81510:	4880      	ldr	r0, [pc, #512]	; (81714 <main+0x26c>)
   81512:	2100      	movs	r1, #0
   81514:	2204      	movs	r2, #4
   81516:	2325      	movs	r3, #37	; 0x25
   81518:	4c7f      	ldr	r4, [pc, #508]	; (81718 <main+0x270>)
   8151a:	47a0      	blx	r4
			gs_uc_mac_address[0], gs_uc_mac_address[1], gs_uc_mac_address[2],
			gs_uc_mac_address[3], gs_uc_mac_address[4], gs_uc_mac_address[5]);

	printf("-- IP  %d.%d.%d.%d\n\r", gs_uc_ip_address[0], gs_uc_ip_address[1],
   8151c:	9500      	str	r5, [sp, #0]
   8151e:	487f      	ldr	r0, [pc, #508]	; (8171c <main+0x274>)
   81520:	21c0      	movs	r1, #192	; 0xc0
   81522:	22a8      	movs	r2, #168	; 0xa8
   81524:	2300      	movs	r3, #0
   81526:	47a0      	blx	r4
			gs_uc_ip_address[2], gs_uc_ip_address[3]);

	/* Reset PHY */
	rstc_set_external_reset(RSTC, 13); /* (2^(13+1))/32768 */
   81528:	4c7d      	ldr	r4, [pc, #500]	; (81720 <main+0x278>)
   8152a:	4620      	mov	r0, r4
   8152c:	210d      	movs	r1, #13
   8152e:	4b7d      	ldr	r3, [pc, #500]	; (81724 <main+0x27c>)
   81530:	4798      	blx	r3
	rstc_reset_extern(RSTC);
   81532:	4620      	mov	r0, r4
   81534:	4b7c      	ldr	r3, [pc, #496]	; (81728 <main+0x280>)
   81536:	4798      	blx	r3
	while (rstc_get_status(RSTC) & RSTC_SR_NRSTL) {
   81538:	4625      	mov	r5, r4
   8153a:	4c7c      	ldr	r4, [pc, #496]	; (8172c <main+0x284>)
   8153c:	4628      	mov	r0, r5
   8153e:	47a0      	blx	r4
   81540:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   81544:	d1fa      	bne.n	8153c <main+0x94>
	};
	rstc_set_external_reset(RSTC, 0);  /* restore default */
   81546:	4876      	ldr	r0, [pc, #472]	; (81720 <main+0x278>)
   81548:	2100      	movs	r1, #0
   8154a:	4b76      	ldr	r3, [pc, #472]	; (81724 <main+0x27c>)
   8154c:	4798      	blx	r3

	/* Wait for PHY to be ready (CAT811: Max400ms) */
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
   8154e:	4b78      	ldr	r3, [pc, #480]	; (81730 <main+0x288>)
   81550:	9316      	str	r3, [sp, #88]	; 0x58
	while (ul_delay--);
   81552:	9b16      	ldr	r3, [sp, #88]	; 0x58
   81554:	1e5a      	subs	r2, r3, #1
   81556:	9216      	str	r2, [sp, #88]	; 0x58
   81558:	2b00      	cmp	r3, #0
   8155a:	d1fa      	bne.n	81552 <main+0xaa>

	/* Enable EMAC clock */
	pmc_enable_periph_clk(ID_EMAC);
   8155c:	202a      	movs	r0, #42	; 0x2a
   8155e:	4b60      	ldr	r3, [pc, #384]	; (816e0 <main+0x238>)
   81560:	4798      	blx	r3

	/* Fill in EMAC options */
	emac_option.uc_copy_all_frame = 0;
   81562:	2400      	movs	r4, #0
   81564:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
	emac_option.uc_no_boardcast = 0;
   81568:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51

	memcpy(emac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));
   8156c:	4b71      	ldr	r3, [pc, #452]	; (81734 <main+0x28c>)
   8156e:	6818      	ldr	r0, [r3, #0]
   81570:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
   81574:	889b      	ldrh	r3, [r3, #4]
   81576:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56

	gs_emac_dev.p_hw = EMAC;
   8157a:	496f      	ldr	r1, [pc, #444]	; (81738 <main+0x290>)
   8157c:	4d6f      	ldr	r5, [pc, #444]	; (8173c <main+0x294>)
   8157e:	600d      	str	r5, [r1, #0]

	/* Init EMAC driver structure */
	emac_dev_init(EMAC, &gs_emac_dev, &emac_option);
   81580:	4628      	mov	r0, r5
   81582:	aa14      	add	r2, sp, #80	; 0x50
   81584:	4b6e      	ldr	r3, [pc, #440]	; (81740 <main+0x298>)
   81586:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81588:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8158c:	4b6d      	ldr	r3, [pc, #436]	; (81744 <main+0x29c>)
   8158e:	605a      	str	r2, [r3, #4]

	/* Enable Interrupt */
	NVIC_EnableIRQ(EMAC_IRQn);

	/* Init MAC PHY driver */
	if (ethernet_phy_init(EMAC, BOARD_EMAC_PHY_ADDR, sysclk_get_cpu_hz())
   81590:	4628      	mov	r0, r5
   81592:	4621      	mov	r1, r4
   81594:	4a59      	ldr	r2, [pc, #356]	; (816fc <main+0x254>)
   81596:	4b6c      	ldr	r3, [pc, #432]	; (81748 <main+0x2a0>)
   81598:	4798      	blx	r3
   8159a:	b118      	cbz	r0, 815a4 <main+0xfc>
					!= EMAC_OK) {
		puts("PHY Initialize ERROR!\r");
   8159c:	486b      	ldr	r0, [pc, #428]	; (8174c <main+0x2a4>)
   8159e:	4b5c      	ldr	r3, [pc, #368]	; (81710 <main+0x268>)
   815a0:	4798      	blx	r3
		return -1;
   815a2:	e205      	b.n	819b0 <main+0x508>
	}

	/* Auto Negotiate, work in RMII mode */
	if (ethernet_phy_auto_negotiate(EMAC, BOARD_EMAC_PHY_ADDR) != EMAC_OK) {
   815a4:	4865      	ldr	r0, [pc, #404]	; (8173c <main+0x294>)
   815a6:	2100      	movs	r1, #0
   815a8:	4b69      	ldr	r3, [pc, #420]	; (81750 <main+0x2a8>)
   815aa:	4798      	blx	r3
   815ac:	b138      	cbz	r0, 815be <main+0x116>

		puts("Auto Negotiate ERROR!\r");
   815ae:	4869      	ldr	r0, [pc, #420]	; (81754 <main+0x2ac>)
   815b0:	4b57      	ldr	r3, [pc, #348]	; (81710 <main+0x268>)
   815b2:	4798      	blx	r3
		return -1;
   815b4:	e1fc      	b.n	819b0 <main+0x508>
	}

	/* Establish ethernet link */
	while (ethernet_phy_set_link(EMAC, BOARD_EMAC_PHY_ADDR, 1) != EMAC_OK) {
		puts("Set link ERROR!\r");
   815b6:	4868      	ldr	r0, [pc, #416]	; (81758 <main+0x2b0>)
   815b8:	4b55      	ldr	r3, [pc, #340]	; (81710 <main+0x268>)
   815ba:	4798      	blx	r3
		return -1;
   815bc:	e1f8      	b.n	819b0 <main+0x508>
		puts("Auto Negotiate ERROR!\r");
		return -1;
	}

	/* Establish ethernet link */
	while (ethernet_phy_set_link(EMAC, BOARD_EMAC_PHY_ADDR, 1) != EMAC_OK) {
   815be:	485f      	ldr	r0, [pc, #380]	; (8173c <main+0x294>)
   815c0:	2100      	movs	r1, #0
   815c2:	2201      	movs	r2, #1
   815c4:	4b65      	ldr	r3, [pc, #404]	; (8175c <main+0x2b4>)
   815c6:	4798      	blx	r3
   815c8:	2800      	cmp	r0, #0
   815ca:	d1f4      	bne.n	815b6 <main+0x10e>
		puts("Set link ERROR!\r");
		return -1;
	}

	puts("Link detected. \r");
   815cc:	4864      	ldr	r0, [pc, #400]	; (81760 <main+0x2b8>)
   815ce:	4b50      	ldr	r3, [pc, #320]	; (81710 <main+0x268>)
   815d0:	4798      	blx	r3

	while (1) {
		/* Process packets */
		if (EMAC_OK != emac_dev_read(&gs_emac_dev, (uint8_t *) gs_uc_eth_buffer,
   815d2:	f8df 9164 	ldr.w	r9, [pc, #356]	; 81738 <main+0x290>
   815d6:	f8df b198 	ldr.w	fp, [pc, #408]	; 81770 <main+0x2c8>
   815da:	f10b 030b 	add.w	r3, fp, #11
   815de:	930f      	str	r3, [sp, #60]	; 0x3c
   815e0:	4648      	mov	r0, r9
   815e2:	4659      	mov	r1, fp
   815e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   815e8:	ab17      	add	r3, sp, #92	; 0x5c
   815ea:	4c5e      	ldr	r4, [pc, #376]	; (81764 <main+0x2bc>)
   815ec:	47a0      	blx	r4
   815ee:	2800      	cmp	r0, #0
   815f0:	d1f6      	bne.n	815e0 <main+0x138>
						sizeof(gs_uc_eth_buffer), &ul_frm_size)) {
			continue;
		}

		if (ul_frm_size > 0) {
   815f2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   815f4:	2c00      	cmp	r4, #0
   815f6:	d0f3      	beq.n	815e0 <main+0x138>
	uint16_t us_pkt_format;

	p_ethernet_header_t p_eth = (p_ethernet_header_t) (p_uc_data);
	p_ip_header_t p_ip_header = (p_ip_header_t) (p_uc_data + ETH_HEADER_SIZE);
	ip_header_t ip_header;
	us_pkt_format = SWAP16(p_eth->et_protlen);
   815f8:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   815fc:	b289      	uxth	r1, r1
   815fe:	0a0b      	lsrs	r3, r1, #8
   81600:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   81604:	b289      	uxth	r1, r1

	switch (us_pkt_format) {
   81606:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   8160a:	f000 80b3 	beq.w	81774 <main+0x2cc>
   8160e:	f640 0306 	movw	r3, #2054	; 0x806
   81612:	4299      	cmp	r1, r3
   81614:	f040 81c8 	bne.w	819a8 <main+0x500>
	uint8_t ul_rc = EMAC_OK;

	p_ethernet_header_t p_eth = (p_ethernet_header_t) p_uc_data;
	p_arp_header_t p_arp = (p_arp_header_t) (p_uc_data + ETH_HEADER_SIZE);

	if (SWAP16(p_arp->ar_op) == ARP_REQUEST) {
   81618:	f8bb 3014 	ldrh.w	r3, [fp, #20]
   8161c:	b29a      	uxth	r2, r3
   8161e:	0213      	lsls	r3, r2, #8
   81620:	b29b      	uxth	r3, r3
   81622:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   81626:	2b01      	cmp	r3, #1
   81628:	d1da      	bne.n	815e0 <main+0x138>
		printf("-- IP  %d.%d.%d.%d\n\r",
   8162a:	4e3c      	ldr	r6, [pc, #240]	; (8171c <main+0x274>)
   8162c:	f89b 1000 	ldrb.w	r1, [fp]
   81630:	f89b 2001 	ldrb.w	r2, [fp, #1]
   81634:	f89b 3002 	ldrb.w	r3, [fp, #2]
   81638:	f89b 0003 	ldrb.w	r0, [fp, #3]
   8163c:	9000      	str	r0, [sp, #0]
   8163e:	4630      	mov	r0, r6
   81640:	4d35      	ldr	r5, [pc, #212]	; (81718 <main+0x270>)
   81642:	47a8      	blx	r5
				p_eth->et_dest[0], p_eth->et_dest[1],
				p_eth->et_dest[2], p_eth->et_dest[3]);

		printf("-- IP  %d.%d.%d.%d\n\r",
   81644:	f89b 1006 	ldrb.w	r1, [fp, #6]
   81648:	f89b 2007 	ldrb.w	r2, [fp, #7]
   8164c:	f89b 3008 	ldrb.w	r3, [fp, #8]
   81650:	f89b 0009 	ldrb.w	r0, [fp, #9]
   81654:	9000      	str	r0, [sp, #0]
   81656:	4630      	mov	r0, r6
   81658:	47a8      	blx	r5
				p_eth->et_src[0], p_eth->et_src[1],
				p_eth->et_src[2], p_eth->et_src[3]);

		/* ARP reply operation */
		p_arp->ar_op = SWAP16(ARP_REPLY);
   8165a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8165e:	f8ab 3014 	strh.w	r3, [fp, #20]
   81662:	465b      	mov	r3, fp
   81664:	4833      	ldr	r0, [pc, #204]	; (81734 <main+0x28c>)

		/* Fill the destination address and source address */
		for (i = 0; i < 6; i++) {
   81666:	2200      	movs	r2, #0
			/* Swap ethernet destination address and ethernet source address */
			p_eth->et_dest[i] = p_eth->et_src[i];
   81668:	7999      	ldrb	r1, [r3, #6]
   8166a:	7019      	strb	r1, [r3, #0]
			p_eth->et_src[i] = gs_uc_mac_address[i];
   8166c:	f810 1b01 	ldrb.w	r1, [r0], #1
   81670:	7199      	strb	r1, [r3, #6]
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
   81672:	7d9d      	ldrb	r5, [r3, #22]
   81674:	f883 5020 	strb.w	r5, [r3, #32]
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
   81678:	7599      	strb	r1, [r3, #22]

		/* ARP reply operation */
		p_arp->ar_op = SWAP16(ARP_REPLY);

		/* Fill the destination address and source address */
		for (i = 0; i < 6; i++) {
   8167a:	3201      	adds	r2, #1
   8167c:	3301      	adds	r3, #1
   8167e:	2a06      	cmp	r2, #6
   81680:	d1f2      	bne.n	81668 <main+0x1c0>
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
		}
		/* Swap the source IP address and the destination IP address */
		for (i = 0; i < 4; i++) {
			p_arp->ar_tpa[i] = p_arp->ar_spa[i];
   81682:	f89b 301c 	ldrb.w	r3, [fp, #28]
   81686:	f88b 3026 	strb.w	r3, [fp, #38]	; 0x26
			p_arp->ar_spa[i] = gs_uc_ip_address[i];
   8168a:	23c0      	movs	r3, #192	; 0xc0
   8168c:	f88b 301c 	strb.w	r3, [fp, #28]
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
		}
		/* Swap the source IP address and the destination IP address */
		for (i = 0; i < 4; i++) {
			p_arp->ar_tpa[i] = p_arp->ar_spa[i];
   81690:	f89b 301d 	ldrb.w	r3, [fp, #29]
   81694:	f88b 3027 	strb.w	r3, [fp, #39]	; 0x27
			p_arp->ar_spa[i] = gs_uc_ip_address[i];
   81698:	23a8      	movs	r3, #168	; 0xa8
   8169a:	f88b 301d 	strb.w	r3, [fp, #29]
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
		}
		/* Swap the source IP address and the destination IP address */
		for (i = 0; i < 4; i++) {
			p_arp->ar_tpa[i] = p_arp->ar_spa[i];
   8169e:	f89b 301e 	ldrb.w	r3, [fp, #30]
   816a2:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
			p_arp->ar_spa[i] = gs_uc_ip_address[i];
   816a6:	2300      	movs	r3, #0
   816a8:	f88b 301e 	strb.w	r3, [fp, #30]
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
		}
		/* Swap the source IP address and the destination IP address */
		for (i = 0; i < 4; i++) {
			p_arp->ar_tpa[i] = p_arp->ar_spa[i];
   816ac:	f89b 201f 	ldrb.w	r2, [fp, #31]
   816b0:	f88b 2029 	strb.w	r2, [fp, #41]	; 0x29
			p_arp->ar_spa[i] = gs_uc_ip_address[i];
   816b4:	2202      	movs	r2, #2
   816b6:	f88b 201f 	strb.w	r2, [fp, #31]
		}
		ul_rc = emac_dev_write(&gs_emac_dev, p_uc_data, ul_size, NULL);
   816ba:	4648      	mov	r0, r9
   816bc:	4659      	mov	r1, fp
   816be:	4622      	mov	r2, r4
   816c0:	4c29      	ldr	r4, [pc, #164]	; (81768 <main+0x2c0>)
   816c2:	47a0      	blx	r4
   816c4:	4601      	mov	r1, r0
		if (ul_rc != EMAC_OK) {
   816c6:	f010 0fff 	tst.w	r0, #255	; 0xff
   816ca:	d089      	beq.n	815e0 <main+0x138>
			printf("E: ARP Send - 0x%x\n\r", ul_rc);
   816cc:	4827      	ldr	r0, [pc, #156]	; (8176c <main+0x2c4>)
   816ce:	b2c9      	uxtb	r1, r1
   816d0:	4b11      	ldr	r3, [pc, #68]	; (81718 <main+0x270>)
   816d2:	4798      	blx	r3
   816d4:	e784      	b.n	815e0 <main+0x138>
   816d6:	bf00      	nop
   816d8:	00080151 	.word	0x00080151
   816dc:	00080241 	.word	0x00080241
   816e0:	00081029 	.word	0x00081029
   816e4:	400e0800 	.word	0x400e0800
   816e8:	200748e4 	.word	0x200748e4
   816ec:	000813f9 	.word	0x000813f9
   816f0:	200748e0 	.word	0x200748e0
   816f4:	00081351 	.word	0x00081351
   816f8:	200748dc 	.word	0x200748dc
   816fc:	0501bd00 	.word	0x0501bd00
   81700:	000810a9 	.word	0x000810a9
   81704:	20070558 	.word	0x20070558
   81708:	00081c89 	.word	0x00081c89
   8170c:	000849f0 	.word	0x000849f0
   81710:	00081c79 	.word	0x00081c79
   81714:	00084a40 	.word	0x00084a40
   81718:	00081a69 	.word	0x00081a69
   8171c:	00084a5c 	.word	0x00084a5c
   81720:	400e1a00 	.word	0x400e1a00
   81724:	0008107d 	.word	0x0008107d
   81728:	00081099 	.word	0x00081099
   8172c:	000810a5 	.word	0x000810a5
   81730:	00aae600 	.word	0x00aae600
   81734:	000849e8 	.word	0x000849e8
   81738:	2007427c 	.word	0x2007427c
   8173c:	400b0000 	.word	0x400b0000
   81740:	00080841 	.word	0x00080841
   81744:	e000e100 	.word	0xe000e100
   81748:	000805d5 	.word	0x000805d5
   8174c:	00084a74 	.word	0x00084a74
   81750:	000803f1 	.word	0x000803f1
   81754:	00084a8c 	.word	0x00084a8c
   81758:	00084aa4 	.word	0x00084aa4
   8175c:	00080301 	.word	0x00080301
   81760:	00084ab8 	.word	0x00084ab8
   81764:	00080931 	.word	0x00080931
   81768:	00080ab1 	.word	0x00080ab1
   8176c:	00084acc 	.word	0x00084acc
   81770:	200742a8 	.word	0x200742a8
		break;

	/* IP protocol frame */
	case ETH_PROT_IP:
		/* Backup the header */
		memcpy(&ip_header, p_ip_header, sizeof(ip_header_t));
   81774:	f89b 700e 	ldrb.w	r7, [fp, #14]
   81778:	f89b 300f 	ldrb.w	r3, [fp, #15]
   8177c:	930d      	str	r3, [sp, #52]	; 0x34
   8177e:	f8bb 6010 	ldrh.w	r6, [fp, #16]
   81782:	f8bb 3012 	ldrh.w	r3, [fp, #18]
   81786:	9305      	str	r3, [sp, #20]
   81788:	f89b a017 	ldrb.w	sl, [fp, #23]
   8178c:	f8bb 8018 	ldrh.w	r8, [fp, #24]
   81790:	f89b 301a 	ldrb.w	r3, [fp, #26]
   81794:	9306      	str	r3, [sp, #24]
   81796:	f89b 301b 	ldrb.w	r3, [fp, #27]
   8179a:	930e      	str	r3, [sp, #56]	; 0x38
   8179c:	f89b 301c 	ldrb.w	r3, [fp, #28]
   817a0:	930a      	str	r3, [sp, #40]	; 0x28
   817a2:	f89b 301d 	ldrb.w	r3, [fp, #29]
   817a6:	930b      	str	r3, [sp, #44]	; 0x2c
   817a8:	f89b 301e 	ldrb.w	r3, [fp, #30]
   817ac:	9309      	str	r3, [sp, #36]	; 0x24
   817ae:	f89b 301f 	ldrb.w	r3, [fp, #31]
   817b2:	9308      	str	r3, [sp, #32]
   817b4:	f89b 3020 	ldrb.w	r3, [fp, #32]
   817b8:	9307      	str	r3, [sp, #28]
   817ba:	f89b 3021 	ldrb.w	r3, [fp, #33]	; 0x21
   817be:	930c      	str	r3, [sp, #48]	; 0x30
	p_ip_header_t p_ip_header = (p_ip_header_t) (p_uc_data + ETH_HEADER_SIZE);

	p_icmp_echo_header_t p_icmp_echo =
			(p_icmp_echo_header_t) ((int8_t *) p_ip_header +
			ETH_IP_HEADER_SIZE);
	printf("-- IP  %d.%d.%d.%d\n\r", p_eth->et_dest[0], p_eth->et_dest[1],
   817c0:	f89b 1000 	ldrb.w	r1, [fp]
   817c4:	f89b 2001 	ldrb.w	r2, [fp, #1]
   817c8:	f89b 3002 	ldrb.w	r3, [fp, #2]
   817cc:	f89b 0003 	ldrb.w	r0, [fp, #3]
   817d0:	9000      	str	r0, [sp, #0]
   817d2:	487a      	ldr	r0, [pc, #488]	; (819bc <main+0x514>)
   817d4:	4d7a      	ldr	r5, [pc, #488]	; (819c0 <main+0x518>)
   817d6:	47a8      	blx	r5
			p_eth->et_dest[2], p_eth->et_dest[3]);

	printf("-- IP  %d.%d.%d.%d\n\r",
   817d8:	f89b 1006 	ldrb.w	r1, [fp, #6]
   817dc:	f89b 2007 	ldrb.w	r2, [fp, #7]
   817e0:	f89b 3008 	ldrb.w	r3, [fp, #8]
   817e4:	f89b 0009 	ldrb.w	r0, [fp, #9]
   817e8:	9000      	str	r0, [sp, #0]
   817ea:	4874      	ldr	r0, [pc, #464]	; (819bc <main+0x514>)
   817ec:	47a8      	blx	r5
			p_eth->et_src[0], p_eth->et_src[1], p_eth->et_src[2],
			p_eth->et_src[3]);
	switch (p_ip_header->ip_p) {
   817ee:	f89b 3017 	ldrb.w	r3, [fp, #23]
   817f2:	b2db      	uxtb	r3, r3
   817f4:	2b01      	cmp	r3, #1
   817f6:	d17b      	bne.n	818f0 <main+0x448>
	case IP_PROT_ICMP:
		if (p_icmp_echo->type == ICMP_ECHO_REQUEST) {
   817f8:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
   817fc:	b2db      	uxtb	r3, r3
   817fe:	2b08      	cmp	r3, #8
   81800:	d176      	bne.n	818f0 <main+0x448>
			p_icmp_echo->type = ICMP_ECHO_REPLY;
   81802:	2300      	movs	r3, #0
   81804:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
			p_icmp_echo->code = 0;
   81808:	f88b 3023 	strb.w	r3, [fp, #35]	; 0x23
			p_icmp_echo->cksum = 0;
   8180c:	f8ab 3024 	strh.w	r3, [fp, #36]	; 0x24

			/* Checksum of the ICMP message */
			ul_icmp_len = (SWAP16(p_ip_header->ip_len) - ETH_IP_HEADER_SIZE);
   81810:	f8bb 3010 	ldrh.w	r3, [fp, #16]
   81814:	b29a      	uxth	r2, r3
   81816:	0213      	lsls	r3, r2, #8
   81818:	b29b      	uxth	r3, r3
   8181a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   8181e:	f1a3 0e14 	sub.w	lr, r3, #20
			if (ul_icmp_len % 2) {
   81822:	f01e 0f01 	tst.w	lr, #1
   81826:	d005      	beq.n	81834 <main+0x38c>
				*((uint8_t *) p_icmp_echo + ul_icmp_len) = 0;
   81828:	44de      	add	lr, fp
   8182a:	2200      	movs	r2, #0
   8182c:	f88e 2022 	strb.w	r2, [lr, #34]	; 0x22
				ul_icmp_len++;
   81830:	f1a3 0e13 	sub.w	lr, r3, #19
 */
static uint16_t emac_icmp_checksum(uint16_t *p_buff, uint32_t ul_len)
{
	uint32_t i, ul_tmp;

	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
   81834:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
   81838:	d011      	beq.n	8185e <main+0x3b6>
   8183a:	2200      	movs	r2, #0
   8183c:	4611      	mov	r1, r2
   8183e:	f10b 0022 	add.w	r0, fp, #34	; 0x22
   81842:	9d05      	ldr	r5, [sp, #20]

		ul_tmp += SWAP16(*p_buff);
   81844:	f830 cb02 	ldrh.w	ip, [r0], #2
   81848:	ea4f 230c 	mov.w	r3, ip, lsl #8
   8184c:	b29b      	uxth	r3, r3
   8184e:	ea43 231c 	orr.w	r3, r3, ip, lsr #8
   81852:	4419      	add	r1, r3
 */
static uint16_t emac_icmp_checksum(uint16_t *p_buff, uint32_t ul_len)
{
	uint32_t i, ul_tmp;

	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
   81854:	3201      	adds	r2, #1
   81856:	4572      	cmp	r2, lr
   81858:	d1f4      	bne.n	81844 <main+0x39c>
   8185a:	9505      	str	r5, [sp, #20]
   8185c:	e000      	b.n	81860 <main+0x3b8>
   8185e:	2100      	movs	r1, #0

		ul_tmp += SWAP16(*p_buff);
	}
	ul_tmp = (ul_tmp & 0xffff) + (ul_tmp >> 16);
   81860:	b28b      	uxth	r3, r1
   81862:	eb03 4311 	add.w	r3, r3, r1, lsr #16

	return (uint16_t) (~ul_tmp);
   81866:	43db      	mvns	r3, r3
   81868:	b29b      	uxth	r3, r3
				*((uint8_t *) p_icmp_echo + ul_icmp_len) = 0;
				ul_icmp_len++;
			}
			ul_icmp_len = ul_icmp_len / sizeof(uint16_t);

			p_icmp_echo->cksum = SWAP16(
   8186a:	0a1a      	lsrs	r2, r3, #8
   8186c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   81870:	f8ab 3024 	strh.w	r3, [fp, #36]	; 0x24
					emac_icmp_checksum((uint16_t *)p_icmp_echo, ul_icmp_len));
			/* Swap the IP destination  address and the IP source address */
			for (i = 0; i < 4; i++) {
				p_ip_header->ip_dst[i] =
   81874:	f89b 301a 	ldrb.w	r3, [fp, #26]
   81878:	f88b 301e 	strb.w	r3, [fp, #30]
						p_ip_header->ip_src[i];
				p_ip_header->ip_src[i] = gs_uc_ip_address[i];
   8187c:	23c0      	movs	r3, #192	; 0xc0
   8187e:	f88b 301a 	strb.w	r3, [fp, #26]

			p_icmp_echo->cksum = SWAP16(
					emac_icmp_checksum((uint16_t *)p_icmp_echo, ul_icmp_len));
			/* Swap the IP destination  address and the IP source address */
			for (i = 0; i < 4; i++) {
				p_ip_header->ip_dst[i] =
   81882:	f89b 301b 	ldrb.w	r3, [fp, #27]
   81886:	f88b 301f 	strb.w	r3, [fp, #31]
						p_ip_header->ip_src[i];
				p_ip_header->ip_src[i] = gs_uc_ip_address[i];
   8188a:	23a8      	movs	r3, #168	; 0xa8
   8188c:	f88b 301b 	strb.w	r3, [fp, #27]

			p_icmp_echo->cksum = SWAP16(
					emac_icmp_checksum((uint16_t *)p_icmp_echo, ul_icmp_len));
			/* Swap the IP destination  address and the IP source address */
			for (i = 0; i < 4; i++) {
				p_ip_header->ip_dst[i] =
   81890:	f89b 301c 	ldrb.w	r3, [fp, #28]
   81894:	f88b 3020 	strb.w	r3, [fp, #32]
						p_ip_header->ip_src[i];
				p_ip_header->ip_src[i] = gs_uc_ip_address[i];
   81898:	2300      	movs	r3, #0
   8189a:	f88b 301c 	strb.w	r3, [fp, #28]

			p_icmp_echo->cksum = SWAP16(
					emac_icmp_checksum((uint16_t *)p_icmp_echo, ul_icmp_len));
			/* Swap the IP destination  address and the IP source address */
			for (i = 0; i < 4; i++) {
				p_ip_header->ip_dst[i] =
   8189e:	f89b 301d 	ldrb.w	r3, [fp, #29]
   818a2:	f88b 3021 	strb.w	r3, [fp, #33]	; 0x21
						p_ip_header->ip_src[i];
				p_ip_header->ip_src[i] = gs_uc_ip_address[i];
   818a6:	2302      	movs	r3, #2
   818a8:	f88b 301d 	strb.w	r3, [fp, #29]
   818ac:	f10b 0305 	add.w	r3, fp, #5
   818b0:	4a44      	ldr	r2, [pc, #272]	; (819c4 <main+0x51c>)
   818b2:	9d05      	ldr	r5, [sp, #20]
   818b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
			}
			/* Swap ethernet destination address and ethernet source address */
			for (i = 0; i < 6; i++) {
				/* Swap ethernet destination address and ethernet source address */
				p_eth->et_dest[i] = p_eth->et_src[i];
   818b6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   818ba:	f803 1c06 	strb.w	r1, [r3, #-6]
				p_eth->et_src[i] = gs_uc_mac_address[i];
   818be:	f812 1b01 	ldrb.w	r1, [r2], #1
   818c2:	7019      	strb	r1, [r3, #0]
				p_ip_header->ip_dst[i] =
						p_ip_header->ip_src[i];
				p_ip_header->ip_src[i] = gs_uc_ip_address[i];
			}
			/* Swap ethernet destination address and ethernet source address */
			for (i = 0; i < 6; i++) {
   818c4:	4283      	cmp	r3, r0
   818c6:	d1f6      	bne.n	818b6 <main+0x40e>
   818c8:	9505      	str	r5, [sp, #20]
				p_eth->et_dest[i] = p_eth->et_src[i];
				p_eth->et_src[i] = gs_uc_mac_address[i];
			}
			/* Send the echo_reply */
			ul_rc = emac_dev_write(&gs_emac_dev, p_uc_data,
					SWAP16(p_ip_header->ip_len) + 14, NULL);
   818ca:	f8bb 2010 	ldrh.w	r2, [fp, #16]
   818ce:	b292      	uxth	r2, r2
   818d0:	0213      	lsls	r3, r2, #8
   818d2:	b29b      	uxth	r3, r3
   818d4:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
				/* Swap ethernet destination address and ethernet source address */
				p_eth->et_dest[i] = p_eth->et_src[i];
				p_eth->et_src[i] = gs_uc_mac_address[i];
			}
			/* Send the echo_reply */
			ul_rc = emac_dev_write(&gs_emac_dev, p_uc_data,
   818d8:	4648      	mov	r0, r9
   818da:	4659      	mov	r1, fp
   818dc:	320e      	adds	r2, #14
   818de:	2300      	movs	r3, #0
   818e0:	f8df c130 	ldr.w	ip, [pc, #304]	; 81a14 <main+0x56c>
   818e4:	47e0      	blx	ip
					SWAP16(p_ip_header->ip_len) + 14, NULL);
			if (ul_rc != EMAC_OK) {
   818e6:	4601      	mov	r1, r0
   818e8:	b110      	cbz	r0, 818f0 <main+0x448>
				printf("E: ICMP Send - 0x%x\n\r", ul_rc);
   818ea:	4837      	ldr	r0, [pc, #220]	; (819c8 <main+0x520>)
   818ec:	4b34      	ldr	r3, [pc, #208]	; (819c0 <main+0x518>)
   818ee:	4798      	blx	r3
 * \param p_ip_header Pointer to the IP header.
 * \param ul_size    The data size.
 */
static void emac_display_ip_packet(p_ip_header_t p_ip_header, uint32_t ul_size)
{
	printf("======= IP %4d bytes, HEADER ==========\n\r", (int)ul_size);
   818f0:	4836      	ldr	r0, [pc, #216]	; (819cc <main+0x524>)
   818f2:	4621      	mov	r1, r4
   818f4:	4c32      	ldr	r4, [pc, #200]	; (819c0 <main+0x518>)
   818f6:	47a0      	blx	r4
	printf(" IP Version        = v.%d", (p_ip_header->ip_hl_v & 0xF0) >> 4);
   818f8:	4835      	ldr	r0, [pc, #212]	; (819d0 <main+0x528>)
   818fa:	0939      	lsrs	r1, r7, #4
   818fc:	47a0      	blx	r4
	printf("\n\r Header Length     = %d", p_ip_header->ip_hl_v & 0x0F);
   818fe:	4835      	ldr	r0, [pc, #212]	; (819d4 <main+0x52c>)
   81900:	f007 010f 	and.w	r1, r7, #15
   81904:	47a0      	blx	r4
	printf("\n\r Type of service   = 0x%x", p_ip_header->ip_tos);
   81906:	4834      	ldr	r0, [pc, #208]	; (819d8 <main+0x530>)
   81908:	990d      	ldr	r1, [sp, #52]	; 0x34
   8190a:	47a0      	blx	r4
	printf("\n\r Total IP Length   = 0x%X",
			(((p_ip_header->ip_len) >> 8) & 0xff) +
			(((p_ip_header->ip_len) << 8) & 0xff00));
   8190c:	0231      	lsls	r1, r6, #8
   8190e:	b289      	uxth	r1, r1
{
	printf("======= IP %4d bytes, HEADER ==========\n\r", (int)ul_size);
	printf(" IP Version        = v.%d", (p_ip_header->ip_hl_v & 0xF0) >> 4);
	printf("\n\r Header Length     = %d", p_ip_header->ip_hl_v & 0x0F);
	printf("\n\r Type of service   = 0x%x", p_ip_header->ip_tos);
	printf("\n\r Total IP Length   = 0x%X",
   81910:	4832      	ldr	r0, [pc, #200]	; (819dc <main+0x534>)
   81912:	eb01 2116 	add.w	r1, r1, r6, lsr #8
   81916:	47a0      	blx	r4
			(((p_ip_header->ip_len) >> 8) & 0xff) +
			(((p_ip_header->ip_len) << 8) & 0xff00));
	printf("\n\r ID                = 0x%X",
			(((p_ip_header->ip_id) >> 8) & 0xff) +
			(((p_ip_header->ip_id) << 8) & 0xff00));
   81918:	9b05      	ldr	r3, [sp, #20]
   8191a:	0219      	lsls	r1, r3, #8
   8191c:	b289      	uxth	r1, r1
	printf("\n\r Header Length     = %d", p_ip_header->ip_hl_v & 0x0F);
	printf("\n\r Type of service   = 0x%x", p_ip_header->ip_tos);
	printf("\n\r Total IP Length   = 0x%X",
			(((p_ip_header->ip_len) >> 8) & 0xff) +
			(((p_ip_header->ip_len) << 8) & 0xff00));
	printf("\n\r ID                = 0x%X",
   8191e:	4830      	ldr	r0, [pc, #192]	; (819e0 <main+0x538>)
   81920:	eb01 2113 	add.w	r1, r1, r3, lsr #8
   81924:	47a0      	blx	r4
			(((p_ip_header->ip_id) >> 8) & 0xff) +
			(((p_ip_header->ip_id) << 8) & 0xff00));
	printf("\n\r Header Checksum   = 0x%X",
			(((p_ip_header->ip_sum) >> 8) & 0xff) +
			(((p_ip_header->ip_sum) << 8) & 0xff00));
   81926:	ea4f 2108 	mov.w	r1, r8, lsl #8
   8192a:	b289      	uxth	r1, r1
			(((p_ip_header->ip_len) >> 8) & 0xff) +
			(((p_ip_header->ip_len) << 8) & 0xff00));
	printf("\n\r ID                = 0x%X",
			(((p_ip_header->ip_id) >> 8) & 0xff) +
			(((p_ip_header->ip_id) << 8) & 0xff00));
	printf("\n\r Header Checksum   = 0x%X",
   8192c:	482d      	ldr	r0, [pc, #180]	; (819e4 <main+0x53c>)
   8192e:	eb01 2118 	add.w	r1, r1, r8, lsr #8
   81932:	47a0      	blx	r4
			(((p_ip_header->ip_sum) >> 8) & 0xff) +
			(((p_ip_header->ip_sum) << 8) & 0xff00));
	puts("\r Protocol          = ");
   81934:	482c      	ldr	r0, [pc, #176]	; (819e8 <main+0x540>)
   81936:	4b2d      	ldr	r3, [pc, #180]	; (819ec <main+0x544>)
   81938:	4798      	blx	r3

	switch (p_ip_header->ip_p) {
   8193a:	f10a 33ff 	add.w	r3, sl, #4294967295
   8193e:	2b10      	cmp	r3, #16
   81940:	d81a      	bhi.n	81978 <main+0x4d0>
   81942:	e8df f003 	tbb	[pc, r3]
   81946:	1909      	.short	0x1909
   81948:	11190d19 	.word	0x11190d19
   8194c:	19191919 	.word	0x19191919
   81950:	19191919 	.word	0x19191919
   81954:	1919      	.short	0x1919
   81956:	15          	.byte	0x15
   81957:	00          	.byte	0x00
	case IP_PROT_ICMP:
		puts("ICMP");
   81958:	4825      	ldr	r0, [pc, #148]	; (819f0 <main+0x548>)
   8195a:	4b24      	ldr	r3, [pc, #144]	; (819ec <main+0x544>)
   8195c:	4798      	blx	r3
   8195e:	e010      	b.n	81982 <main+0x4da>
		break;

	case IP_PROT_IP:
		puts("IP");
   81960:	4824      	ldr	r0, [pc, #144]	; (819f4 <main+0x54c>)
   81962:	4b22      	ldr	r3, [pc, #136]	; (819ec <main+0x544>)
   81964:	4798      	blx	r3
   81966:	e00c      	b.n	81982 <main+0x4da>
		break;

	case IP_PROT_TCP:
		puts("TCP");
   81968:	4823      	ldr	r0, [pc, #140]	; (819f8 <main+0x550>)
   8196a:	4b20      	ldr	r3, [pc, #128]	; (819ec <main+0x544>)
   8196c:	4798      	blx	r3
   8196e:	e008      	b.n	81982 <main+0x4da>
		break;

	case IP_PROT_UDP:
		puts("UDP");
   81970:	4822      	ldr	r0, [pc, #136]	; (819fc <main+0x554>)
   81972:	4b1e      	ldr	r3, [pc, #120]	; (819ec <main+0x544>)
   81974:	4798      	blx	r3
   81976:	e004      	b.n	81982 <main+0x4da>
		break;

	default:
		printf("%d (0x%X)", p_ip_header->ip_p, p_ip_header->ip_p);
   81978:	4821      	ldr	r0, [pc, #132]	; (81a00 <main+0x558>)
   8197a:	4651      	mov	r1, sl
   8197c:	4652      	mov	r2, sl
   8197e:	4b10      	ldr	r3, [pc, #64]	; (819c0 <main+0x518>)
   81980:	4798      	blx	r3
		break;
	}

	printf("\n\r IP Src Address    = %d:%d:%d:%d",
   81982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81984:	9300      	str	r3, [sp, #0]
   81986:	481f      	ldr	r0, [pc, #124]	; (81a04 <main+0x55c>)
   81988:	9906      	ldr	r1, [sp, #24]
   8198a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8198c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8198e:	4c0c      	ldr	r4, [pc, #48]	; (819c0 <main+0x518>)
   81990:	47a0      	blx	r4
			p_ip_header->ip_src[0],
			p_ip_header->ip_src[1],
			p_ip_header->ip_src[2], p_ip_header->ip_src[3]);

	printf("\n\r IP Dest Address   = %d:%d:%d:%d",
   81992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   81994:	9300      	str	r3, [sp, #0]
   81996:	481c      	ldr	r0, [pc, #112]	; (81a08 <main+0x560>)
   81998:	9909      	ldr	r1, [sp, #36]	; 0x24
   8199a:	9a08      	ldr	r2, [sp, #32]
   8199c:	9b07      	ldr	r3, [sp, #28]
   8199e:	47a0      	blx	r4
			p_ip_header->ip_dst[0],
			p_ip_header->ip_dst[1],
			p_ip_header->ip_dst[2], p_ip_header->ip_dst[3]);
	puts("\n\r----------------------------------------\r");
   819a0:	481a      	ldr	r0, [pc, #104]	; (81a0c <main+0x564>)
   819a2:	4b12      	ldr	r3, [pc, #72]	; (819ec <main+0x544>)
   819a4:	4798      	blx	r3
   819a6:	e61b      	b.n	815e0 <main+0x138>
		/* Dump the IP header */
		emac_display_ip_packet(&ip_header, ul_size);
		break;

	default:
		printf("=== Default w_pkt_format= 0x%X===\n\r", us_pkt_format);
   819a8:	4819      	ldr	r0, [pc, #100]	; (81a10 <main+0x568>)
   819aa:	4b05      	ldr	r3, [pc, #20]	; (819c0 <main+0x518>)
   819ac:	4798      	blx	r3
   819ae:	e617      	b.n	815e0 <main+0x138>
		if (ul_frm_size > 0) {
			/* Handle input frame */
			emac_process_eth_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
		}
	}
}
   819b0:	f04f 30ff 	mov.w	r0, #4294967295
   819b4:	b019      	add	sp, #100	; 0x64
   819b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   819ba:	bf00      	nop
   819bc:	00084a5c 	.word	0x00084a5c
   819c0:	00081a69 	.word	0x00081a69
   819c4:	000849e8 	.word	0x000849e8
   819c8:	00084ae4 	.word	0x00084ae4
   819cc:	00084afc 	.word	0x00084afc
   819d0:	00084b28 	.word	0x00084b28
   819d4:	00084b44 	.word	0x00084b44
   819d8:	00084b60 	.word	0x00084b60
   819dc:	00084b7c 	.word	0x00084b7c
   819e0:	00084b98 	.word	0x00084b98
   819e4:	00084bb4 	.word	0x00084bb4
   819e8:	00084bd0 	.word	0x00084bd0
   819ec:	00081c79 	.word	0x00081c79
   819f0:	00084be8 	.word	0x00084be8
   819f4:	00084bf0 	.word	0x00084bf0
   819f8:	00084bf4 	.word	0x00084bf4
   819fc:	00084bf8 	.word	0x00084bf8
   81a00:	00084bfc 	.word	0x00084bfc
   81a04:	00084c08 	.word	0x00084c08
   81a08:	00084c2c 	.word	0x00084c2c
   81a0c:	00084c50 	.word	0x00084c50
   81a10:	00084c7c 	.word	0x00084c7c
   81a14:	00080ab1 	.word	0x00080ab1

00081a18 <__libc_init_array>:
   81a18:	b570      	push	{r4, r5, r6, lr}
   81a1a:	4e0f      	ldr	r6, [pc, #60]	; (81a58 <__libc_init_array+0x40>)
   81a1c:	4d0f      	ldr	r5, [pc, #60]	; (81a5c <__libc_init_array+0x44>)
   81a1e:	1b76      	subs	r6, r6, r5
   81a20:	10b6      	asrs	r6, r6, #2
   81a22:	bf18      	it	ne
   81a24:	2400      	movne	r4, #0
   81a26:	d005      	beq.n	81a34 <__libc_init_array+0x1c>
   81a28:	3401      	adds	r4, #1
   81a2a:	f855 3b04 	ldr.w	r3, [r5], #4
   81a2e:	4798      	blx	r3
   81a30:	42a6      	cmp	r6, r4
   81a32:	d1f9      	bne.n	81a28 <__libc_init_array+0x10>
   81a34:	4e0a      	ldr	r6, [pc, #40]	; (81a60 <__libc_init_array+0x48>)
   81a36:	4d0b      	ldr	r5, [pc, #44]	; (81a64 <__libc_init_array+0x4c>)
   81a38:	f003 f960 	bl	84cfc <_init>
   81a3c:	1b76      	subs	r6, r6, r5
   81a3e:	10b6      	asrs	r6, r6, #2
   81a40:	bf18      	it	ne
   81a42:	2400      	movne	r4, #0
   81a44:	d006      	beq.n	81a54 <__libc_init_array+0x3c>
   81a46:	3401      	adds	r4, #1
   81a48:	f855 3b04 	ldr.w	r3, [r5], #4
   81a4c:	4798      	blx	r3
   81a4e:	42a6      	cmp	r6, r4
   81a50:	d1f9      	bne.n	81a46 <__libc_init_array+0x2e>
   81a52:	bd70      	pop	{r4, r5, r6, pc}
   81a54:	bd70      	pop	{r4, r5, r6, pc}
   81a56:	bf00      	nop
   81a58:	00084d08 	.word	0x00084d08
   81a5c:	00084d08 	.word	0x00084d08
   81a60:	00084d10 	.word	0x00084d10
   81a64:	00084d08 	.word	0x00084d08

00081a68 <iprintf>:
   81a68:	b40f      	push	{r0, r1, r2, r3}
   81a6a:	b510      	push	{r4, lr}
   81a6c:	4b07      	ldr	r3, [pc, #28]	; (81a8c <iprintf+0x24>)
   81a6e:	b082      	sub	sp, #8
   81a70:	ac04      	add	r4, sp, #16
   81a72:	f854 2b04 	ldr.w	r2, [r4], #4
   81a76:	6818      	ldr	r0, [r3, #0]
   81a78:	4623      	mov	r3, r4
   81a7a:	6881      	ldr	r1, [r0, #8]
   81a7c:	9401      	str	r4, [sp, #4]
   81a7e:	f000 f9f1 	bl	81e64 <_vfiprintf_r>
   81a82:	b002      	add	sp, #8
   81a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81a88:	b004      	add	sp, #16
   81a8a:	4770      	bx	lr
   81a8c:	20070558 	.word	0x20070558

00081a90 <memcpy>:
   81a90:	4684      	mov	ip, r0
   81a92:	ea41 0300 	orr.w	r3, r1, r0
   81a96:	f013 0303 	ands.w	r3, r3, #3
   81a9a:	d149      	bne.n	81b30 <memcpy+0xa0>
   81a9c:	3a40      	subs	r2, #64	; 0x40
   81a9e:	d323      	bcc.n	81ae8 <memcpy+0x58>
   81aa0:	680b      	ldr	r3, [r1, #0]
   81aa2:	6003      	str	r3, [r0, #0]
   81aa4:	684b      	ldr	r3, [r1, #4]
   81aa6:	6043      	str	r3, [r0, #4]
   81aa8:	688b      	ldr	r3, [r1, #8]
   81aaa:	6083      	str	r3, [r0, #8]
   81aac:	68cb      	ldr	r3, [r1, #12]
   81aae:	60c3      	str	r3, [r0, #12]
   81ab0:	690b      	ldr	r3, [r1, #16]
   81ab2:	6103      	str	r3, [r0, #16]
   81ab4:	694b      	ldr	r3, [r1, #20]
   81ab6:	6143      	str	r3, [r0, #20]
   81ab8:	698b      	ldr	r3, [r1, #24]
   81aba:	6183      	str	r3, [r0, #24]
   81abc:	69cb      	ldr	r3, [r1, #28]
   81abe:	61c3      	str	r3, [r0, #28]
   81ac0:	6a0b      	ldr	r3, [r1, #32]
   81ac2:	6203      	str	r3, [r0, #32]
   81ac4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81ac6:	6243      	str	r3, [r0, #36]	; 0x24
   81ac8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81aca:	6283      	str	r3, [r0, #40]	; 0x28
   81acc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81ace:	62c3      	str	r3, [r0, #44]	; 0x2c
   81ad0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81ad2:	6303      	str	r3, [r0, #48]	; 0x30
   81ad4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81ad6:	6343      	str	r3, [r0, #52]	; 0x34
   81ad8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81ada:	6383      	str	r3, [r0, #56]	; 0x38
   81adc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81ade:	63c3      	str	r3, [r0, #60]	; 0x3c
   81ae0:	3040      	adds	r0, #64	; 0x40
   81ae2:	3140      	adds	r1, #64	; 0x40
   81ae4:	3a40      	subs	r2, #64	; 0x40
   81ae6:	d2db      	bcs.n	81aa0 <memcpy+0x10>
   81ae8:	3230      	adds	r2, #48	; 0x30
   81aea:	d30b      	bcc.n	81b04 <memcpy+0x74>
   81aec:	680b      	ldr	r3, [r1, #0]
   81aee:	6003      	str	r3, [r0, #0]
   81af0:	684b      	ldr	r3, [r1, #4]
   81af2:	6043      	str	r3, [r0, #4]
   81af4:	688b      	ldr	r3, [r1, #8]
   81af6:	6083      	str	r3, [r0, #8]
   81af8:	68cb      	ldr	r3, [r1, #12]
   81afa:	60c3      	str	r3, [r0, #12]
   81afc:	3010      	adds	r0, #16
   81afe:	3110      	adds	r1, #16
   81b00:	3a10      	subs	r2, #16
   81b02:	d2f3      	bcs.n	81aec <memcpy+0x5c>
   81b04:	320c      	adds	r2, #12
   81b06:	d305      	bcc.n	81b14 <memcpy+0x84>
   81b08:	f851 3b04 	ldr.w	r3, [r1], #4
   81b0c:	f840 3b04 	str.w	r3, [r0], #4
   81b10:	3a04      	subs	r2, #4
   81b12:	d2f9      	bcs.n	81b08 <memcpy+0x78>
   81b14:	3204      	adds	r2, #4
   81b16:	d008      	beq.n	81b2a <memcpy+0x9a>
   81b18:	07d2      	lsls	r2, r2, #31
   81b1a:	bf1c      	itt	ne
   81b1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81b20:	f800 3b01 	strbne.w	r3, [r0], #1
   81b24:	d301      	bcc.n	81b2a <memcpy+0x9a>
   81b26:	880b      	ldrh	r3, [r1, #0]
   81b28:	8003      	strh	r3, [r0, #0]
   81b2a:	4660      	mov	r0, ip
   81b2c:	4770      	bx	lr
   81b2e:	bf00      	nop
   81b30:	2a08      	cmp	r2, #8
   81b32:	d313      	bcc.n	81b5c <memcpy+0xcc>
   81b34:	078b      	lsls	r3, r1, #30
   81b36:	d0b1      	beq.n	81a9c <memcpy+0xc>
   81b38:	f010 0303 	ands.w	r3, r0, #3
   81b3c:	d0ae      	beq.n	81a9c <memcpy+0xc>
   81b3e:	f1c3 0304 	rsb	r3, r3, #4
   81b42:	1ad2      	subs	r2, r2, r3
   81b44:	07db      	lsls	r3, r3, #31
   81b46:	bf1c      	itt	ne
   81b48:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81b4c:	f800 3b01 	strbne.w	r3, [r0], #1
   81b50:	d3a4      	bcc.n	81a9c <memcpy+0xc>
   81b52:	f831 3b02 	ldrh.w	r3, [r1], #2
   81b56:	f820 3b02 	strh.w	r3, [r0], #2
   81b5a:	e79f      	b.n	81a9c <memcpy+0xc>
   81b5c:	3a04      	subs	r2, #4
   81b5e:	d3d9      	bcc.n	81b14 <memcpy+0x84>
   81b60:	3a01      	subs	r2, #1
   81b62:	f811 3b01 	ldrb.w	r3, [r1], #1
   81b66:	f800 3b01 	strb.w	r3, [r0], #1
   81b6a:	d2f9      	bcs.n	81b60 <memcpy+0xd0>
   81b6c:	780b      	ldrb	r3, [r1, #0]
   81b6e:	7003      	strb	r3, [r0, #0]
   81b70:	784b      	ldrb	r3, [r1, #1]
   81b72:	7043      	strb	r3, [r0, #1]
   81b74:	788b      	ldrb	r3, [r1, #2]
   81b76:	7083      	strb	r3, [r0, #2]
   81b78:	4660      	mov	r0, ip
   81b7a:	4770      	bx	lr

00081b7c <memset>:
   81b7c:	b470      	push	{r4, r5, r6}
   81b7e:	0784      	lsls	r4, r0, #30
   81b80:	d046      	beq.n	81c10 <memset+0x94>
   81b82:	1e54      	subs	r4, r2, #1
   81b84:	2a00      	cmp	r2, #0
   81b86:	d041      	beq.n	81c0c <memset+0x90>
   81b88:	b2cd      	uxtb	r5, r1
   81b8a:	4603      	mov	r3, r0
   81b8c:	e002      	b.n	81b94 <memset+0x18>
   81b8e:	1e62      	subs	r2, r4, #1
   81b90:	b3e4      	cbz	r4, 81c0c <memset+0x90>
   81b92:	4614      	mov	r4, r2
   81b94:	f803 5b01 	strb.w	r5, [r3], #1
   81b98:	079a      	lsls	r2, r3, #30
   81b9a:	d1f8      	bne.n	81b8e <memset+0x12>
   81b9c:	2c03      	cmp	r4, #3
   81b9e:	d92e      	bls.n	81bfe <memset+0x82>
   81ba0:	b2cd      	uxtb	r5, r1
   81ba2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81ba6:	2c0f      	cmp	r4, #15
   81ba8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81bac:	d919      	bls.n	81be2 <memset+0x66>
   81bae:	4626      	mov	r6, r4
   81bb0:	f103 0210 	add.w	r2, r3, #16
   81bb4:	3e10      	subs	r6, #16
   81bb6:	2e0f      	cmp	r6, #15
   81bb8:	f842 5c10 	str.w	r5, [r2, #-16]
   81bbc:	f842 5c0c 	str.w	r5, [r2, #-12]
   81bc0:	f842 5c08 	str.w	r5, [r2, #-8]
   81bc4:	f842 5c04 	str.w	r5, [r2, #-4]
   81bc8:	f102 0210 	add.w	r2, r2, #16
   81bcc:	d8f2      	bhi.n	81bb4 <memset+0x38>
   81bce:	f1a4 0210 	sub.w	r2, r4, #16
   81bd2:	f022 020f 	bic.w	r2, r2, #15
   81bd6:	f004 040f 	and.w	r4, r4, #15
   81bda:	3210      	adds	r2, #16
   81bdc:	2c03      	cmp	r4, #3
   81bde:	4413      	add	r3, r2
   81be0:	d90d      	bls.n	81bfe <memset+0x82>
   81be2:	461e      	mov	r6, r3
   81be4:	4622      	mov	r2, r4
   81be6:	3a04      	subs	r2, #4
   81be8:	2a03      	cmp	r2, #3
   81bea:	f846 5b04 	str.w	r5, [r6], #4
   81bee:	d8fa      	bhi.n	81be6 <memset+0x6a>
   81bf0:	1f22      	subs	r2, r4, #4
   81bf2:	f022 0203 	bic.w	r2, r2, #3
   81bf6:	3204      	adds	r2, #4
   81bf8:	4413      	add	r3, r2
   81bfa:	f004 0403 	and.w	r4, r4, #3
   81bfe:	b12c      	cbz	r4, 81c0c <memset+0x90>
   81c00:	b2c9      	uxtb	r1, r1
   81c02:	441c      	add	r4, r3
   81c04:	f803 1b01 	strb.w	r1, [r3], #1
   81c08:	42a3      	cmp	r3, r4
   81c0a:	d1fb      	bne.n	81c04 <memset+0x88>
   81c0c:	bc70      	pop	{r4, r5, r6}
   81c0e:	4770      	bx	lr
   81c10:	4614      	mov	r4, r2
   81c12:	4603      	mov	r3, r0
   81c14:	e7c2      	b.n	81b9c <memset+0x20>
   81c16:	bf00      	nop

00081c18 <_puts_r>:
   81c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   81c1a:	4604      	mov	r4, r0
   81c1c:	b089      	sub	sp, #36	; 0x24
   81c1e:	4608      	mov	r0, r1
   81c20:	460d      	mov	r5, r1
   81c22:	f000 f8b5 	bl	81d90 <strlen>
   81c26:	68a3      	ldr	r3, [r4, #8]
   81c28:	2102      	movs	r1, #2
   81c2a:	899a      	ldrh	r2, [r3, #12]
   81c2c:	f8df e044 	ldr.w	lr, [pc, #68]	; 81c74 <_puts_r+0x5c>
   81c30:	f100 0c01 	add.w	ip, r0, #1
   81c34:	2701      	movs	r7, #1
   81c36:	ae04      	add	r6, sp, #16
   81c38:	9102      	str	r1, [sp, #8]
   81c3a:	0491      	lsls	r1, r2, #18
   81c3c:	9504      	str	r5, [sp, #16]
   81c3e:	9005      	str	r0, [sp, #20]
   81c40:	f8cd c00c 	str.w	ip, [sp, #12]
   81c44:	f8cd e018 	str.w	lr, [sp, #24]
   81c48:	9707      	str	r7, [sp, #28]
   81c4a:	9601      	str	r6, [sp, #4]
   81c4c:	d406      	bmi.n	81c5c <_puts_r+0x44>
   81c4e:	6e59      	ldr	r1, [r3, #100]	; 0x64
   81c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   81c54:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   81c58:	819a      	strh	r2, [r3, #12]
   81c5a:	6659      	str	r1, [r3, #100]	; 0x64
   81c5c:	4620      	mov	r0, r4
   81c5e:	4619      	mov	r1, r3
   81c60:	aa01      	add	r2, sp, #4
   81c62:	f001 fa9f 	bl	831a4 <__sfvwrite_r>
   81c66:	2800      	cmp	r0, #0
   81c68:	bf14      	ite	ne
   81c6a:	f04f 30ff 	movne.w	r0, #4294967295
   81c6e:	200a      	moveq	r0, #10
   81c70:	b009      	add	sp, #36	; 0x24
   81c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81c74:	00084ca8 	.word	0x00084ca8

00081c78 <puts>:
   81c78:	4b02      	ldr	r3, [pc, #8]	; (81c84 <puts+0xc>)
   81c7a:	4601      	mov	r1, r0
   81c7c:	6818      	ldr	r0, [r3, #0]
   81c7e:	f7ff bfcb 	b.w	81c18 <_puts_r>
   81c82:	bf00      	nop
   81c84:	20070558 	.word	0x20070558

00081c88 <setbuf>:
   81c88:	2900      	cmp	r1, #0
   81c8a:	bf0c      	ite	eq
   81c8c:	2202      	moveq	r2, #2
   81c8e:	2200      	movne	r2, #0
   81c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81c94:	f000 b800 	b.w	81c98 <setvbuf>

00081c98 <setvbuf>:
   81c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c9c:	4d3a      	ldr	r5, [pc, #232]	; (81d88 <setvbuf+0xf0>)
   81c9e:	4604      	mov	r4, r0
   81ca0:	682e      	ldr	r6, [r5, #0]
   81ca2:	4690      	mov	r8, r2
   81ca4:	460d      	mov	r5, r1
   81ca6:	461f      	mov	r7, r3
   81ca8:	b116      	cbz	r6, 81cb0 <setvbuf+0x18>
   81caa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   81cac:	2b00      	cmp	r3, #0
   81cae:	d03c      	beq.n	81d2a <setvbuf+0x92>
   81cb0:	f1b8 0f02 	cmp.w	r8, #2
   81cb4:	d82f      	bhi.n	81d16 <setvbuf+0x7e>
   81cb6:	2f00      	cmp	r7, #0
   81cb8:	db2d      	blt.n	81d16 <setvbuf+0x7e>
   81cba:	4621      	mov	r1, r4
   81cbc:	4630      	mov	r0, r6
   81cbe:	f001 f82d 	bl	82d1c <_fflush_r>
   81cc2:	89a1      	ldrh	r1, [r4, #12]
   81cc4:	2300      	movs	r3, #0
   81cc6:	6063      	str	r3, [r4, #4]
   81cc8:	61a3      	str	r3, [r4, #24]
   81cca:	060b      	lsls	r3, r1, #24
   81ccc:	d427      	bmi.n	81d1e <setvbuf+0x86>
   81cce:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   81cd2:	b289      	uxth	r1, r1
   81cd4:	f1b8 0f02 	cmp.w	r8, #2
   81cd8:	81a1      	strh	r1, [r4, #12]
   81cda:	d02a      	beq.n	81d32 <setvbuf+0x9a>
   81cdc:	2d00      	cmp	r5, #0
   81cde:	d036      	beq.n	81d4e <setvbuf+0xb6>
   81ce0:	f1b8 0f01 	cmp.w	r8, #1
   81ce4:	d011      	beq.n	81d0a <setvbuf+0x72>
   81ce6:	b289      	uxth	r1, r1
   81ce8:	f001 0008 	and.w	r0, r1, #8
   81cec:	4b27      	ldr	r3, [pc, #156]	; (81d8c <setvbuf+0xf4>)
   81cee:	b280      	uxth	r0, r0
   81cf0:	63f3      	str	r3, [r6, #60]	; 0x3c
   81cf2:	6025      	str	r5, [r4, #0]
   81cf4:	6125      	str	r5, [r4, #16]
   81cf6:	6167      	str	r7, [r4, #20]
   81cf8:	b178      	cbz	r0, 81d1a <setvbuf+0x82>
   81cfa:	f011 0f03 	tst.w	r1, #3
   81cfe:	bf18      	it	ne
   81d00:	2700      	movne	r7, #0
   81d02:	2000      	movs	r0, #0
   81d04:	60a7      	str	r7, [r4, #8]
   81d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d0a:	f041 0101 	orr.w	r1, r1, #1
   81d0e:	427b      	negs	r3, r7
   81d10:	81a1      	strh	r1, [r4, #12]
   81d12:	61a3      	str	r3, [r4, #24]
   81d14:	e7e7      	b.n	81ce6 <setvbuf+0x4e>
   81d16:	f04f 30ff 	mov.w	r0, #4294967295
   81d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d1e:	6921      	ldr	r1, [r4, #16]
   81d20:	4630      	mov	r0, r6
   81d22:	f001 f967 	bl	82ff4 <_free_r>
   81d26:	89a1      	ldrh	r1, [r4, #12]
   81d28:	e7d1      	b.n	81cce <setvbuf+0x36>
   81d2a:	4630      	mov	r0, r6
   81d2c:	f001 f88a 	bl	82e44 <__sinit>
   81d30:	e7be      	b.n	81cb0 <setvbuf+0x18>
   81d32:	2000      	movs	r0, #0
   81d34:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81d38:	f041 0102 	orr.w	r1, r1, #2
   81d3c:	2500      	movs	r5, #0
   81d3e:	2201      	movs	r2, #1
   81d40:	81a1      	strh	r1, [r4, #12]
   81d42:	60a5      	str	r5, [r4, #8]
   81d44:	6023      	str	r3, [r4, #0]
   81d46:	6123      	str	r3, [r4, #16]
   81d48:	6162      	str	r2, [r4, #20]
   81d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d4e:	2f00      	cmp	r7, #0
   81d50:	bf08      	it	eq
   81d52:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81d56:	4638      	mov	r0, r7
   81d58:	f001 fc56 	bl	83608 <malloc>
   81d5c:	4605      	mov	r5, r0
   81d5e:	b128      	cbz	r0, 81d6c <setvbuf+0xd4>
   81d60:	89a1      	ldrh	r1, [r4, #12]
   81d62:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   81d66:	b289      	uxth	r1, r1
   81d68:	81a1      	strh	r1, [r4, #12]
   81d6a:	e7b9      	b.n	81ce0 <setvbuf+0x48>
   81d6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81d70:	f001 fc4a 	bl	83608 <malloc>
   81d74:	4605      	mov	r5, r0
   81d76:	b918      	cbnz	r0, 81d80 <setvbuf+0xe8>
   81d78:	89a1      	ldrh	r1, [r4, #12]
   81d7a:	f04f 30ff 	mov.w	r0, #4294967295
   81d7e:	e7d9      	b.n	81d34 <setvbuf+0x9c>
   81d80:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81d84:	e7ec      	b.n	81d60 <setvbuf+0xc8>
   81d86:	bf00      	nop
   81d88:	20070558 	.word	0x20070558
   81d8c:	00082d49 	.word	0x00082d49

00081d90 <strlen>:
   81d90:	f020 0103 	bic.w	r1, r0, #3
   81d94:	f010 0003 	ands.w	r0, r0, #3
   81d98:	f1c0 0000 	rsb	r0, r0, #0
   81d9c:	f851 3b04 	ldr.w	r3, [r1], #4
   81da0:	f100 0c04 	add.w	ip, r0, #4
   81da4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81da8:	f06f 0200 	mvn.w	r2, #0
   81dac:	bf1c      	itt	ne
   81dae:	fa22 f20c 	lsrne.w	r2, r2, ip
   81db2:	4313      	orrne	r3, r2
   81db4:	f04f 0c01 	mov.w	ip, #1
   81db8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81dbc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81dc0:	eba3 020c 	sub.w	r2, r3, ip
   81dc4:	ea22 0203 	bic.w	r2, r2, r3
   81dc8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81dcc:	bf04      	itt	eq
   81dce:	f851 3b04 	ldreq.w	r3, [r1], #4
   81dd2:	3004      	addeq	r0, #4
   81dd4:	d0f4      	beq.n	81dc0 <strlen+0x30>
   81dd6:	f1c2 0100 	rsb	r1, r2, #0
   81dda:	ea02 0201 	and.w	r2, r2, r1
   81dde:	fab2 f282 	clz	r2, r2
   81de2:	f1c2 021f 	rsb	r2, r2, #31
   81de6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   81dea:	4770      	bx	lr

00081dec <__sprint_r.part.0>:
   81dec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81df2:	049c      	lsls	r4, r3, #18
   81df4:	460f      	mov	r7, r1
   81df6:	4692      	mov	sl, r2
   81df8:	d52b      	bpl.n	81e52 <__sprint_r.part.0+0x66>
   81dfa:	6893      	ldr	r3, [r2, #8]
   81dfc:	6812      	ldr	r2, [r2, #0]
   81dfe:	b333      	cbz	r3, 81e4e <__sprint_r.part.0+0x62>
   81e00:	4680      	mov	r8, r0
   81e02:	f102 0908 	add.w	r9, r2, #8
   81e06:	e919 0060 	ldmdb	r9, {r5, r6}
   81e0a:	08b6      	lsrs	r6, r6, #2
   81e0c:	d017      	beq.n	81e3e <__sprint_r.part.0+0x52>
   81e0e:	3d04      	subs	r5, #4
   81e10:	2400      	movs	r4, #0
   81e12:	e001      	b.n	81e18 <__sprint_r.part.0+0x2c>
   81e14:	42a6      	cmp	r6, r4
   81e16:	d010      	beq.n	81e3a <__sprint_r.part.0+0x4e>
   81e18:	4640      	mov	r0, r8
   81e1a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81e1e:	463a      	mov	r2, r7
   81e20:	f001 f888 	bl	82f34 <_fputwc_r>
   81e24:	1c43      	adds	r3, r0, #1
   81e26:	f104 0401 	add.w	r4, r4, #1
   81e2a:	d1f3      	bne.n	81e14 <__sprint_r.part.0+0x28>
   81e2c:	2300      	movs	r3, #0
   81e2e:	f8ca 3008 	str.w	r3, [sl, #8]
   81e32:	f8ca 3004 	str.w	r3, [sl, #4]
   81e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81e3a:	f8da 3008 	ldr.w	r3, [sl, #8]
   81e3e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   81e42:	f8ca 3008 	str.w	r3, [sl, #8]
   81e46:	f109 0908 	add.w	r9, r9, #8
   81e4a:	2b00      	cmp	r3, #0
   81e4c:	d1db      	bne.n	81e06 <__sprint_r.part.0+0x1a>
   81e4e:	2000      	movs	r0, #0
   81e50:	e7ec      	b.n	81e2c <__sprint_r.part.0+0x40>
   81e52:	f001 f9a7 	bl	831a4 <__sfvwrite_r>
   81e56:	2300      	movs	r3, #0
   81e58:	f8ca 3008 	str.w	r3, [sl, #8]
   81e5c:	f8ca 3004 	str.w	r3, [sl, #4]
   81e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081e64 <_vfiprintf_r>:
   81e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e68:	b0ab      	sub	sp, #172	; 0xac
   81e6a:	461c      	mov	r4, r3
   81e6c:	9100      	str	r1, [sp, #0]
   81e6e:	4693      	mov	fp, r2
   81e70:	9304      	str	r3, [sp, #16]
   81e72:	9001      	str	r0, [sp, #4]
   81e74:	b118      	cbz	r0, 81e7e <_vfiprintf_r+0x1a>
   81e76:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81e78:	2b00      	cmp	r3, #0
   81e7a:	f000 80e3 	beq.w	82044 <_vfiprintf_r+0x1e0>
   81e7e:	9b00      	ldr	r3, [sp, #0]
   81e80:	8999      	ldrh	r1, [r3, #12]
   81e82:	b28a      	uxth	r2, r1
   81e84:	0490      	lsls	r0, r2, #18
   81e86:	d408      	bmi.n	81e9a <_vfiprintf_r+0x36>
   81e88:	4618      	mov	r0, r3
   81e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   81e8c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   81e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81e94:	8182      	strh	r2, [r0, #12]
   81e96:	6643      	str	r3, [r0, #100]	; 0x64
   81e98:	b292      	uxth	r2, r2
   81e9a:	0711      	lsls	r1, r2, #28
   81e9c:	f140 80b2 	bpl.w	82004 <_vfiprintf_r+0x1a0>
   81ea0:	9b00      	ldr	r3, [sp, #0]
   81ea2:	691b      	ldr	r3, [r3, #16]
   81ea4:	2b00      	cmp	r3, #0
   81ea6:	f000 80ad 	beq.w	82004 <_vfiprintf_r+0x1a0>
   81eaa:	f002 021a 	and.w	r2, r2, #26
   81eae:	2a0a      	cmp	r2, #10
   81eb0:	f000 80b4 	beq.w	8201c <_vfiprintf_r+0x1b8>
   81eb4:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   81eb8:	4654      	mov	r4, sl
   81eba:	2300      	movs	r3, #0
   81ebc:	9309      	str	r3, [sp, #36]	; 0x24
   81ebe:	9302      	str	r3, [sp, #8]
   81ec0:	930f      	str	r3, [sp, #60]	; 0x3c
   81ec2:	930e      	str	r3, [sp, #56]	; 0x38
   81ec4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   81ec8:	f89b 3000 	ldrb.w	r3, [fp]
   81ecc:	2b00      	cmp	r3, #0
   81ece:	f000 84a3 	beq.w	82818 <_vfiprintf_r+0x9b4>
   81ed2:	2b25      	cmp	r3, #37	; 0x25
   81ed4:	f000 84a0 	beq.w	82818 <_vfiprintf_r+0x9b4>
   81ed8:	465a      	mov	r2, fp
   81eda:	e001      	b.n	81ee0 <_vfiprintf_r+0x7c>
   81edc:	2b25      	cmp	r3, #37	; 0x25
   81ede:	d003      	beq.n	81ee8 <_vfiprintf_r+0x84>
   81ee0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   81ee4:	2b00      	cmp	r3, #0
   81ee6:	d1f9      	bne.n	81edc <_vfiprintf_r+0x78>
   81ee8:	ebcb 0602 	rsb	r6, fp, r2
   81eec:	4615      	mov	r5, r2
   81eee:	b196      	cbz	r6, 81f16 <_vfiprintf_r+0xb2>
   81ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   81ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81ef4:	3301      	adds	r3, #1
   81ef6:	4432      	add	r2, r6
   81ef8:	2b07      	cmp	r3, #7
   81efa:	f8c4 b000 	str.w	fp, [r4]
   81efe:	6066      	str	r6, [r4, #4]
   81f00:	920f      	str	r2, [sp, #60]	; 0x3c
   81f02:	930e      	str	r3, [sp, #56]	; 0x38
   81f04:	dd79      	ble.n	81ffa <_vfiprintf_r+0x196>
   81f06:	2a00      	cmp	r2, #0
   81f08:	f040 84ad 	bne.w	82866 <_vfiprintf_r+0xa02>
   81f0c:	4654      	mov	r4, sl
   81f0e:	9b02      	ldr	r3, [sp, #8]
   81f10:	920e      	str	r2, [sp, #56]	; 0x38
   81f12:	4433      	add	r3, r6
   81f14:	9302      	str	r3, [sp, #8]
   81f16:	782b      	ldrb	r3, [r5, #0]
   81f18:	2b00      	cmp	r3, #0
   81f1a:	f000 835f 	beq.w	825dc <_vfiprintf_r+0x778>
   81f1e:	f04f 0300 	mov.w	r3, #0
   81f22:	2100      	movs	r1, #0
   81f24:	f04f 3cff 	mov.w	ip, #4294967295
   81f28:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   81f2c:	1c68      	adds	r0, r5, #1
   81f2e:	786b      	ldrb	r3, [r5, #1]
   81f30:	4688      	mov	r8, r1
   81f32:	460d      	mov	r5, r1
   81f34:	4666      	mov	r6, ip
   81f36:	f100 0b01 	add.w	fp, r0, #1
   81f3a:	f1a3 0220 	sub.w	r2, r3, #32
   81f3e:	2a58      	cmp	r2, #88	; 0x58
   81f40:	f200 82aa 	bhi.w	82498 <_vfiprintf_r+0x634>
   81f44:	e8df f012 	tbh	[pc, r2, lsl #1]
   81f48:	02a8029a 	.word	0x02a8029a
   81f4c:	02a202a8 	.word	0x02a202a8
   81f50:	02a802a8 	.word	0x02a802a8
   81f54:	02a802a8 	.word	0x02a802a8
   81f58:	02a802a8 	.word	0x02a802a8
   81f5c:	02600254 	.word	0x02600254
   81f60:	010d02a8 	.word	0x010d02a8
   81f64:	02a8026c 	.word	0x02a8026c
   81f68:	012f0129 	.word	0x012f0129
   81f6c:	012f012f 	.word	0x012f012f
   81f70:	012f012f 	.word	0x012f012f
   81f74:	012f012f 	.word	0x012f012f
   81f78:	012f012f 	.word	0x012f012f
   81f7c:	02a802a8 	.word	0x02a802a8
   81f80:	02a802a8 	.word	0x02a802a8
   81f84:	02a802a8 	.word	0x02a802a8
   81f88:	02a802a8 	.word	0x02a802a8
   81f8c:	02a802a8 	.word	0x02a802a8
   81f90:	02a8013d 	.word	0x02a8013d
   81f94:	02a802a8 	.word	0x02a802a8
   81f98:	02a802a8 	.word	0x02a802a8
   81f9c:	02a802a8 	.word	0x02a802a8
   81fa0:	02a802a8 	.word	0x02a802a8
   81fa4:	017402a8 	.word	0x017402a8
   81fa8:	02a802a8 	.word	0x02a802a8
   81fac:	02a802a8 	.word	0x02a802a8
   81fb0:	018b02a8 	.word	0x018b02a8
   81fb4:	02a802a8 	.word	0x02a802a8
   81fb8:	02a801a3 	.word	0x02a801a3
   81fbc:	02a802a8 	.word	0x02a802a8
   81fc0:	02a802a8 	.word	0x02a802a8
   81fc4:	02a802a8 	.word	0x02a802a8
   81fc8:	02a802a8 	.word	0x02a802a8
   81fcc:	01c702a8 	.word	0x01c702a8
   81fd0:	02a801da 	.word	0x02a801da
   81fd4:	02a802a8 	.word	0x02a802a8
   81fd8:	01da0123 	.word	0x01da0123
   81fdc:	02a802a8 	.word	0x02a802a8
   81fe0:	02a8024b 	.word	0x02a8024b
   81fe4:	01130288 	.word	0x01130288
   81fe8:	020701f4 	.word	0x020701f4
   81fec:	020d02a8 	.word	0x020d02a8
   81ff0:	008102a8 	.word	0x008102a8
   81ff4:	02a802a8 	.word	0x02a802a8
   81ff8:	0232      	.short	0x0232
   81ffa:	3408      	adds	r4, #8
   81ffc:	9b02      	ldr	r3, [sp, #8]
   81ffe:	4433      	add	r3, r6
   82000:	9302      	str	r3, [sp, #8]
   82002:	e788      	b.n	81f16 <_vfiprintf_r+0xb2>
   82004:	9801      	ldr	r0, [sp, #4]
   82006:	9900      	ldr	r1, [sp, #0]
   82008:	f000 fd72 	bl	82af0 <__swsetup_r>
   8200c:	b9a8      	cbnz	r0, 8203a <_vfiprintf_r+0x1d6>
   8200e:	9b00      	ldr	r3, [sp, #0]
   82010:	899a      	ldrh	r2, [r3, #12]
   82012:	f002 021a 	and.w	r2, r2, #26
   82016:	2a0a      	cmp	r2, #10
   82018:	f47f af4c 	bne.w	81eb4 <_vfiprintf_r+0x50>
   8201c:	9b00      	ldr	r3, [sp, #0]
   8201e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   82022:	2b00      	cmp	r3, #0
   82024:	f6ff af46 	blt.w	81eb4 <_vfiprintf_r+0x50>
   82028:	9801      	ldr	r0, [sp, #4]
   8202a:	9900      	ldr	r1, [sp, #0]
   8202c:	465a      	mov	r2, fp
   8202e:	4623      	mov	r3, r4
   82030:	f000 fd20 	bl	82a74 <__sbprintf>
   82034:	b02b      	add	sp, #172	; 0xac
   82036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8203a:	f04f 30ff 	mov.w	r0, #4294967295
   8203e:	b02b      	add	sp, #172	; 0xac
   82040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82044:	f000 fefe 	bl	82e44 <__sinit>
   82048:	e719      	b.n	81e7e <_vfiprintf_r+0x1a>
   8204a:	f018 0f20 	tst.w	r8, #32
   8204e:	9503      	str	r5, [sp, #12]
   82050:	46b4      	mov	ip, r6
   82052:	f000 810c 	beq.w	8226e <_vfiprintf_r+0x40a>
   82056:	9b04      	ldr	r3, [sp, #16]
   82058:	3307      	adds	r3, #7
   8205a:	f023 0307 	bic.w	r3, r3, #7
   8205e:	f103 0208 	add.w	r2, r3, #8
   82062:	e9d3 6700 	ldrd	r6, r7, [r3]
   82066:	9204      	str	r2, [sp, #16]
   82068:	2301      	movs	r3, #1
   8206a:	f04f 0200 	mov.w	r2, #0
   8206e:	46e1      	mov	r9, ip
   82070:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   82074:	2500      	movs	r5, #0
   82076:	f1bc 0f00 	cmp.w	ip, #0
   8207a:	bfa8      	it	ge
   8207c:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   82080:	ea56 0207 	orrs.w	r2, r6, r7
   82084:	f040 80c4 	bne.w	82210 <_vfiprintf_r+0x3ac>
   82088:	f1bc 0f00 	cmp.w	ip, #0
   8208c:	f000 8380 	beq.w	82790 <_vfiprintf_r+0x92c>
   82090:	2b01      	cmp	r3, #1
   82092:	f000 80c5 	beq.w	82220 <_vfiprintf_r+0x3bc>
   82096:	2b02      	cmp	r3, #2
   82098:	f000 8386 	beq.w	827a8 <_vfiprintf_r+0x944>
   8209c:	4651      	mov	r1, sl
   8209e:	08f2      	lsrs	r2, r6, #3
   820a0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   820a4:	08f8      	lsrs	r0, r7, #3
   820a6:	f006 0307 	and.w	r3, r6, #7
   820aa:	4607      	mov	r7, r0
   820ac:	4616      	mov	r6, r2
   820ae:	3330      	adds	r3, #48	; 0x30
   820b0:	ea56 0207 	orrs.w	r2, r6, r7
   820b4:	f801 3d01 	strb.w	r3, [r1, #-1]!
   820b8:	d1f1      	bne.n	8209e <_vfiprintf_r+0x23a>
   820ba:	f018 0f01 	tst.w	r8, #1
   820be:	9107      	str	r1, [sp, #28]
   820c0:	f040 83fa 	bne.w	828b8 <_vfiprintf_r+0xa54>
   820c4:	ebc1 090a 	rsb	r9, r1, sl
   820c8:	45e1      	cmp	r9, ip
   820ca:	464e      	mov	r6, r9
   820cc:	bfb8      	it	lt
   820ce:	4666      	movlt	r6, ip
   820d0:	b105      	cbz	r5, 820d4 <_vfiprintf_r+0x270>
   820d2:	3601      	adds	r6, #1
   820d4:	f018 0302 	ands.w	r3, r8, #2
   820d8:	9305      	str	r3, [sp, #20]
   820da:	bf18      	it	ne
   820dc:	3602      	addne	r6, #2
   820de:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   820e2:	9306      	str	r3, [sp, #24]
   820e4:	f040 81f9 	bne.w	824da <_vfiprintf_r+0x676>
   820e8:	9b03      	ldr	r3, [sp, #12]
   820ea:	1b9d      	subs	r5, r3, r6
   820ec:	2d00      	cmp	r5, #0
   820ee:	f340 81f4 	ble.w	824da <_vfiprintf_r+0x676>
   820f2:	2d10      	cmp	r5, #16
   820f4:	f340 848a 	ble.w	82a0c <_vfiprintf_r+0xba8>
   820f8:	4620      	mov	r0, r4
   820fa:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   820fe:	4664      	mov	r4, ip
   82100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82102:	4fc4      	ldr	r7, [pc, #784]	; (82414 <_vfiprintf_r+0x5b0>)
   82104:	2310      	movs	r3, #16
   82106:	4671      	mov	r1, lr
   82108:	4684      	mov	ip, r0
   8210a:	e007      	b.n	8211c <_vfiprintf_r+0x2b8>
   8210c:	f101 0e02 	add.w	lr, r1, #2
   82110:	4601      	mov	r1, r0
   82112:	f10c 0c08 	add.w	ip, ip, #8
   82116:	3d10      	subs	r5, #16
   82118:	2d10      	cmp	r5, #16
   8211a:	dd13      	ble.n	82144 <_vfiprintf_r+0x2e0>
   8211c:	1c48      	adds	r0, r1, #1
   8211e:	3210      	adds	r2, #16
   82120:	2807      	cmp	r0, #7
   82122:	920f      	str	r2, [sp, #60]	; 0x3c
   82124:	f8cc 7000 	str.w	r7, [ip]
   82128:	f8cc 3004 	str.w	r3, [ip, #4]
   8212c:	900e      	str	r0, [sp, #56]	; 0x38
   8212e:	dded      	ble.n	8210c <_vfiprintf_r+0x2a8>
   82130:	2a00      	cmp	r2, #0
   82132:	f040 81c2 	bne.w	824ba <_vfiprintf_r+0x656>
   82136:	3d10      	subs	r5, #16
   82138:	2d10      	cmp	r5, #16
   8213a:	4611      	mov	r1, r2
   8213c:	f04f 0e01 	mov.w	lr, #1
   82140:	46d4      	mov	ip, sl
   82142:	dceb      	bgt.n	8211c <_vfiprintf_r+0x2b8>
   82144:	4663      	mov	r3, ip
   82146:	4671      	mov	r1, lr
   82148:	46a4      	mov	ip, r4
   8214a:	461c      	mov	r4, r3
   8214c:	442a      	add	r2, r5
   8214e:	2907      	cmp	r1, #7
   82150:	920f      	str	r2, [sp, #60]	; 0x3c
   82152:	6027      	str	r7, [r4, #0]
   82154:	6065      	str	r5, [r4, #4]
   82156:	910e      	str	r1, [sp, #56]	; 0x38
   82158:	f300 8346 	bgt.w	827e8 <_vfiprintf_r+0x984>
   8215c:	3408      	adds	r4, #8
   8215e:	1c48      	adds	r0, r1, #1
   82160:	e1be      	b.n	824e0 <_vfiprintf_r+0x67c>
   82162:	4658      	mov	r0, fp
   82164:	f048 0804 	orr.w	r8, r8, #4
   82168:	f89b 3000 	ldrb.w	r3, [fp]
   8216c:	e6e3      	b.n	81f36 <_vfiprintf_r+0xd2>
   8216e:	f018 0320 	ands.w	r3, r8, #32
   82172:	9503      	str	r5, [sp, #12]
   82174:	46b4      	mov	ip, r6
   82176:	d062      	beq.n	8223e <_vfiprintf_r+0x3da>
   82178:	9b04      	ldr	r3, [sp, #16]
   8217a:	3307      	adds	r3, #7
   8217c:	f023 0307 	bic.w	r3, r3, #7
   82180:	f103 0208 	add.w	r2, r3, #8
   82184:	e9d3 6700 	ldrd	r6, r7, [r3]
   82188:	9204      	str	r2, [sp, #16]
   8218a:	2300      	movs	r3, #0
   8218c:	e76d      	b.n	8206a <_vfiprintf_r+0x206>
   8218e:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   82192:	f89b 3000 	ldrb.w	r3, [fp]
   82196:	4658      	mov	r0, fp
   82198:	e6cd      	b.n	81f36 <_vfiprintf_r+0xd2>
   8219a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   8219e:	f89b 3000 	ldrb.w	r3, [fp]
   821a2:	4658      	mov	r0, fp
   821a4:	e6c7      	b.n	81f36 <_vfiprintf_r+0xd2>
   821a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   821aa:	2500      	movs	r5, #0
   821ac:	f81b 3b01 	ldrb.w	r3, [fp], #1
   821b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   821b4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   821b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   821bc:	2a09      	cmp	r2, #9
   821be:	d9f5      	bls.n	821ac <_vfiprintf_r+0x348>
   821c0:	e6bb      	b.n	81f3a <_vfiprintf_r+0xd6>
   821c2:	f048 0810 	orr.w	r8, r8, #16
   821c6:	f018 0f20 	tst.w	r8, #32
   821ca:	9503      	str	r5, [sp, #12]
   821cc:	46b4      	mov	ip, r6
   821ce:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   821d2:	f000 809b 	beq.w	8230c <_vfiprintf_r+0x4a8>
   821d6:	9904      	ldr	r1, [sp, #16]
   821d8:	3107      	adds	r1, #7
   821da:	f021 0107 	bic.w	r1, r1, #7
   821de:	e9d1 2300 	ldrd	r2, r3, [r1]
   821e2:	4616      	mov	r6, r2
   821e4:	461f      	mov	r7, r3
   821e6:	3108      	adds	r1, #8
   821e8:	9104      	str	r1, [sp, #16]
   821ea:	2a00      	cmp	r2, #0
   821ec:	f173 0300 	sbcs.w	r3, r3, #0
   821f0:	f2c0 83a4 	blt.w	8293c <_vfiprintf_r+0xad8>
   821f4:	f1bc 0f00 	cmp.w	ip, #0
   821f8:	bfa8      	it	ge
   821fa:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   821fe:	ea56 0207 	orrs.w	r2, r6, r7
   82202:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   82206:	46e1      	mov	r9, ip
   82208:	f04f 0301 	mov.w	r3, #1
   8220c:	f43f af3c 	beq.w	82088 <_vfiprintf_r+0x224>
   82210:	2b01      	cmp	r3, #1
   82212:	f47f af40 	bne.w	82096 <_vfiprintf_r+0x232>
   82216:	2f00      	cmp	r7, #0
   82218:	bf08      	it	eq
   8221a:	2e0a      	cmpeq	r6, #10
   8221c:	f080 8332 	bcs.w	82884 <_vfiprintf_r+0xa20>
   82220:	ab2a      	add	r3, sp, #168	; 0xa8
   82222:	3630      	adds	r6, #48	; 0x30
   82224:	f803 6d41 	strb.w	r6, [r3, #-65]!
   82228:	ebc3 090a 	rsb	r9, r3, sl
   8222c:	9307      	str	r3, [sp, #28]
   8222e:	e74b      	b.n	820c8 <_vfiprintf_r+0x264>
   82230:	f048 0810 	orr.w	r8, r8, #16
   82234:	f018 0320 	ands.w	r3, r8, #32
   82238:	9503      	str	r5, [sp, #12]
   8223a:	46b4      	mov	ip, r6
   8223c:	d19c      	bne.n	82178 <_vfiprintf_r+0x314>
   8223e:	f018 0210 	ands.w	r2, r8, #16
   82242:	f040 82f7 	bne.w	82834 <_vfiprintf_r+0x9d0>
   82246:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   8224a:	f000 82f3 	beq.w	82834 <_vfiprintf_r+0x9d0>
   8224e:	9904      	ldr	r1, [sp, #16]
   82250:	4613      	mov	r3, r2
   82252:	460a      	mov	r2, r1
   82254:	3204      	adds	r2, #4
   82256:	880e      	ldrh	r6, [r1, #0]
   82258:	2700      	movs	r7, #0
   8225a:	9204      	str	r2, [sp, #16]
   8225c:	e705      	b.n	8206a <_vfiprintf_r+0x206>
   8225e:	f048 0810 	orr.w	r8, r8, #16
   82262:	f018 0f20 	tst.w	r8, #32
   82266:	9503      	str	r5, [sp, #12]
   82268:	46b4      	mov	ip, r6
   8226a:	f47f aef4 	bne.w	82056 <_vfiprintf_r+0x1f2>
   8226e:	9a04      	ldr	r2, [sp, #16]
   82270:	f018 0f10 	tst.w	r8, #16
   82274:	4613      	mov	r3, r2
   82276:	f040 82e4 	bne.w	82842 <_vfiprintf_r+0x9de>
   8227a:	f018 0f40 	tst.w	r8, #64	; 0x40
   8227e:	f000 82e0 	beq.w	82842 <_vfiprintf_r+0x9de>
   82282:	8816      	ldrh	r6, [r2, #0]
   82284:	3204      	adds	r2, #4
   82286:	2700      	movs	r7, #0
   82288:	2301      	movs	r3, #1
   8228a:	9204      	str	r2, [sp, #16]
   8228c:	e6ed      	b.n	8206a <_vfiprintf_r+0x206>
   8228e:	4a62      	ldr	r2, [pc, #392]	; (82418 <_vfiprintf_r+0x5b4>)
   82290:	f018 0f20 	tst.w	r8, #32
   82294:	9503      	str	r5, [sp, #12]
   82296:	46b4      	mov	ip, r6
   82298:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8229c:	9209      	str	r2, [sp, #36]	; 0x24
   8229e:	f000 808f 	beq.w	823c0 <_vfiprintf_r+0x55c>
   822a2:	9a04      	ldr	r2, [sp, #16]
   822a4:	3207      	adds	r2, #7
   822a6:	f022 0207 	bic.w	r2, r2, #7
   822aa:	f102 0108 	add.w	r1, r2, #8
   822ae:	9104      	str	r1, [sp, #16]
   822b0:	e9d2 6700 	ldrd	r6, r7, [r2]
   822b4:	f018 0f01 	tst.w	r8, #1
   822b8:	f000 828f 	beq.w	827da <_vfiprintf_r+0x976>
   822bc:	ea56 0207 	orrs.w	r2, r6, r7
   822c0:	f000 828b 	beq.w	827da <_vfiprintf_r+0x976>
   822c4:	2230      	movs	r2, #48	; 0x30
   822c6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   822ca:	f048 0802 	orr.w	r8, r8, #2
   822ce:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   822d2:	2302      	movs	r3, #2
   822d4:	e6c9      	b.n	8206a <_vfiprintf_r+0x206>
   822d6:	9a04      	ldr	r2, [sp, #16]
   822d8:	2601      	movs	r6, #1
   822da:	6813      	ldr	r3, [r2, #0]
   822dc:	f04f 0100 	mov.w	r1, #0
   822e0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   822e4:	4613      	mov	r3, r2
   822e6:	46b1      	mov	r9, r6
   822e8:	3304      	adds	r3, #4
   822ea:	9304      	str	r3, [sp, #16]
   822ec:	ab10      	add	r3, sp, #64	; 0x40
   822ee:	9503      	str	r5, [sp, #12]
   822f0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   822f4:	9307      	str	r3, [sp, #28]
   822f6:	f04f 0c00 	mov.w	ip, #0
   822fa:	e6eb      	b.n	820d4 <_vfiprintf_r+0x270>
   822fc:	f018 0f20 	tst.w	r8, #32
   82300:	9503      	str	r5, [sp, #12]
   82302:	46b4      	mov	ip, r6
   82304:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82308:	f47f af65 	bne.w	821d6 <_vfiprintf_r+0x372>
   8230c:	9a04      	ldr	r2, [sp, #16]
   8230e:	f018 0f10 	tst.w	r8, #16
   82312:	4613      	mov	r3, r2
   82314:	f040 82a0 	bne.w	82858 <_vfiprintf_r+0x9f4>
   82318:	f018 0f40 	tst.w	r8, #64	; 0x40
   8231c:	f000 829c 	beq.w	82858 <_vfiprintf_r+0x9f4>
   82320:	f9b2 6000 	ldrsh.w	r6, [r2]
   82324:	3304      	adds	r3, #4
   82326:	17f7      	asrs	r7, r6, #31
   82328:	9304      	str	r3, [sp, #16]
   8232a:	4632      	mov	r2, r6
   8232c:	463b      	mov	r3, r7
   8232e:	e75c      	b.n	821ea <_vfiprintf_r+0x386>
   82330:	9904      	ldr	r1, [sp, #16]
   82332:	2378      	movs	r3, #120	; 0x78
   82334:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   82338:	4b38      	ldr	r3, [pc, #224]	; (8241c <_vfiprintf_r+0x5b8>)
   8233a:	46b4      	mov	ip, r6
   8233c:	2230      	movs	r2, #48	; 0x30
   8233e:	680e      	ldr	r6, [r1, #0]
   82340:	3104      	adds	r1, #4
   82342:	9309      	str	r3, [sp, #36]	; 0x24
   82344:	9503      	str	r5, [sp, #12]
   82346:	f048 0802 	orr.w	r8, r8, #2
   8234a:	9104      	str	r1, [sp, #16]
   8234c:	2700      	movs	r7, #0
   8234e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   82352:	2302      	movs	r3, #2
   82354:	e689      	b.n	8206a <_vfiprintf_r+0x206>
   82356:	f048 0820 	orr.w	r8, r8, #32
   8235a:	f89b 3000 	ldrb.w	r3, [fp]
   8235e:	4658      	mov	r0, fp
   82360:	e5e9      	b.n	81f36 <_vfiprintf_r+0xd2>
   82362:	f04f 0100 	mov.w	r1, #0
   82366:	9a04      	ldr	r2, [sp, #16]
   82368:	9503      	str	r5, [sp, #12]
   8236a:	6813      	ldr	r3, [r2, #0]
   8236c:	46b4      	mov	ip, r6
   8236e:	9307      	str	r3, [sp, #28]
   82370:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82374:	1d15      	adds	r5, r2, #4
   82376:	2b00      	cmp	r3, #0
   82378:	f000 834e 	beq.w	82a18 <_vfiprintf_r+0xbb4>
   8237c:	2e00      	cmp	r6, #0
   8237e:	f2c0 8329 	blt.w	829d4 <_vfiprintf_r+0xb70>
   82382:	9e07      	ldr	r6, [sp, #28]
   82384:	4662      	mov	r2, ip
   82386:	4630      	mov	r0, r6
   82388:	2100      	movs	r1, #0
   8238a:	f8cd c010 	str.w	ip, [sp, #16]
   8238e:	f001 fbc9 	bl	83b24 <memchr>
   82392:	f8dd c010 	ldr.w	ip, [sp, #16]
   82396:	2800      	cmp	r0, #0
   82398:	f000 834e 	beq.w	82a38 <_vfiprintf_r+0xbd4>
   8239c:	9504      	str	r5, [sp, #16]
   8239e:	ebc6 0900 	rsb	r9, r6, r0
   823a2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   823a6:	f04f 0c00 	mov.w	ip, #0
   823aa:	e68d      	b.n	820c8 <_vfiprintf_r+0x264>
   823ac:	4a1b      	ldr	r2, [pc, #108]	; (8241c <_vfiprintf_r+0x5b8>)
   823ae:	f018 0f20 	tst.w	r8, #32
   823b2:	9503      	str	r5, [sp, #12]
   823b4:	46b4      	mov	ip, r6
   823b6:	9209      	str	r2, [sp, #36]	; 0x24
   823b8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   823bc:	f47f af71 	bne.w	822a2 <_vfiprintf_r+0x43e>
   823c0:	9904      	ldr	r1, [sp, #16]
   823c2:	f018 0f10 	tst.w	r8, #16
   823c6:	460a      	mov	r2, r1
   823c8:	f040 8241 	bne.w	8284e <_vfiprintf_r+0x9ea>
   823cc:	f018 0f40 	tst.w	r8, #64	; 0x40
   823d0:	f000 823d 	beq.w	8284e <_vfiprintf_r+0x9ea>
   823d4:	3204      	adds	r2, #4
   823d6:	880e      	ldrh	r6, [r1, #0]
   823d8:	2700      	movs	r7, #0
   823da:	9204      	str	r2, [sp, #16]
   823dc:	e76a      	b.n	822b4 <_vfiprintf_r+0x450>
   823de:	f89b 3000 	ldrb.w	r3, [fp]
   823e2:	2b6c      	cmp	r3, #108	; 0x6c
   823e4:	f000 82e9 	beq.w	829ba <_vfiprintf_r+0xb56>
   823e8:	f048 0810 	orr.w	r8, r8, #16
   823ec:	4658      	mov	r0, fp
   823ee:	e5a2      	b.n	81f36 <_vfiprintf_r+0xd2>
   823f0:	9a04      	ldr	r2, [sp, #16]
   823f2:	4613      	mov	r3, r2
   823f4:	6815      	ldr	r5, [r2, #0]
   823f6:	3304      	adds	r3, #4
   823f8:	2d00      	cmp	r5, #0
   823fa:	f2c0 82e6 	blt.w	829ca <_vfiprintf_r+0xb66>
   823fe:	9304      	str	r3, [sp, #16]
   82400:	f89b 3000 	ldrb.w	r3, [fp]
   82404:	4658      	mov	r0, fp
   82406:	e596      	b.n	81f36 <_vfiprintf_r+0xd2>
   82408:	f89b 3000 	ldrb.w	r3, [fp]
   8240c:	4658      	mov	r0, fp
   8240e:	212b      	movs	r1, #43	; 0x2b
   82410:	e591      	b.n	81f36 <_vfiprintf_r+0xd2>
   82412:	bf00      	nop
   82414:	00084cec 	.word	0x00084cec
   82418:	00084cbc 	.word	0x00084cbc
   8241c:	00084cd0 	.word	0x00084cd0
   82420:	f89b 3000 	ldrb.w	r3, [fp]
   82424:	f10b 0001 	add.w	r0, fp, #1
   82428:	2b2a      	cmp	r3, #42	; 0x2a
   8242a:	f000 830f 	beq.w	82a4c <_vfiprintf_r+0xbe8>
   8242e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82432:	2a09      	cmp	r2, #9
   82434:	4683      	mov	fp, r0
   82436:	f04f 0600 	mov.w	r6, #0
   8243a:	f63f ad7e 	bhi.w	81f3a <_vfiprintf_r+0xd6>
   8243e:	f81b 3b01 	ldrb.w	r3, [fp], #1
   82442:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   82446:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   8244a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8244e:	2a09      	cmp	r2, #9
   82450:	d9f5      	bls.n	8243e <_vfiprintf_r+0x5da>
   82452:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   82456:	e570      	b.n	81f3a <_vfiprintf_r+0xd6>
   82458:	f018 0f20 	tst.w	r8, #32
   8245c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82460:	f000 8283 	beq.w	8296a <_vfiprintf_r+0xb06>
   82464:	9a04      	ldr	r2, [sp, #16]
   82466:	4613      	mov	r3, r2
   82468:	3304      	adds	r3, #4
   8246a:	9304      	str	r3, [sp, #16]
   8246c:	9b02      	ldr	r3, [sp, #8]
   8246e:	6811      	ldr	r1, [r2, #0]
   82470:	17df      	asrs	r7, r3, #31
   82472:	461a      	mov	r2, r3
   82474:	463b      	mov	r3, r7
   82476:	e9c1 2300 	strd	r2, r3, [r1]
   8247a:	e525      	b.n	81ec8 <_vfiprintf_r+0x64>
   8247c:	4658      	mov	r0, fp
   8247e:	f89b 3000 	ldrb.w	r3, [fp]
   82482:	2900      	cmp	r1, #0
   82484:	f47f ad57 	bne.w	81f36 <_vfiprintf_r+0xd2>
   82488:	2120      	movs	r1, #32
   8248a:	e554      	b.n	81f36 <_vfiprintf_r+0xd2>
   8248c:	f048 0801 	orr.w	r8, r8, #1
   82490:	4658      	mov	r0, fp
   82492:	f89b 3000 	ldrb.w	r3, [fp]
   82496:	e54e      	b.n	81f36 <_vfiprintf_r+0xd2>
   82498:	9503      	str	r5, [sp, #12]
   8249a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8249e:	2b00      	cmp	r3, #0
   824a0:	f000 809c 	beq.w	825dc <_vfiprintf_r+0x778>
   824a4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   824a8:	f04f 0300 	mov.w	r3, #0
   824ac:	2601      	movs	r6, #1
   824ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   824b2:	ab10      	add	r3, sp, #64	; 0x40
   824b4:	46b1      	mov	r9, r6
   824b6:	9307      	str	r3, [sp, #28]
   824b8:	e71d      	b.n	822f6 <_vfiprintf_r+0x492>
   824ba:	9801      	ldr	r0, [sp, #4]
   824bc:	9900      	ldr	r1, [sp, #0]
   824be:	aa0d      	add	r2, sp, #52	; 0x34
   824c0:	9308      	str	r3, [sp, #32]
   824c2:	f7ff fc93 	bl	81dec <__sprint_r.part.0>
   824c6:	2800      	cmp	r0, #0
   824c8:	f040 808f 	bne.w	825ea <_vfiprintf_r+0x786>
   824cc:	990e      	ldr	r1, [sp, #56]	; 0x38
   824ce:	46d4      	mov	ip, sl
   824d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   824d2:	f101 0e01 	add.w	lr, r1, #1
   824d6:	9b08      	ldr	r3, [sp, #32]
   824d8:	e61d      	b.n	82116 <_vfiprintf_r+0x2b2>
   824da:	990e      	ldr	r1, [sp, #56]	; 0x38
   824dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   824de:	1c48      	adds	r0, r1, #1
   824e0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   824e4:	b16b      	cbz	r3, 82502 <_vfiprintf_r+0x69e>
   824e6:	3201      	adds	r2, #1
   824e8:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   824ec:	2101      	movs	r1, #1
   824ee:	2807      	cmp	r0, #7
   824f0:	920f      	str	r2, [sp, #60]	; 0x3c
   824f2:	900e      	str	r0, [sp, #56]	; 0x38
   824f4:	6023      	str	r3, [r4, #0]
   824f6:	6061      	str	r1, [r4, #4]
   824f8:	f300 8134 	bgt.w	82764 <_vfiprintf_r+0x900>
   824fc:	4601      	mov	r1, r0
   824fe:	3408      	adds	r4, #8
   82500:	3001      	adds	r0, #1
   82502:	9b05      	ldr	r3, [sp, #20]
   82504:	b163      	cbz	r3, 82520 <_vfiprintf_r+0x6bc>
   82506:	3202      	adds	r2, #2
   82508:	a90c      	add	r1, sp, #48	; 0x30
   8250a:	2302      	movs	r3, #2
   8250c:	2807      	cmp	r0, #7
   8250e:	920f      	str	r2, [sp, #60]	; 0x3c
   82510:	900e      	str	r0, [sp, #56]	; 0x38
   82512:	e884 000a 	stmia.w	r4, {r1, r3}
   82516:	f300 8134 	bgt.w	82782 <_vfiprintf_r+0x91e>
   8251a:	4601      	mov	r1, r0
   8251c:	3408      	adds	r4, #8
   8251e:	3001      	adds	r0, #1
   82520:	9b06      	ldr	r3, [sp, #24]
   82522:	2b80      	cmp	r3, #128	; 0x80
   82524:	f000 80d4 	beq.w	826d0 <_vfiprintf_r+0x86c>
   82528:	ebc9 070c 	rsb	r7, r9, ip
   8252c:	2f00      	cmp	r7, #0
   8252e:	dd2b      	ble.n	82588 <_vfiprintf_r+0x724>
   82530:	2f10      	cmp	r7, #16
   82532:	4dab      	ldr	r5, [pc, #684]	; (827e0 <_vfiprintf_r+0x97c>)
   82534:	dd1f      	ble.n	82576 <_vfiprintf_r+0x712>
   82536:	46a6      	mov	lr, r4
   82538:	2310      	movs	r3, #16
   8253a:	9c01      	ldr	r4, [sp, #4]
   8253c:	e007      	b.n	8254e <_vfiprintf_r+0x6ea>
   8253e:	f101 0c02 	add.w	ip, r1, #2
   82542:	4601      	mov	r1, r0
   82544:	f10e 0e08 	add.w	lr, lr, #8
   82548:	3f10      	subs	r7, #16
   8254a:	2f10      	cmp	r7, #16
   8254c:	dd11      	ble.n	82572 <_vfiprintf_r+0x70e>
   8254e:	1c48      	adds	r0, r1, #1
   82550:	3210      	adds	r2, #16
   82552:	2807      	cmp	r0, #7
   82554:	920f      	str	r2, [sp, #60]	; 0x3c
   82556:	f8ce 5000 	str.w	r5, [lr]
   8255a:	f8ce 3004 	str.w	r3, [lr, #4]
   8255e:	900e      	str	r0, [sp, #56]	; 0x38
   82560:	dded      	ble.n	8253e <_vfiprintf_r+0x6da>
   82562:	bb6a      	cbnz	r2, 825c0 <_vfiprintf_r+0x75c>
   82564:	3f10      	subs	r7, #16
   82566:	2f10      	cmp	r7, #16
   82568:	f04f 0c01 	mov.w	ip, #1
   8256c:	4611      	mov	r1, r2
   8256e:	46d6      	mov	lr, sl
   82570:	dced      	bgt.n	8254e <_vfiprintf_r+0x6ea>
   82572:	4674      	mov	r4, lr
   82574:	4660      	mov	r0, ip
   82576:	443a      	add	r2, r7
   82578:	2807      	cmp	r0, #7
   8257a:	920f      	str	r2, [sp, #60]	; 0x3c
   8257c:	e884 00a0 	stmia.w	r4, {r5, r7}
   82580:	900e      	str	r0, [sp, #56]	; 0x38
   82582:	dc3b      	bgt.n	825fc <_vfiprintf_r+0x798>
   82584:	3408      	adds	r4, #8
   82586:	3001      	adds	r0, #1
   82588:	eb02 0309 	add.w	r3, r2, r9
   8258c:	9a07      	ldr	r2, [sp, #28]
   8258e:	2807      	cmp	r0, #7
   82590:	930f      	str	r3, [sp, #60]	; 0x3c
   82592:	e884 0204 	stmia.w	r4, {r2, r9}
   82596:	900e      	str	r0, [sp, #56]	; 0x38
   82598:	dd3d      	ble.n	82616 <_vfiprintf_r+0x7b2>
   8259a:	2b00      	cmp	r3, #0
   8259c:	f040 813f 	bne.w	8281e <_vfiprintf_r+0x9ba>
   825a0:	f018 0f04 	tst.w	r8, #4
   825a4:	930e      	str	r3, [sp, #56]	; 0x38
   825a6:	f040 8130 	bne.w	8280a <_vfiprintf_r+0x9a6>
   825aa:	9b02      	ldr	r3, [sp, #8]
   825ac:	9a03      	ldr	r2, [sp, #12]
   825ae:	4296      	cmp	r6, r2
   825b0:	bfac      	ite	ge
   825b2:	199b      	addge	r3, r3, r6
   825b4:	189b      	addlt	r3, r3, r2
   825b6:	9302      	str	r3, [sp, #8]
   825b8:	2300      	movs	r3, #0
   825ba:	930e      	str	r3, [sp, #56]	; 0x38
   825bc:	4654      	mov	r4, sl
   825be:	e483      	b.n	81ec8 <_vfiprintf_r+0x64>
   825c0:	4620      	mov	r0, r4
   825c2:	9900      	ldr	r1, [sp, #0]
   825c4:	aa0d      	add	r2, sp, #52	; 0x34
   825c6:	9305      	str	r3, [sp, #20]
   825c8:	f7ff fc10 	bl	81dec <__sprint_r.part.0>
   825cc:	b968      	cbnz	r0, 825ea <_vfiprintf_r+0x786>
   825ce:	990e      	ldr	r1, [sp, #56]	; 0x38
   825d0:	46d6      	mov	lr, sl
   825d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   825d4:	f101 0c01 	add.w	ip, r1, #1
   825d8:	9b05      	ldr	r3, [sp, #20]
   825da:	e7b5      	b.n	82548 <_vfiprintf_r+0x6e4>
   825dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   825de:	b123      	cbz	r3, 825ea <_vfiprintf_r+0x786>
   825e0:	9801      	ldr	r0, [sp, #4]
   825e2:	9900      	ldr	r1, [sp, #0]
   825e4:	aa0d      	add	r2, sp, #52	; 0x34
   825e6:	f7ff fc01 	bl	81dec <__sprint_r.part.0>
   825ea:	9b00      	ldr	r3, [sp, #0]
   825ec:	899b      	ldrh	r3, [r3, #12]
   825ee:	065b      	lsls	r3, r3, #25
   825f0:	f53f ad23 	bmi.w	8203a <_vfiprintf_r+0x1d6>
   825f4:	9802      	ldr	r0, [sp, #8]
   825f6:	b02b      	add	sp, #172	; 0xac
   825f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825fc:	2a00      	cmp	r2, #0
   825fe:	f040 8190 	bne.w	82922 <_vfiprintf_r+0xabe>
   82602:	464b      	mov	r3, r9
   82604:	4654      	mov	r4, sl
   82606:	9907      	ldr	r1, [sp, #28]
   82608:	2201      	movs	r2, #1
   8260a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   8260e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   82612:	911a      	str	r1, [sp, #104]	; 0x68
   82614:	920e      	str	r2, [sp, #56]	; 0x38
   82616:	f104 0208 	add.w	r2, r4, #8
   8261a:	f018 0f04 	tst.w	r8, #4
   8261e:	d039      	beq.n	82694 <_vfiprintf_r+0x830>
   82620:	9903      	ldr	r1, [sp, #12]
   82622:	1b8d      	subs	r5, r1, r6
   82624:	2d00      	cmp	r5, #0
   82626:	dd35      	ble.n	82694 <_vfiprintf_r+0x830>
   82628:	2d10      	cmp	r5, #16
   8262a:	f340 8200 	ble.w	82a2e <_vfiprintf_r+0xbca>
   8262e:	980e      	ldr	r0, [sp, #56]	; 0x38
   82630:	4f6c      	ldr	r7, [pc, #432]	; (827e4 <_vfiprintf_r+0x980>)
   82632:	2410      	movs	r4, #16
   82634:	f8dd 8004 	ldr.w	r8, [sp, #4]
   82638:	f8dd 9000 	ldr.w	r9, [sp]
   8263c:	e006      	b.n	8264c <_vfiprintf_r+0x7e8>
   8263e:	f100 0e02 	add.w	lr, r0, #2
   82642:	4608      	mov	r0, r1
   82644:	3208      	adds	r2, #8
   82646:	3d10      	subs	r5, #16
   82648:	2d10      	cmp	r5, #16
   8264a:	dd10      	ble.n	8266e <_vfiprintf_r+0x80a>
   8264c:	1c41      	adds	r1, r0, #1
   8264e:	3310      	adds	r3, #16
   82650:	2907      	cmp	r1, #7
   82652:	930f      	str	r3, [sp, #60]	; 0x3c
   82654:	6017      	str	r7, [r2, #0]
   82656:	6054      	str	r4, [r2, #4]
   82658:	910e      	str	r1, [sp, #56]	; 0x38
   8265a:	ddf0      	ble.n	8263e <_vfiprintf_r+0x7da>
   8265c:	2b00      	cmp	r3, #0
   8265e:	d12a      	bne.n	826b6 <_vfiprintf_r+0x852>
   82660:	3d10      	subs	r5, #16
   82662:	2d10      	cmp	r5, #16
   82664:	f04f 0e01 	mov.w	lr, #1
   82668:	4618      	mov	r0, r3
   8266a:	4652      	mov	r2, sl
   8266c:	dcee      	bgt.n	8264c <_vfiprintf_r+0x7e8>
   8266e:	442b      	add	r3, r5
   82670:	f1be 0f07 	cmp.w	lr, #7
   82674:	930f      	str	r3, [sp, #60]	; 0x3c
   82676:	6017      	str	r7, [r2, #0]
   82678:	6055      	str	r5, [r2, #4]
   8267a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8267e:	dd09      	ble.n	82694 <_vfiprintf_r+0x830>
   82680:	2b00      	cmp	r3, #0
   82682:	d092      	beq.n	825aa <_vfiprintf_r+0x746>
   82684:	9801      	ldr	r0, [sp, #4]
   82686:	9900      	ldr	r1, [sp, #0]
   82688:	aa0d      	add	r2, sp, #52	; 0x34
   8268a:	f7ff fbaf 	bl	81dec <__sprint_r.part.0>
   8268e:	2800      	cmp	r0, #0
   82690:	d1ab      	bne.n	825ea <_vfiprintf_r+0x786>
   82692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82694:	9a02      	ldr	r2, [sp, #8]
   82696:	9903      	ldr	r1, [sp, #12]
   82698:	428e      	cmp	r6, r1
   8269a:	bfac      	ite	ge
   8269c:	1992      	addge	r2, r2, r6
   8269e:	1852      	addlt	r2, r2, r1
   826a0:	9202      	str	r2, [sp, #8]
   826a2:	2b00      	cmp	r3, #0
   826a4:	d088      	beq.n	825b8 <_vfiprintf_r+0x754>
   826a6:	9801      	ldr	r0, [sp, #4]
   826a8:	9900      	ldr	r1, [sp, #0]
   826aa:	aa0d      	add	r2, sp, #52	; 0x34
   826ac:	f7ff fb9e 	bl	81dec <__sprint_r.part.0>
   826b0:	2800      	cmp	r0, #0
   826b2:	d081      	beq.n	825b8 <_vfiprintf_r+0x754>
   826b4:	e799      	b.n	825ea <_vfiprintf_r+0x786>
   826b6:	4640      	mov	r0, r8
   826b8:	4649      	mov	r1, r9
   826ba:	aa0d      	add	r2, sp, #52	; 0x34
   826bc:	f7ff fb96 	bl	81dec <__sprint_r.part.0>
   826c0:	2800      	cmp	r0, #0
   826c2:	d192      	bne.n	825ea <_vfiprintf_r+0x786>
   826c4:	980e      	ldr	r0, [sp, #56]	; 0x38
   826c6:	4652      	mov	r2, sl
   826c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   826ca:	f100 0e01 	add.w	lr, r0, #1
   826ce:	e7ba      	b.n	82646 <_vfiprintf_r+0x7e2>
   826d0:	9b03      	ldr	r3, [sp, #12]
   826d2:	1b9f      	subs	r7, r3, r6
   826d4:	2f00      	cmp	r7, #0
   826d6:	f77f af27 	ble.w	82528 <_vfiprintf_r+0x6c4>
   826da:	2f10      	cmp	r7, #16
   826dc:	f340 81b3 	ble.w	82a46 <_vfiprintf_r+0xbe2>
   826e0:	4620      	mov	r0, r4
   826e2:	4d3f      	ldr	r5, [pc, #252]	; (827e0 <_vfiprintf_r+0x97c>)
   826e4:	4664      	mov	r4, ip
   826e6:	2310      	movs	r3, #16
   826e8:	4684      	mov	ip, r0
   826ea:	e007      	b.n	826fc <_vfiprintf_r+0x898>
   826ec:	f101 0e02 	add.w	lr, r1, #2
   826f0:	4601      	mov	r1, r0
   826f2:	f10c 0c08 	add.w	ip, ip, #8
   826f6:	3f10      	subs	r7, #16
   826f8:	2f10      	cmp	r7, #16
   826fa:	dd11      	ble.n	82720 <_vfiprintf_r+0x8bc>
   826fc:	1c48      	adds	r0, r1, #1
   826fe:	3210      	adds	r2, #16
   82700:	2807      	cmp	r0, #7
   82702:	920f      	str	r2, [sp, #60]	; 0x3c
   82704:	f8cc 5000 	str.w	r5, [ip]
   82708:	f8cc 3004 	str.w	r3, [ip, #4]
   8270c:	900e      	str	r0, [sp, #56]	; 0x38
   8270e:	dded      	ble.n	826ec <_vfiprintf_r+0x888>
   82710:	b9c2      	cbnz	r2, 82744 <_vfiprintf_r+0x8e0>
   82712:	3f10      	subs	r7, #16
   82714:	2f10      	cmp	r7, #16
   82716:	f04f 0e01 	mov.w	lr, #1
   8271a:	4611      	mov	r1, r2
   8271c:	46d4      	mov	ip, sl
   8271e:	dced      	bgt.n	826fc <_vfiprintf_r+0x898>
   82720:	4663      	mov	r3, ip
   82722:	46a4      	mov	ip, r4
   82724:	461c      	mov	r4, r3
   82726:	443a      	add	r2, r7
   82728:	f1be 0f07 	cmp.w	lr, #7
   8272c:	920f      	str	r2, [sp, #60]	; 0x3c
   8272e:	e884 00a0 	stmia.w	r4, {r5, r7}
   82732:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   82736:	f300 80ee 	bgt.w	82916 <_vfiprintf_r+0xab2>
   8273a:	3408      	adds	r4, #8
   8273c:	f10e 0001 	add.w	r0, lr, #1
   82740:	4671      	mov	r1, lr
   82742:	e6f1      	b.n	82528 <_vfiprintf_r+0x6c4>
   82744:	9801      	ldr	r0, [sp, #4]
   82746:	9900      	ldr	r1, [sp, #0]
   82748:	aa0d      	add	r2, sp, #52	; 0x34
   8274a:	9305      	str	r3, [sp, #20]
   8274c:	f7ff fb4e 	bl	81dec <__sprint_r.part.0>
   82750:	2800      	cmp	r0, #0
   82752:	f47f af4a 	bne.w	825ea <_vfiprintf_r+0x786>
   82756:	990e      	ldr	r1, [sp, #56]	; 0x38
   82758:	46d4      	mov	ip, sl
   8275a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8275c:	f101 0e01 	add.w	lr, r1, #1
   82760:	9b05      	ldr	r3, [sp, #20]
   82762:	e7c8      	b.n	826f6 <_vfiprintf_r+0x892>
   82764:	2a00      	cmp	r2, #0
   82766:	f040 80c5 	bne.w	828f4 <_vfiprintf_r+0xa90>
   8276a:	9b05      	ldr	r3, [sp, #20]
   8276c:	2b00      	cmp	r3, #0
   8276e:	f000 8085 	beq.w	8287c <_vfiprintf_r+0xa18>
   82772:	aa0c      	add	r2, sp, #48	; 0x30
   82774:	2302      	movs	r3, #2
   82776:	921a      	str	r2, [sp, #104]	; 0x68
   82778:	4608      	mov	r0, r1
   8277a:	931b      	str	r3, [sp, #108]	; 0x6c
   8277c:	461a      	mov	r2, r3
   8277e:	4654      	mov	r4, sl
   82780:	e6cb      	b.n	8251a <_vfiprintf_r+0x6b6>
   82782:	2a00      	cmp	r2, #0
   82784:	f040 80a5 	bne.w	828d2 <_vfiprintf_r+0xa6e>
   82788:	2001      	movs	r0, #1
   8278a:	4611      	mov	r1, r2
   8278c:	4654      	mov	r4, sl
   8278e:	e6c7      	b.n	82520 <_vfiprintf_r+0x6bc>
   82790:	bb03      	cbnz	r3, 827d4 <_vfiprintf_r+0x970>
   82792:	f018 0f01 	tst.w	r8, #1
   82796:	d01d      	beq.n	827d4 <_vfiprintf_r+0x970>
   82798:	ab2a      	add	r3, sp, #168	; 0xa8
   8279a:	2230      	movs	r2, #48	; 0x30
   8279c:	f803 2d41 	strb.w	r2, [r3, #-65]!
   827a0:	ebc3 090a 	rsb	r9, r3, sl
   827a4:	9307      	str	r3, [sp, #28]
   827a6:	e48f      	b.n	820c8 <_vfiprintf_r+0x264>
   827a8:	46d1      	mov	r9, sl
   827aa:	9809      	ldr	r0, [sp, #36]	; 0x24
   827ac:	0933      	lsrs	r3, r6, #4
   827ae:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   827b2:	0939      	lsrs	r1, r7, #4
   827b4:	f006 020f 	and.w	r2, r6, #15
   827b8:	460f      	mov	r7, r1
   827ba:	461e      	mov	r6, r3
   827bc:	5c83      	ldrb	r3, [r0, r2]
   827be:	f809 3d01 	strb.w	r3, [r9, #-1]!
   827c2:	ea56 0307 	orrs.w	r3, r6, r7
   827c6:	d1f1      	bne.n	827ac <_vfiprintf_r+0x948>
   827c8:	464b      	mov	r3, r9
   827ca:	f8cd 901c 	str.w	r9, [sp, #28]
   827ce:	ebc3 090a 	rsb	r9, r3, sl
   827d2:	e479      	b.n	820c8 <_vfiprintf_r+0x264>
   827d4:	f8cd a01c 	str.w	sl, [sp, #28]
   827d8:	e476      	b.n	820c8 <_vfiprintf_r+0x264>
   827da:	2302      	movs	r3, #2
   827dc:	e445      	b.n	8206a <_vfiprintf_r+0x206>
   827de:	bf00      	nop
   827e0:	00084cac 	.word	0x00084cac
   827e4:	00084cec 	.word	0x00084cec
   827e8:	2a00      	cmp	r2, #0
   827ea:	f040 80d5 	bne.w	82998 <_vfiprintf_r+0xb34>
   827ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   827f2:	2b00      	cmp	r3, #0
   827f4:	f000 80ac 	beq.w	82950 <_vfiprintf_r+0xaec>
   827f8:	2301      	movs	r3, #1
   827fa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   827fe:	4618      	mov	r0, r3
   82800:	931b      	str	r3, [sp, #108]	; 0x6c
   82802:	461a      	mov	r2, r3
   82804:	911a      	str	r1, [sp, #104]	; 0x68
   82806:	4654      	mov	r4, sl
   82808:	e678      	b.n	824fc <_vfiprintf_r+0x698>
   8280a:	9a03      	ldr	r2, [sp, #12]
   8280c:	1b95      	subs	r5, r2, r6
   8280e:	2d00      	cmp	r5, #0
   82810:	4652      	mov	r2, sl
   82812:	f73f af09 	bgt.w	82628 <_vfiprintf_r+0x7c4>
   82816:	e6c8      	b.n	825aa <_vfiprintf_r+0x746>
   82818:	465d      	mov	r5, fp
   8281a:	f7ff bb7c 	b.w	81f16 <_vfiprintf_r+0xb2>
   8281e:	9801      	ldr	r0, [sp, #4]
   82820:	9900      	ldr	r1, [sp, #0]
   82822:	aa0d      	add	r2, sp, #52	; 0x34
   82824:	f7ff fae2 	bl	81dec <__sprint_r.part.0>
   82828:	2800      	cmp	r0, #0
   8282a:	f47f aede 	bne.w	825ea <_vfiprintf_r+0x786>
   8282e:	4652      	mov	r2, sl
   82830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82832:	e6f2      	b.n	8261a <_vfiprintf_r+0x7b6>
   82834:	9904      	ldr	r1, [sp, #16]
   82836:	2700      	movs	r7, #0
   82838:	460a      	mov	r2, r1
   8283a:	3204      	adds	r2, #4
   8283c:	680e      	ldr	r6, [r1, #0]
   8283e:	9204      	str	r2, [sp, #16]
   82840:	e413      	b.n	8206a <_vfiprintf_r+0x206>
   82842:	3204      	adds	r2, #4
   82844:	681e      	ldr	r6, [r3, #0]
   82846:	2700      	movs	r7, #0
   82848:	2301      	movs	r3, #1
   8284a:	9204      	str	r2, [sp, #16]
   8284c:	e40d      	b.n	8206a <_vfiprintf_r+0x206>
   8284e:	6816      	ldr	r6, [r2, #0]
   82850:	3204      	adds	r2, #4
   82852:	9204      	str	r2, [sp, #16]
   82854:	2700      	movs	r7, #0
   82856:	e52d      	b.n	822b4 <_vfiprintf_r+0x450>
   82858:	681e      	ldr	r6, [r3, #0]
   8285a:	3304      	adds	r3, #4
   8285c:	17f7      	asrs	r7, r6, #31
   8285e:	9304      	str	r3, [sp, #16]
   82860:	4632      	mov	r2, r6
   82862:	463b      	mov	r3, r7
   82864:	e4c1      	b.n	821ea <_vfiprintf_r+0x386>
   82866:	9801      	ldr	r0, [sp, #4]
   82868:	9900      	ldr	r1, [sp, #0]
   8286a:	aa0d      	add	r2, sp, #52	; 0x34
   8286c:	f7ff fabe 	bl	81dec <__sprint_r.part.0>
   82870:	2800      	cmp	r0, #0
   82872:	f47f aeba 	bne.w	825ea <_vfiprintf_r+0x786>
   82876:	4654      	mov	r4, sl
   82878:	f7ff bbc0 	b.w	81ffc <_vfiprintf_r+0x198>
   8287c:	4608      	mov	r0, r1
   8287e:	4654      	mov	r4, sl
   82880:	4611      	mov	r1, r2
   82882:	e64d      	b.n	82520 <_vfiprintf_r+0x6bc>
   82884:	46d1      	mov	r9, sl
   82886:	f8cd c014 	str.w	ip, [sp, #20]
   8288a:	4630      	mov	r0, r6
   8288c:	4639      	mov	r1, r7
   8288e:	220a      	movs	r2, #10
   82890:	2300      	movs	r3, #0
   82892:	f001 fdd1 	bl	84438 <__aeabi_uldivmod>
   82896:	3230      	adds	r2, #48	; 0x30
   82898:	4630      	mov	r0, r6
   8289a:	4639      	mov	r1, r7
   8289c:	f809 2d01 	strb.w	r2, [r9, #-1]!
   828a0:	2300      	movs	r3, #0
   828a2:	220a      	movs	r2, #10
   828a4:	f001 fdc8 	bl	84438 <__aeabi_uldivmod>
   828a8:	4606      	mov	r6, r0
   828aa:	460f      	mov	r7, r1
   828ac:	ea56 0307 	orrs.w	r3, r6, r7
   828b0:	d1eb      	bne.n	8288a <_vfiprintf_r+0xa26>
   828b2:	f8dd c014 	ldr.w	ip, [sp, #20]
   828b6:	e787      	b.n	827c8 <_vfiprintf_r+0x964>
   828b8:	2b30      	cmp	r3, #48	; 0x30
   828ba:	9b07      	ldr	r3, [sp, #28]
   828bc:	d087      	beq.n	827ce <_vfiprintf_r+0x96a>
   828be:	3b01      	subs	r3, #1
   828c0:	461a      	mov	r2, r3
   828c2:	9307      	str	r3, [sp, #28]
   828c4:	2330      	movs	r3, #48	; 0x30
   828c6:	ebc2 090a 	rsb	r9, r2, sl
   828ca:	f801 3c01 	strb.w	r3, [r1, #-1]
   828ce:	f7ff bbfb 	b.w	820c8 <_vfiprintf_r+0x264>
   828d2:	9801      	ldr	r0, [sp, #4]
   828d4:	9900      	ldr	r1, [sp, #0]
   828d6:	aa0d      	add	r2, sp, #52	; 0x34
   828d8:	f8cd c014 	str.w	ip, [sp, #20]
   828dc:	f7ff fa86 	bl	81dec <__sprint_r.part.0>
   828e0:	2800      	cmp	r0, #0
   828e2:	f47f ae82 	bne.w	825ea <_vfiprintf_r+0x786>
   828e6:	990e      	ldr	r1, [sp, #56]	; 0x38
   828e8:	4654      	mov	r4, sl
   828ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   828ec:	1c48      	adds	r0, r1, #1
   828ee:	f8dd c014 	ldr.w	ip, [sp, #20]
   828f2:	e615      	b.n	82520 <_vfiprintf_r+0x6bc>
   828f4:	9801      	ldr	r0, [sp, #4]
   828f6:	9900      	ldr	r1, [sp, #0]
   828f8:	aa0d      	add	r2, sp, #52	; 0x34
   828fa:	f8cd c020 	str.w	ip, [sp, #32]
   828fe:	f7ff fa75 	bl	81dec <__sprint_r.part.0>
   82902:	2800      	cmp	r0, #0
   82904:	f47f ae71 	bne.w	825ea <_vfiprintf_r+0x786>
   82908:	990e      	ldr	r1, [sp, #56]	; 0x38
   8290a:	4654      	mov	r4, sl
   8290c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8290e:	1c48      	adds	r0, r1, #1
   82910:	f8dd c020 	ldr.w	ip, [sp, #32]
   82914:	e5f5      	b.n	82502 <_vfiprintf_r+0x69e>
   82916:	2a00      	cmp	r2, #0
   82918:	d167      	bne.n	829ea <_vfiprintf_r+0xb86>
   8291a:	2001      	movs	r0, #1
   8291c:	4611      	mov	r1, r2
   8291e:	4654      	mov	r4, sl
   82920:	e602      	b.n	82528 <_vfiprintf_r+0x6c4>
   82922:	9801      	ldr	r0, [sp, #4]
   82924:	9900      	ldr	r1, [sp, #0]
   82926:	aa0d      	add	r2, sp, #52	; 0x34
   82928:	f7ff fa60 	bl	81dec <__sprint_r.part.0>
   8292c:	2800      	cmp	r0, #0
   8292e:	f47f ae5c 	bne.w	825ea <_vfiprintf_r+0x786>
   82932:	980e      	ldr	r0, [sp, #56]	; 0x38
   82934:	4654      	mov	r4, sl
   82936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82938:	3001      	adds	r0, #1
   8293a:	e625      	b.n	82588 <_vfiprintf_r+0x724>
   8293c:	252d      	movs	r5, #45	; 0x2d
   8293e:	4276      	negs	r6, r6
   82940:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82944:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   82948:	46e1      	mov	r9, ip
   8294a:	2301      	movs	r3, #1
   8294c:	f7ff bb93 	b.w	82076 <_vfiprintf_r+0x212>
   82950:	9b05      	ldr	r3, [sp, #20]
   82952:	4611      	mov	r1, r2
   82954:	2001      	movs	r0, #1
   82956:	4654      	mov	r4, sl
   82958:	2b00      	cmp	r3, #0
   8295a:	f43f ade5 	beq.w	82528 <_vfiprintf_r+0x6c4>
   8295e:	aa0c      	add	r2, sp, #48	; 0x30
   82960:	2302      	movs	r3, #2
   82962:	e88a 000c 	stmia.w	sl, {r2, r3}
   82966:	461a      	mov	r2, r3
   82968:	e5d7      	b.n	8251a <_vfiprintf_r+0x6b6>
   8296a:	f018 0f10 	tst.w	r8, #16
   8296e:	d10b      	bne.n	82988 <_vfiprintf_r+0xb24>
   82970:	f018 0f40 	tst.w	r8, #64	; 0x40
   82974:	d008      	beq.n	82988 <_vfiprintf_r+0xb24>
   82976:	9a04      	ldr	r2, [sp, #16]
   82978:	6813      	ldr	r3, [r2, #0]
   8297a:	3204      	adds	r2, #4
   8297c:	9204      	str	r2, [sp, #16]
   8297e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   82982:	801a      	strh	r2, [r3, #0]
   82984:	f7ff baa0 	b.w	81ec8 <_vfiprintf_r+0x64>
   82988:	9a04      	ldr	r2, [sp, #16]
   8298a:	6813      	ldr	r3, [r2, #0]
   8298c:	3204      	adds	r2, #4
   8298e:	9204      	str	r2, [sp, #16]
   82990:	9a02      	ldr	r2, [sp, #8]
   82992:	601a      	str	r2, [r3, #0]
   82994:	f7ff ba98 	b.w	81ec8 <_vfiprintf_r+0x64>
   82998:	9801      	ldr	r0, [sp, #4]
   8299a:	9900      	ldr	r1, [sp, #0]
   8299c:	aa0d      	add	r2, sp, #52	; 0x34
   8299e:	f8cd c020 	str.w	ip, [sp, #32]
   829a2:	f7ff fa23 	bl	81dec <__sprint_r.part.0>
   829a6:	2800      	cmp	r0, #0
   829a8:	f47f ae1f 	bne.w	825ea <_vfiprintf_r+0x786>
   829ac:	990e      	ldr	r1, [sp, #56]	; 0x38
   829ae:	4654      	mov	r4, sl
   829b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   829b2:	1c48      	adds	r0, r1, #1
   829b4:	f8dd c020 	ldr.w	ip, [sp, #32]
   829b8:	e592      	b.n	824e0 <_vfiprintf_r+0x67c>
   829ba:	f048 0820 	orr.w	r8, r8, #32
   829be:	f10b 0001 	add.w	r0, fp, #1
   829c2:	f89b 3001 	ldrb.w	r3, [fp, #1]
   829c6:	f7ff bab6 	b.w	81f36 <_vfiprintf_r+0xd2>
   829ca:	426d      	negs	r5, r5
   829cc:	9304      	str	r3, [sp, #16]
   829ce:	4658      	mov	r0, fp
   829d0:	f7ff bbc8 	b.w	82164 <_vfiprintf_r+0x300>
   829d4:	9807      	ldr	r0, [sp, #28]
   829d6:	9504      	str	r5, [sp, #16]
   829d8:	f7ff f9da 	bl	81d90 <strlen>
   829dc:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   829e0:	4681      	mov	r9, r0
   829e2:	f04f 0c00 	mov.w	ip, #0
   829e6:	f7ff bb6f 	b.w	820c8 <_vfiprintf_r+0x264>
   829ea:	9801      	ldr	r0, [sp, #4]
   829ec:	9900      	ldr	r1, [sp, #0]
   829ee:	aa0d      	add	r2, sp, #52	; 0x34
   829f0:	f8cd c014 	str.w	ip, [sp, #20]
   829f4:	f7ff f9fa 	bl	81dec <__sprint_r.part.0>
   829f8:	2800      	cmp	r0, #0
   829fa:	f47f adf6 	bne.w	825ea <_vfiprintf_r+0x786>
   829fe:	990e      	ldr	r1, [sp, #56]	; 0x38
   82a00:	4654      	mov	r4, sl
   82a02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82a04:	1c48      	adds	r0, r1, #1
   82a06:	f8dd c014 	ldr.w	ip, [sp, #20]
   82a0a:	e58d      	b.n	82528 <_vfiprintf_r+0x6c4>
   82a0c:	990e      	ldr	r1, [sp, #56]	; 0x38
   82a0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82a10:	3101      	adds	r1, #1
   82a12:	4f15      	ldr	r7, [pc, #84]	; (82a68 <_vfiprintf_r+0xc04>)
   82a14:	f7ff bb9a 	b.w	8214c <_vfiprintf_r+0x2e8>
   82a18:	2e06      	cmp	r6, #6
   82a1a:	4b14      	ldr	r3, [pc, #80]	; (82a6c <_vfiprintf_r+0xc08>)
   82a1c:	bf28      	it	cs
   82a1e:	f04f 0c06 	movcs.w	ip, #6
   82a22:	46e1      	mov	r9, ip
   82a24:	9504      	str	r5, [sp, #16]
   82a26:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   82a2a:	9307      	str	r3, [sp, #28]
   82a2c:	e463      	b.n	822f6 <_vfiprintf_r+0x492>
   82a2e:	990e      	ldr	r1, [sp, #56]	; 0x38
   82a30:	4f0d      	ldr	r7, [pc, #52]	; (82a68 <_vfiprintf_r+0xc04>)
   82a32:	f101 0e01 	add.w	lr, r1, #1
   82a36:	e61a      	b.n	8266e <_vfiprintf_r+0x80a>
   82a38:	46e1      	mov	r9, ip
   82a3a:	9504      	str	r5, [sp, #16]
   82a3c:	4684      	mov	ip, r0
   82a3e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   82a42:	f7ff bb41 	b.w	820c8 <_vfiprintf_r+0x264>
   82a46:	4686      	mov	lr, r0
   82a48:	4d09      	ldr	r5, [pc, #36]	; (82a70 <_vfiprintf_r+0xc0c>)
   82a4a:	e66c      	b.n	82726 <_vfiprintf_r+0x8c2>
   82a4c:	9a04      	ldr	r2, [sp, #16]
   82a4e:	f89b 3001 	ldrb.w	r3, [fp, #1]
   82a52:	6816      	ldr	r6, [r2, #0]
   82a54:	3204      	adds	r2, #4
   82a56:	2e00      	cmp	r6, #0
   82a58:	9204      	str	r2, [sp, #16]
   82a5a:	f6bf aa6c 	bge.w	81f36 <_vfiprintf_r+0xd2>
   82a5e:	f04f 36ff 	mov.w	r6, #4294967295
   82a62:	f7ff ba68 	b.w	81f36 <_vfiprintf_r+0xd2>
   82a66:	bf00      	nop
   82a68:	00084cec 	.word	0x00084cec
   82a6c:	00084ce4 	.word	0x00084ce4
   82a70:	00084cac 	.word	0x00084cac

00082a74 <__sbprintf>:
   82a74:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   82a78:	4688      	mov	r8, r1
   82a7a:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82a7c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   82a80:	9719      	str	r7, [sp, #100]	; 0x64
   82a82:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82a86:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   82a8a:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   82a8e:	9707      	str	r7, [sp, #28]
   82a90:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82a94:	ac1a      	add	r4, sp, #104	; 0x68
   82a96:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82a9a:	f02e 0e02 	bic.w	lr, lr, #2
   82a9e:	2600      	movs	r6, #0
   82aa0:	4669      	mov	r1, sp
   82aa2:	9400      	str	r4, [sp, #0]
   82aa4:	9404      	str	r4, [sp, #16]
   82aa6:	9502      	str	r5, [sp, #8]
   82aa8:	9505      	str	r5, [sp, #20]
   82aaa:	f8ad e00c 	strh.w	lr, [sp, #12]
   82aae:	f8ad a00e 	strh.w	sl, [sp, #14]
   82ab2:	9709      	str	r7, [sp, #36]	; 0x24
   82ab4:	9606      	str	r6, [sp, #24]
   82ab6:	4605      	mov	r5, r0
   82ab8:	f7ff f9d4 	bl	81e64 <_vfiprintf_r>
   82abc:	1e04      	subs	r4, r0, #0
   82abe:	db07      	blt.n	82ad0 <__sbprintf+0x5c>
   82ac0:	4628      	mov	r0, r5
   82ac2:	4669      	mov	r1, sp
   82ac4:	f000 f92a 	bl	82d1c <_fflush_r>
   82ac8:	42b0      	cmp	r0, r6
   82aca:	bf18      	it	ne
   82acc:	f04f 34ff 	movne.w	r4, #4294967295
   82ad0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82ad4:	065b      	lsls	r3, r3, #25
   82ad6:	d505      	bpl.n	82ae4 <__sbprintf+0x70>
   82ad8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ae0:	f8a8 300c 	strh.w	r3, [r8, #12]
   82ae4:	4620      	mov	r0, r4
   82ae6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   82aea:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   82aee:	bf00      	nop

00082af0 <__swsetup_r>:
   82af0:	b538      	push	{r3, r4, r5, lr}
   82af2:	4b2f      	ldr	r3, [pc, #188]	; (82bb0 <__swsetup_r+0xc0>)
   82af4:	4605      	mov	r5, r0
   82af6:	6818      	ldr	r0, [r3, #0]
   82af8:	460c      	mov	r4, r1
   82afa:	b110      	cbz	r0, 82b02 <__swsetup_r+0x12>
   82afc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82afe:	2b00      	cmp	r3, #0
   82b00:	d036      	beq.n	82b70 <__swsetup_r+0x80>
   82b02:	89a2      	ldrh	r2, [r4, #12]
   82b04:	b293      	uxth	r3, r2
   82b06:	0718      	lsls	r0, r3, #28
   82b08:	d50c      	bpl.n	82b24 <__swsetup_r+0x34>
   82b0a:	6920      	ldr	r0, [r4, #16]
   82b0c:	b1a8      	cbz	r0, 82b3a <__swsetup_r+0x4a>
   82b0e:	f013 0201 	ands.w	r2, r3, #1
   82b12:	d01e      	beq.n	82b52 <__swsetup_r+0x62>
   82b14:	6963      	ldr	r3, [r4, #20]
   82b16:	2200      	movs	r2, #0
   82b18:	425b      	negs	r3, r3
   82b1a:	61a3      	str	r3, [r4, #24]
   82b1c:	60a2      	str	r2, [r4, #8]
   82b1e:	b1f0      	cbz	r0, 82b5e <__swsetup_r+0x6e>
   82b20:	2000      	movs	r0, #0
   82b22:	bd38      	pop	{r3, r4, r5, pc}
   82b24:	06d9      	lsls	r1, r3, #27
   82b26:	d53a      	bpl.n	82b9e <__swsetup_r+0xae>
   82b28:	0758      	lsls	r0, r3, #29
   82b2a:	d424      	bmi.n	82b76 <__swsetup_r+0x86>
   82b2c:	6920      	ldr	r0, [r4, #16]
   82b2e:	f042 0308 	orr.w	r3, r2, #8
   82b32:	81a3      	strh	r3, [r4, #12]
   82b34:	b29b      	uxth	r3, r3
   82b36:	2800      	cmp	r0, #0
   82b38:	d1e9      	bne.n	82b0e <__swsetup_r+0x1e>
   82b3a:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82b3e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82b42:	d0e4      	beq.n	82b0e <__swsetup_r+0x1e>
   82b44:	4628      	mov	r0, r5
   82b46:	4621      	mov	r1, r4
   82b48:	f000 fcee 	bl	83528 <__smakebuf_r>
   82b4c:	89a3      	ldrh	r3, [r4, #12]
   82b4e:	6920      	ldr	r0, [r4, #16]
   82b50:	e7dd      	b.n	82b0e <__swsetup_r+0x1e>
   82b52:	0799      	lsls	r1, r3, #30
   82b54:	bf58      	it	pl
   82b56:	6962      	ldrpl	r2, [r4, #20]
   82b58:	60a2      	str	r2, [r4, #8]
   82b5a:	2800      	cmp	r0, #0
   82b5c:	d1e0      	bne.n	82b20 <__swsetup_r+0x30>
   82b5e:	89a3      	ldrh	r3, [r4, #12]
   82b60:	061a      	lsls	r2, r3, #24
   82b62:	d5de      	bpl.n	82b22 <__swsetup_r+0x32>
   82b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b68:	81a3      	strh	r3, [r4, #12]
   82b6a:	f04f 30ff 	mov.w	r0, #4294967295
   82b6e:	bd38      	pop	{r3, r4, r5, pc}
   82b70:	f000 f968 	bl	82e44 <__sinit>
   82b74:	e7c5      	b.n	82b02 <__swsetup_r+0x12>
   82b76:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82b78:	b149      	cbz	r1, 82b8e <__swsetup_r+0x9e>
   82b7a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82b7e:	4299      	cmp	r1, r3
   82b80:	d003      	beq.n	82b8a <__swsetup_r+0x9a>
   82b82:	4628      	mov	r0, r5
   82b84:	f000 fa36 	bl	82ff4 <_free_r>
   82b88:	89a2      	ldrh	r2, [r4, #12]
   82b8a:	2300      	movs	r3, #0
   82b8c:	6323      	str	r3, [r4, #48]	; 0x30
   82b8e:	6920      	ldr	r0, [r4, #16]
   82b90:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82b94:	2300      	movs	r3, #0
   82b96:	b292      	uxth	r2, r2
   82b98:	e884 0009 	stmia.w	r4, {r0, r3}
   82b9c:	e7c7      	b.n	82b2e <__swsetup_r+0x3e>
   82b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82ba2:	2309      	movs	r3, #9
   82ba4:	602b      	str	r3, [r5, #0]
   82ba6:	f04f 30ff 	mov.w	r0, #4294967295
   82baa:	81a2      	strh	r2, [r4, #12]
   82bac:	bd38      	pop	{r3, r4, r5, pc}
   82bae:	bf00      	nop
   82bb0:	20070558 	.word	0x20070558

00082bb4 <register_fini>:
   82bb4:	4b02      	ldr	r3, [pc, #8]	; (82bc0 <register_fini+0xc>)
   82bb6:	b113      	cbz	r3, 82bbe <register_fini+0xa>
   82bb8:	4802      	ldr	r0, [pc, #8]	; (82bc4 <register_fini+0x10>)
   82bba:	f000 b805 	b.w	82bc8 <atexit>
   82bbe:	4770      	bx	lr
   82bc0:	00000000 	.word	0x00000000
   82bc4:	00082e59 	.word	0x00082e59

00082bc8 <atexit>:
   82bc8:	4601      	mov	r1, r0
   82bca:	2000      	movs	r0, #0
   82bcc:	4602      	mov	r2, r0
   82bce:	4603      	mov	r3, r0
   82bd0:	f001 bb3e 	b.w	84250 <__register_exitproc>

00082bd4 <__sflush_r>:
   82bd4:	898b      	ldrh	r3, [r1, #12]
   82bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82bda:	b29a      	uxth	r2, r3
   82bdc:	460d      	mov	r5, r1
   82bde:	0711      	lsls	r1, r2, #28
   82be0:	4680      	mov	r8, r0
   82be2:	d43c      	bmi.n	82c5e <__sflush_r+0x8a>
   82be4:	686a      	ldr	r2, [r5, #4]
   82be6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82bea:	2a00      	cmp	r2, #0
   82bec:	81ab      	strh	r3, [r5, #12]
   82bee:	dd65      	ble.n	82cbc <__sflush_r+0xe8>
   82bf0:	6aae      	ldr	r6, [r5, #40]	; 0x28
   82bf2:	2e00      	cmp	r6, #0
   82bf4:	d04b      	beq.n	82c8e <__sflush_r+0xba>
   82bf6:	b29b      	uxth	r3, r3
   82bf8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82bfc:	2100      	movs	r1, #0
   82bfe:	b292      	uxth	r2, r2
   82c00:	f8d8 4000 	ldr.w	r4, [r8]
   82c04:	f8c8 1000 	str.w	r1, [r8]
   82c08:	2a00      	cmp	r2, #0
   82c0a:	d05b      	beq.n	82cc4 <__sflush_r+0xf0>
   82c0c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82c0e:	075f      	lsls	r7, r3, #29
   82c10:	d505      	bpl.n	82c1e <__sflush_r+0x4a>
   82c12:	6869      	ldr	r1, [r5, #4]
   82c14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82c16:	1a52      	subs	r2, r2, r1
   82c18:	b10b      	cbz	r3, 82c1e <__sflush_r+0x4a>
   82c1a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82c1c:	1ad2      	subs	r2, r2, r3
   82c1e:	4640      	mov	r0, r8
   82c20:	69e9      	ldr	r1, [r5, #28]
   82c22:	2300      	movs	r3, #0
   82c24:	47b0      	blx	r6
   82c26:	1c46      	adds	r6, r0, #1
   82c28:	d056      	beq.n	82cd8 <__sflush_r+0x104>
   82c2a:	89ab      	ldrh	r3, [r5, #12]
   82c2c:	692a      	ldr	r2, [r5, #16]
   82c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82c32:	b29b      	uxth	r3, r3
   82c34:	2100      	movs	r1, #0
   82c36:	602a      	str	r2, [r5, #0]
   82c38:	04da      	lsls	r2, r3, #19
   82c3a:	81ab      	strh	r3, [r5, #12]
   82c3c:	6069      	str	r1, [r5, #4]
   82c3e:	d43b      	bmi.n	82cb8 <__sflush_r+0xe4>
   82c40:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82c42:	f8c8 4000 	str.w	r4, [r8]
   82c46:	b311      	cbz	r1, 82c8e <__sflush_r+0xba>
   82c48:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82c4c:	4299      	cmp	r1, r3
   82c4e:	d002      	beq.n	82c56 <__sflush_r+0x82>
   82c50:	4640      	mov	r0, r8
   82c52:	f000 f9cf 	bl	82ff4 <_free_r>
   82c56:	2000      	movs	r0, #0
   82c58:	6328      	str	r0, [r5, #48]	; 0x30
   82c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c5e:	692e      	ldr	r6, [r5, #16]
   82c60:	b1ae      	cbz	r6, 82c8e <__sflush_r+0xba>
   82c62:	0791      	lsls	r1, r2, #30
   82c64:	682c      	ldr	r4, [r5, #0]
   82c66:	bf0c      	ite	eq
   82c68:	696b      	ldreq	r3, [r5, #20]
   82c6a:	2300      	movne	r3, #0
   82c6c:	602e      	str	r6, [r5, #0]
   82c6e:	1ba4      	subs	r4, r4, r6
   82c70:	60ab      	str	r3, [r5, #8]
   82c72:	e00a      	b.n	82c8a <__sflush_r+0xb6>
   82c74:	4632      	mov	r2, r6
   82c76:	4623      	mov	r3, r4
   82c78:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82c7a:	4640      	mov	r0, r8
   82c7c:	69e9      	ldr	r1, [r5, #28]
   82c7e:	47b8      	blx	r7
   82c80:	2800      	cmp	r0, #0
   82c82:	eba4 0400 	sub.w	r4, r4, r0
   82c86:	4406      	add	r6, r0
   82c88:	dd04      	ble.n	82c94 <__sflush_r+0xc0>
   82c8a:	2c00      	cmp	r4, #0
   82c8c:	dcf2      	bgt.n	82c74 <__sflush_r+0xa0>
   82c8e:	2000      	movs	r0, #0
   82c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c94:	89ab      	ldrh	r3, [r5, #12]
   82c96:	f04f 30ff 	mov.w	r0, #4294967295
   82c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82c9e:	81ab      	strh	r3, [r5, #12]
   82ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ca4:	89ab      	ldrh	r3, [r5, #12]
   82ca6:	692a      	ldr	r2, [r5, #16]
   82ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82cac:	b29b      	uxth	r3, r3
   82cae:	81ab      	strh	r3, [r5, #12]
   82cb0:	04db      	lsls	r3, r3, #19
   82cb2:	6069      	str	r1, [r5, #4]
   82cb4:	602a      	str	r2, [r5, #0]
   82cb6:	d5c3      	bpl.n	82c40 <__sflush_r+0x6c>
   82cb8:	6528      	str	r0, [r5, #80]	; 0x50
   82cba:	e7c1      	b.n	82c40 <__sflush_r+0x6c>
   82cbc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82cbe:	2a00      	cmp	r2, #0
   82cc0:	dc96      	bgt.n	82bf0 <__sflush_r+0x1c>
   82cc2:	e7e4      	b.n	82c8e <__sflush_r+0xba>
   82cc4:	2301      	movs	r3, #1
   82cc6:	4640      	mov	r0, r8
   82cc8:	69e9      	ldr	r1, [r5, #28]
   82cca:	47b0      	blx	r6
   82ccc:	1c43      	adds	r3, r0, #1
   82cce:	4602      	mov	r2, r0
   82cd0:	d019      	beq.n	82d06 <__sflush_r+0x132>
   82cd2:	89ab      	ldrh	r3, [r5, #12]
   82cd4:	6aae      	ldr	r6, [r5, #40]	; 0x28
   82cd6:	e79a      	b.n	82c0e <__sflush_r+0x3a>
   82cd8:	f8d8 1000 	ldr.w	r1, [r8]
   82cdc:	2900      	cmp	r1, #0
   82cde:	d0e1      	beq.n	82ca4 <__sflush_r+0xd0>
   82ce0:	291d      	cmp	r1, #29
   82ce2:	d007      	beq.n	82cf4 <__sflush_r+0x120>
   82ce4:	2916      	cmp	r1, #22
   82ce6:	d005      	beq.n	82cf4 <__sflush_r+0x120>
   82ce8:	89ab      	ldrh	r3, [r5, #12]
   82cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82cee:	81ab      	strh	r3, [r5, #12]
   82cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cf4:	89ab      	ldrh	r3, [r5, #12]
   82cf6:	6929      	ldr	r1, [r5, #16]
   82cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82cfc:	2200      	movs	r2, #0
   82cfe:	81ab      	strh	r3, [r5, #12]
   82d00:	e885 0006 	stmia.w	r5, {r1, r2}
   82d04:	e79c      	b.n	82c40 <__sflush_r+0x6c>
   82d06:	f8d8 3000 	ldr.w	r3, [r8]
   82d0a:	2b00      	cmp	r3, #0
   82d0c:	d0e1      	beq.n	82cd2 <__sflush_r+0xfe>
   82d0e:	2b1d      	cmp	r3, #29
   82d10:	d001      	beq.n	82d16 <__sflush_r+0x142>
   82d12:	2b16      	cmp	r3, #22
   82d14:	d1be      	bne.n	82c94 <__sflush_r+0xc0>
   82d16:	f8c8 4000 	str.w	r4, [r8]
   82d1a:	e7b8      	b.n	82c8e <__sflush_r+0xba>

00082d1c <_fflush_r>:
   82d1c:	b510      	push	{r4, lr}
   82d1e:	4604      	mov	r4, r0
   82d20:	b082      	sub	sp, #8
   82d22:	b108      	cbz	r0, 82d28 <_fflush_r+0xc>
   82d24:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82d26:	b153      	cbz	r3, 82d3e <_fflush_r+0x22>
   82d28:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82d2c:	b908      	cbnz	r0, 82d32 <_fflush_r+0x16>
   82d2e:	b002      	add	sp, #8
   82d30:	bd10      	pop	{r4, pc}
   82d32:	4620      	mov	r0, r4
   82d34:	b002      	add	sp, #8
   82d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82d3a:	f7ff bf4b 	b.w	82bd4 <__sflush_r>
   82d3e:	9101      	str	r1, [sp, #4]
   82d40:	f000 f880 	bl	82e44 <__sinit>
   82d44:	9901      	ldr	r1, [sp, #4]
   82d46:	e7ef      	b.n	82d28 <_fflush_r+0xc>

00082d48 <_cleanup_r>:
   82d48:	4901      	ldr	r1, [pc, #4]	; (82d50 <_cleanup_r+0x8>)
   82d4a:	f000 bbbb 	b.w	834c4 <_fwalk_reent>
   82d4e:	bf00      	nop
   82d50:	00084319 	.word	0x00084319

00082d54 <__sinit.part.1>:
   82d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82d58:	4607      	mov	r7, r0
   82d5a:	4835      	ldr	r0, [pc, #212]	; (82e30 <__sinit.part.1+0xdc>)
   82d5c:	687d      	ldr	r5, [r7, #4]
   82d5e:	2400      	movs	r4, #0
   82d60:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82d64:	2304      	movs	r3, #4
   82d66:	2103      	movs	r1, #3
   82d68:	63f8      	str	r0, [r7, #60]	; 0x3c
   82d6a:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82d6e:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82d72:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82d76:	b083      	sub	sp, #12
   82d78:	602c      	str	r4, [r5, #0]
   82d7a:	606c      	str	r4, [r5, #4]
   82d7c:	60ac      	str	r4, [r5, #8]
   82d7e:	666c      	str	r4, [r5, #100]	; 0x64
   82d80:	81ec      	strh	r4, [r5, #14]
   82d82:	612c      	str	r4, [r5, #16]
   82d84:	616c      	str	r4, [r5, #20]
   82d86:	61ac      	str	r4, [r5, #24]
   82d88:	81ab      	strh	r3, [r5, #12]
   82d8a:	4621      	mov	r1, r4
   82d8c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82d90:	2208      	movs	r2, #8
   82d92:	f7fe fef3 	bl	81b7c <memset>
   82d96:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82e34 <__sinit.part.1+0xe0>
   82d9a:	68be      	ldr	r6, [r7, #8]
   82d9c:	f8df a098 	ldr.w	sl, [pc, #152]	; 82e38 <__sinit.part.1+0xe4>
   82da0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82e3c <__sinit.part.1+0xe8>
   82da4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82e40 <__sinit.part.1+0xec>
   82da8:	2301      	movs	r3, #1
   82daa:	2209      	movs	r2, #9
   82dac:	f8c5 b020 	str.w	fp, [r5, #32]
   82db0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82db4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82db8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82dbc:	61ed      	str	r5, [r5, #28]
   82dbe:	4621      	mov	r1, r4
   82dc0:	81f3      	strh	r3, [r6, #14]
   82dc2:	81b2      	strh	r2, [r6, #12]
   82dc4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82dc8:	6034      	str	r4, [r6, #0]
   82dca:	6074      	str	r4, [r6, #4]
   82dcc:	60b4      	str	r4, [r6, #8]
   82dce:	6674      	str	r4, [r6, #100]	; 0x64
   82dd0:	6134      	str	r4, [r6, #16]
   82dd2:	6174      	str	r4, [r6, #20]
   82dd4:	61b4      	str	r4, [r6, #24]
   82dd6:	2208      	movs	r2, #8
   82dd8:	9301      	str	r3, [sp, #4]
   82dda:	f7fe fecf 	bl	81b7c <memset>
   82dde:	68fd      	ldr	r5, [r7, #12]
   82de0:	2012      	movs	r0, #18
   82de2:	2202      	movs	r2, #2
   82de4:	61f6      	str	r6, [r6, #28]
   82de6:	f8c6 b020 	str.w	fp, [r6, #32]
   82dea:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82dee:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82df2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82df6:	4621      	mov	r1, r4
   82df8:	81a8      	strh	r0, [r5, #12]
   82dfa:	81ea      	strh	r2, [r5, #14]
   82dfc:	602c      	str	r4, [r5, #0]
   82dfe:	606c      	str	r4, [r5, #4]
   82e00:	60ac      	str	r4, [r5, #8]
   82e02:	666c      	str	r4, [r5, #100]	; 0x64
   82e04:	612c      	str	r4, [r5, #16]
   82e06:	616c      	str	r4, [r5, #20]
   82e08:	61ac      	str	r4, [r5, #24]
   82e0a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82e0e:	2208      	movs	r2, #8
   82e10:	f7fe feb4 	bl	81b7c <memset>
   82e14:	9b01      	ldr	r3, [sp, #4]
   82e16:	61ed      	str	r5, [r5, #28]
   82e18:	f8c5 b020 	str.w	fp, [r5, #32]
   82e1c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82e20:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82e24:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82e28:	63bb      	str	r3, [r7, #56]	; 0x38
   82e2a:	b003      	add	sp, #12
   82e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e30:	00082d49 	.word	0x00082d49
   82e34:	0008408d 	.word	0x0008408d
   82e38:	000840b1 	.word	0x000840b1
   82e3c:	000840e9 	.word	0x000840e9
   82e40:	00084109 	.word	0x00084109

00082e44 <__sinit>:
   82e44:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82e46:	b103      	cbz	r3, 82e4a <__sinit+0x6>
   82e48:	4770      	bx	lr
   82e4a:	f7ff bf83 	b.w	82d54 <__sinit.part.1>
   82e4e:	bf00      	nop

00082e50 <__sfp_lock_acquire>:
   82e50:	4770      	bx	lr
   82e52:	bf00      	nop

00082e54 <__sfp_lock_release>:
   82e54:	4770      	bx	lr
   82e56:	bf00      	nop

00082e58 <__libc_fini_array>:
   82e58:	b538      	push	{r3, r4, r5, lr}
   82e5a:	4b08      	ldr	r3, [pc, #32]	; (82e7c <__libc_fini_array+0x24>)
   82e5c:	4d08      	ldr	r5, [pc, #32]	; (82e80 <__libc_fini_array+0x28>)
   82e5e:	1aed      	subs	r5, r5, r3
   82e60:	10ac      	asrs	r4, r5, #2
   82e62:	bf18      	it	ne
   82e64:	18ed      	addne	r5, r5, r3
   82e66:	d005      	beq.n	82e74 <__libc_fini_array+0x1c>
   82e68:	3c01      	subs	r4, #1
   82e6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82e6e:	4798      	blx	r3
   82e70:	2c00      	cmp	r4, #0
   82e72:	d1f9      	bne.n	82e68 <__libc_fini_array+0x10>
   82e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82e78:	f001 bf4a 	b.w	84d10 <_fini>
   82e7c:	00084d1c 	.word	0x00084d1c
   82e80:	00084d20 	.word	0x00084d20

00082e84 <__fputwc>:
   82e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e88:	b082      	sub	sp, #8
   82e8a:	4607      	mov	r7, r0
   82e8c:	460e      	mov	r6, r1
   82e8e:	4614      	mov	r4, r2
   82e90:	f000 fb44 	bl	8351c <__locale_mb_cur_max>
   82e94:	2801      	cmp	r0, #1
   82e96:	d040      	beq.n	82f1a <__fputwc+0x96>
   82e98:	4638      	mov	r0, r7
   82e9a:	a901      	add	r1, sp, #4
   82e9c:	4632      	mov	r2, r6
   82e9e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82ea2:	f001 f989 	bl	841b8 <_wcrtomb_r>
   82ea6:	f1b0 3fff 	cmp.w	r0, #4294967295
   82eaa:	4680      	mov	r8, r0
   82eac:	d02e      	beq.n	82f0c <__fputwc+0x88>
   82eae:	2800      	cmp	r0, #0
   82eb0:	d03b      	beq.n	82f2a <__fputwc+0xa6>
   82eb2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82eb6:	2500      	movs	r5, #0
   82eb8:	e009      	b.n	82ece <__fputwc+0x4a>
   82eba:	6823      	ldr	r3, [r4, #0]
   82ebc:	7019      	strb	r1, [r3, #0]
   82ebe:	6823      	ldr	r3, [r4, #0]
   82ec0:	3301      	adds	r3, #1
   82ec2:	6023      	str	r3, [r4, #0]
   82ec4:	3501      	adds	r5, #1
   82ec6:	45a8      	cmp	r8, r5
   82ec8:	d92f      	bls.n	82f2a <__fputwc+0xa6>
   82eca:	ab01      	add	r3, sp, #4
   82ecc:	5d59      	ldrb	r1, [r3, r5]
   82ece:	68a3      	ldr	r3, [r4, #8]
   82ed0:	3b01      	subs	r3, #1
   82ed2:	2b00      	cmp	r3, #0
   82ed4:	60a3      	str	r3, [r4, #8]
   82ed6:	daf0      	bge.n	82eba <__fputwc+0x36>
   82ed8:	69a2      	ldr	r2, [r4, #24]
   82eda:	4293      	cmp	r3, r2
   82edc:	db06      	blt.n	82eec <__fputwc+0x68>
   82ede:	6823      	ldr	r3, [r4, #0]
   82ee0:	7019      	strb	r1, [r3, #0]
   82ee2:	6823      	ldr	r3, [r4, #0]
   82ee4:	7819      	ldrb	r1, [r3, #0]
   82ee6:	3301      	adds	r3, #1
   82ee8:	290a      	cmp	r1, #10
   82eea:	d1ea      	bne.n	82ec2 <__fputwc+0x3e>
   82eec:	4638      	mov	r0, r7
   82eee:	4622      	mov	r2, r4
   82ef0:	f001 f90e 	bl	84110 <__swbuf_r>
   82ef4:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   82ef8:	fab0 f080 	clz	r0, r0
   82efc:	0940      	lsrs	r0, r0, #5
   82efe:	2800      	cmp	r0, #0
   82f00:	d0e0      	beq.n	82ec4 <__fputwc+0x40>
   82f02:	f04f 30ff 	mov.w	r0, #4294967295
   82f06:	b002      	add	sp, #8
   82f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82f0c:	89a3      	ldrh	r3, [r4, #12]
   82f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82f12:	81a3      	strh	r3, [r4, #12]
   82f14:	b002      	add	sp, #8
   82f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82f1a:	1e73      	subs	r3, r6, #1
   82f1c:	2bfe      	cmp	r3, #254	; 0xfe
   82f1e:	d8bb      	bhi.n	82e98 <__fputwc+0x14>
   82f20:	b2f1      	uxtb	r1, r6
   82f22:	4680      	mov	r8, r0
   82f24:	f88d 1004 	strb.w	r1, [sp, #4]
   82f28:	e7c5      	b.n	82eb6 <__fputwc+0x32>
   82f2a:	4630      	mov	r0, r6
   82f2c:	b002      	add	sp, #8
   82f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82f32:	bf00      	nop

00082f34 <_fputwc_r>:
   82f34:	8993      	ldrh	r3, [r2, #12]
   82f36:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   82f3a:	d10b      	bne.n	82f54 <_fputwc_r+0x20>
   82f3c:	b410      	push	{r4}
   82f3e:	6e54      	ldr	r4, [r2, #100]	; 0x64
   82f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82f44:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   82f48:	6654      	str	r4, [r2, #100]	; 0x64
   82f4a:	8193      	strh	r3, [r2, #12]
   82f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
   82f50:	f7ff bf98 	b.w	82e84 <__fputwc>
   82f54:	f7ff bf96 	b.w	82e84 <__fputwc>

00082f58 <_malloc_trim_r>:
   82f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f5a:	460c      	mov	r4, r1
   82f5c:	4f22      	ldr	r7, [pc, #136]	; (82fe8 <_malloc_trim_r+0x90>)
   82f5e:	4606      	mov	r6, r0
   82f60:	f000 fe8e 	bl	83c80 <__malloc_lock>
   82f64:	68bb      	ldr	r3, [r7, #8]
   82f66:	685d      	ldr	r5, [r3, #4]
   82f68:	f025 0503 	bic.w	r5, r5, #3
   82f6c:	1b29      	subs	r1, r5, r4
   82f6e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82f72:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82f76:	f021 010f 	bic.w	r1, r1, #15
   82f7a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82f7e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82f82:	db07      	blt.n	82f94 <_malloc_trim_r+0x3c>
   82f84:	4630      	mov	r0, r6
   82f86:	2100      	movs	r1, #0
   82f88:	f001 f86e 	bl	84068 <_sbrk_r>
   82f8c:	68bb      	ldr	r3, [r7, #8]
   82f8e:	442b      	add	r3, r5
   82f90:	4298      	cmp	r0, r3
   82f92:	d004      	beq.n	82f9e <_malloc_trim_r+0x46>
   82f94:	4630      	mov	r0, r6
   82f96:	f000 fe75 	bl	83c84 <__malloc_unlock>
   82f9a:	2000      	movs	r0, #0
   82f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82f9e:	4630      	mov	r0, r6
   82fa0:	4261      	negs	r1, r4
   82fa2:	f001 f861 	bl	84068 <_sbrk_r>
   82fa6:	3001      	adds	r0, #1
   82fa8:	d00d      	beq.n	82fc6 <_malloc_trim_r+0x6e>
   82faa:	4b10      	ldr	r3, [pc, #64]	; (82fec <_malloc_trim_r+0x94>)
   82fac:	68ba      	ldr	r2, [r7, #8]
   82fae:	6819      	ldr	r1, [r3, #0]
   82fb0:	1b2d      	subs	r5, r5, r4
   82fb2:	f045 0501 	orr.w	r5, r5, #1
   82fb6:	4630      	mov	r0, r6
   82fb8:	1b09      	subs	r1, r1, r4
   82fba:	6055      	str	r5, [r2, #4]
   82fbc:	6019      	str	r1, [r3, #0]
   82fbe:	f000 fe61 	bl	83c84 <__malloc_unlock>
   82fc2:	2001      	movs	r0, #1
   82fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82fc6:	4630      	mov	r0, r6
   82fc8:	2100      	movs	r1, #0
   82fca:	f001 f84d 	bl	84068 <_sbrk_r>
   82fce:	68ba      	ldr	r2, [r7, #8]
   82fd0:	1a83      	subs	r3, r0, r2
   82fd2:	2b0f      	cmp	r3, #15
   82fd4:	ddde      	ble.n	82f94 <_malloc_trim_r+0x3c>
   82fd6:	4c06      	ldr	r4, [pc, #24]	; (82ff0 <_malloc_trim_r+0x98>)
   82fd8:	4904      	ldr	r1, [pc, #16]	; (82fec <_malloc_trim_r+0x94>)
   82fda:	6824      	ldr	r4, [r4, #0]
   82fdc:	f043 0301 	orr.w	r3, r3, #1
   82fe0:	1b00      	subs	r0, r0, r4
   82fe2:	6053      	str	r3, [r2, #4]
   82fe4:	6008      	str	r0, [r1, #0]
   82fe6:	e7d5      	b.n	82f94 <_malloc_trim_r+0x3c>
   82fe8:	20070580 	.word	0x20070580
   82fec:	200748b4 	.word	0x200748b4
   82ff0:	2007098c 	.word	0x2007098c

00082ff4 <_free_r>:
   82ff4:	2900      	cmp	r1, #0
   82ff6:	d04e      	beq.n	83096 <_free_r+0xa2>
   82ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82ffc:	460c      	mov	r4, r1
   82ffe:	4680      	mov	r8, r0
   83000:	f000 fe3e 	bl	83c80 <__malloc_lock>
   83004:	f854 7c04 	ldr.w	r7, [r4, #-4]
   83008:	4962      	ldr	r1, [pc, #392]	; (83194 <_free_r+0x1a0>)
   8300a:	f1a4 0508 	sub.w	r5, r4, #8
   8300e:	f027 0201 	bic.w	r2, r7, #1
   83012:	18ab      	adds	r3, r5, r2
   83014:	688e      	ldr	r6, [r1, #8]
   83016:	6858      	ldr	r0, [r3, #4]
   83018:	429e      	cmp	r6, r3
   8301a:	f020 0003 	bic.w	r0, r0, #3
   8301e:	d05a      	beq.n	830d6 <_free_r+0xe2>
   83020:	07fe      	lsls	r6, r7, #31
   83022:	6058      	str	r0, [r3, #4]
   83024:	d40b      	bmi.n	8303e <_free_r+0x4a>
   83026:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8302a:	f101 0e08 	add.w	lr, r1, #8
   8302e:	1bed      	subs	r5, r5, r7
   83030:	68ac      	ldr	r4, [r5, #8]
   83032:	443a      	add	r2, r7
   83034:	4574      	cmp	r4, lr
   83036:	d067      	beq.n	83108 <_free_r+0x114>
   83038:	68ef      	ldr	r7, [r5, #12]
   8303a:	60e7      	str	r7, [r4, #12]
   8303c:	60bc      	str	r4, [r7, #8]
   8303e:	181c      	adds	r4, r3, r0
   83040:	6864      	ldr	r4, [r4, #4]
   83042:	07e4      	lsls	r4, r4, #31
   83044:	d40c      	bmi.n	83060 <_free_r+0x6c>
   83046:	4f54      	ldr	r7, [pc, #336]	; (83198 <_free_r+0x1a4>)
   83048:	689c      	ldr	r4, [r3, #8]
   8304a:	4402      	add	r2, r0
   8304c:	42bc      	cmp	r4, r7
   8304e:	d07c      	beq.n	8314a <_free_r+0x156>
   83050:	68d8      	ldr	r0, [r3, #12]
   83052:	f042 0301 	orr.w	r3, r2, #1
   83056:	60e0      	str	r0, [r4, #12]
   83058:	6084      	str	r4, [r0, #8]
   8305a:	606b      	str	r3, [r5, #4]
   8305c:	50aa      	str	r2, [r5, r2]
   8305e:	e003      	b.n	83068 <_free_r+0x74>
   83060:	f042 0301 	orr.w	r3, r2, #1
   83064:	606b      	str	r3, [r5, #4]
   83066:	50aa      	str	r2, [r5, r2]
   83068:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8306c:	d214      	bcs.n	83098 <_free_r+0xa4>
   8306e:	08d2      	lsrs	r2, r2, #3
   83070:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   83074:	2401      	movs	r4, #1
   83076:	6848      	ldr	r0, [r1, #4]
   83078:	1092      	asrs	r2, r2, #2
   8307a:	fa04 f202 	lsl.w	r2, r4, r2
   8307e:	689c      	ldr	r4, [r3, #8]
   83080:	4310      	orrs	r0, r2
   83082:	60ac      	str	r4, [r5, #8]
   83084:	60eb      	str	r3, [r5, #12]
   83086:	6048      	str	r0, [r1, #4]
   83088:	609d      	str	r5, [r3, #8]
   8308a:	60e5      	str	r5, [r4, #12]
   8308c:	4640      	mov	r0, r8
   8308e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83092:	f000 bdf7 	b.w	83c84 <__malloc_unlock>
   83096:	4770      	bx	lr
   83098:	0a53      	lsrs	r3, r2, #9
   8309a:	2b04      	cmp	r3, #4
   8309c:	d847      	bhi.n	8312e <_free_r+0x13a>
   8309e:	0993      	lsrs	r3, r2, #6
   830a0:	f103 0438 	add.w	r4, r3, #56	; 0x38
   830a4:	0060      	lsls	r0, r4, #1
   830a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   830aa:	6883      	ldr	r3, [r0, #8]
   830ac:	4939      	ldr	r1, [pc, #228]	; (83194 <_free_r+0x1a0>)
   830ae:	4283      	cmp	r3, r0
   830b0:	d043      	beq.n	8313a <_free_r+0x146>
   830b2:	6859      	ldr	r1, [r3, #4]
   830b4:	f021 0103 	bic.w	r1, r1, #3
   830b8:	4291      	cmp	r1, r2
   830ba:	d902      	bls.n	830c2 <_free_r+0xce>
   830bc:	689b      	ldr	r3, [r3, #8]
   830be:	4298      	cmp	r0, r3
   830c0:	d1f7      	bne.n	830b2 <_free_r+0xbe>
   830c2:	68da      	ldr	r2, [r3, #12]
   830c4:	60ea      	str	r2, [r5, #12]
   830c6:	60ab      	str	r3, [r5, #8]
   830c8:	4640      	mov	r0, r8
   830ca:	6095      	str	r5, [r2, #8]
   830cc:	60dd      	str	r5, [r3, #12]
   830ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   830d2:	f000 bdd7 	b.w	83c84 <__malloc_unlock>
   830d6:	07ff      	lsls	r7, r7, #31
   830d8:	4402      	add	r2, r0
   830da:	d407      	bmi.n	830ec <_free_r+0xf8>
   830dc:	f854 4c08 	ldr.w	r4, [r4, #-8]
   830e0:	1b2d      	subs	r5, r5, r4
   830e2:	68eb      	ldr	r3, [r5, #12]
   830e4:	68a8      	ldr	r0, [r5, #8]
   830e6:	4422      	add	r2, r4
   830e8:	60c3      	str	r3, [r0, #12]
   830ea:	6098      	str	r0, [r3, #8]
   830ec:	4b2b      	ldr	r3, [pc, #172]	; (8319c <_free_r+0x1a8>)
   830ee:	f042 0001 	orr.w	r0, r2, #1
   830f2:	681b      	ldr	r3, [r3, #0]
   830f4:	6068      	str	r0, [r5, #4]
   830f6:	429a      	cmp	r2, r3
   830f8:	608d      	str	r5, [r1, #8]
   830fa:	d3c7      	bcc.n	8308c <_free_r+0x98>
   830fc:	4b28      	ldr	r3, [pc, #160]	; (831a0 <_free_r+0x1ac>)
   830fe:	4640      	mov	r0, r8
   83100:	6819      	ldr	r1, [r3, #0]
   83102:	f7ff ff29 	bl	82f58 <_malloc_trim_r>
   83106:	e7c1      	b.n	8308c <_free_r+0x98>
   83108:	1819      	adds	r1, r3, r0
   8310a:	6849      	ldr	r1, [r1, #4]
   8310c:	07c9      	lsls	r1, r1, #31
   8310e:	d409      	bmi.n	83124 <_free_r+0x130>
   83110:	68d9      	ldr	r1, [r3, #12]
   83112:	4402      	add	r2, r0
   83114:	689b      	ldr	r3, [r3, #8]
   83116:	f042 0001 	orr.w	r0, r2, #1
   8311a:	60d9      	str	r1, [r3, #12]
   8311c:	608b      	str	r3, [r1, #8]
   8311e:	6068      	str	r0, [r5, #4]
   83120:	50aa      	str	r2, [r5, r2]
   83122:	e7b3      	b.n	8308c <_free_r+0x98>
   83124:	f042 0301 	orr.w	r3, r2, #1
   83128:	606b      	str	r3, [r5, #4]
   8312a:	50aa      	str	r2, [r5, r2]
   8312c:	e7ae      	b.n	8308c <_free_r+0x98>
   8312e:	2b14      	cmp	r3, #20
   83130:	d814      	bhi.n	8315c <_free_r+0x168>
   83132:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   83136:	0060      	lsls	r0, r4, #1
   83138:	e7b5      	b.n	830a6 <_free_r+0xb2>
   8313a:	684a      	ldr	r2, [r1, #4]
   8313c:	10a4      	asrs	r4, r4, #2
   8313e:	2001      	movs	r0, #1
   83140:	40a0      	lsls	r0, r4
   83142:	4302      	orrs	r2, r0
   83144:	604a      	str	r2, [r1, #4]
   83146:	461a      	mov	r2, r3
   83148:	e7bc      	b.n	830c4 <_free_r+0xd0>
   8314a:	f042 0301 	orr.w	r3, r2, #1
   8314e:	614d      	str	r5, [r1, #20]
   83150:	610d      	str	r5, [r1, #16]
   83152:	60ec      	str	r4, [r5, #12]
   83154:	60ac      	str	r4, [r5, #8]
   83156:	606b      	str	r3, [r5, #4]
   83158:	50aa      	str	r2, [r5, r2]
   8315a:	e797      	b.n	8308c <_free_r+0x98>
   8315c:	2b54      	cmp	r3, #84	; 0x54
   8315e:	d804      	bhi.n	8316a <_free_r+0x176>
   83160:	0b13      	lsrs	r3, r2, #12
   83162:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   83166:	0060      	lsls	r0, r4, #1
   83168:	e79d      	b.n	830a6 <_free_r+0xb2>
   8316a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8316e:	d804      	bhi.n	8317a <_free_r+0x186>
   83170:	0bd3      	lsrs	r3, r2, #15
   83172:	f103 0477 	add.w	r4, r3, #119	; 0x77
   83176:	0060      	lsls	r0, r4, #1
   83178:	e795      	b.n	830a6 <_free_r+0xb2>
   8317a:	f240 5054 	movw	r0, #1364	; 0x554
   8317e:	4283      	cmp	r3, r0
   83180:	d804      	bhi.n	8318c <_free_r+0x198>
   83182:	0c93      	lsrs	r3, r2, #18
   83184:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   83188:	0060      	lsls	r0, r4, #1
   8318a:	e78c      	b.n	830a6 <_free_r+0xb2>
   8318c:	20fc      	movs	r0, #252	; 0xfc
   8318e:	247e      	movs	r4, #126	; 0x7e
   83190:	e789      	b.n	830a6 <_free_r+0xb2>
   83192:	bf00      	nop
   83194:	20070580 	.word	0x20070580
   83198:	20070588 	.word	0x20070588
   8319c:	20070988 	.word	0x20070988
   831a0:	200748b0 	.word	0x200748b0

000831a4 <__sfvwrite_r>:
   831a4:	6893      	ldr	r3, [r2, #8]
   831a6:	2b00      	cmp	r3, #0
   831a8:	f000 80b1 	beq.w	8330e <__sfvwrite_r+0x16a>
   831ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   831b0:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   831b4:	b083      	sub	sp, #12
   831b6:	f01e 0f08 	tst.w	lr, #8
   831ba:	460c      	mov	r4, r1
   831bc:	4681      	mov	r9, r0
   831be:	4616      	mov	r6, r2
   831c0:	d028      	beq.n	83214 <__sfvwrite_r+0x70>
   831c2:	690b      	ldr	r3, [r1, #16]
   831c4:	b333      	cbz	r3, 83214 <__sfvwrite_r+0x70>
   831c6:	f00e 0802 	and.w	r8, lr, #2
   831ca:	fa1f f088 	uxth.w	r0, r8
   831ce:	6835      	ldr	r5, [r6, #0]
   831d0:	b380      	cbz	r0, 83234 <__sfvwrite_r+0x90>
   831d2:	f04f 0b00 	mov.w	fp, #0
   831d6:	46d8      	mov	r8, fp
   831d8:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 834c0 <__sfvwrite_r+0x31c>
   831dc:	f1b8 0f00 	cmp.w	r8, #0
   831e0:	f000 808f 	beq.w	83302 <__sfvwrite_r+0x15e>
   831e4:	45d0      	cmp	r8, sl
   831e6:	4643      	mov	r3, r8
   831e8:	4648      	mov	r0, r9
   831ea:	bf28      	it	cs
   831ec:	4653      	movcs	r3, sl
   831ee:	69e1      	ldr	r1, [r4, #28]
   831f0:	465a      	mov	r2, fp
   831f2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   831f4:	47b8      	blx	r7
   831f6:	2800      	cmp	r0, #0
   831f8:	f340 80a8 	ble.w	8334c <__sfvwrite_r+0x1a8>
   831fc:	68b3      	ldr	r3, [r6, #8]
   831fe:	4483      	add	fp, r0
   83200:	1a1b      	subs	r3, r3, r0
   83202:	ebc0 0808 	rsb	r8, r0, r8
   83206:	60b3      	str	r3, [r6, #8]
   83208:	2b00      	cmp	r3, #0
   8320a:	d1e7      	bne.n	831dc <__sfvwrite_r+0x38>
   8320c:	2000      	movs	r0, #0
   8320e:	b003      	add	sp, #12
   83210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83214:	4648      	mov	r0, r9
   83216:	4621      	mov	r1, r4
   83218:	f7ff fc6a 	bl	82af0 <__swsetup_r>
   8321c:	2800      	cmp	r0, #0
   8321e:	f040 8146 	bne.w	834ae <__sfvwrite_r+0x30a>
   83222:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   83226:	6835      	ldr	r5, [r6, #0]
   83228:	f00e 0802 	and.w	r8, lr, #2
   8322c:	fa1f f088 	uxth.w	r0, r8
   83230:	2800      	cmp	r0, #0
   83232:	d1ce      	bne.n	831d2 <__sfvwrite_r+0x2e>
   83234:	f01e 0b01 	ands.w	fp, lr, #1
   83238:	f040 8091 	bne.w	8335e <__sfvwrite_r+0x1ba>
   8323c:	46d8      	mov	r8, fp
   8323e:	f1b8 0f00 	cmp.w	r8, #0
   83242:	d058      	beq.n	832f6 <__sfvwrite_r+0x152>
   83244:	f41e 7f00 	tst.w	lr, #512	; 0x200
   83248:	68a7      	ldr	r7, [r4, #8]
   8324a:	d062      	beq.n	83312 <__sfvwrite_r+0x16e>
   8324c:	45b8      	cmp	r8, r7
   8324e:	46ba      	mov	sl, r7
   83250:	f0c0 80c2 	bcc.w	833d8 <__sfvwrite_r+0x234>
   83254:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   83258:	f000 80c0 	beq.w	833dc <__sfvwrite_r+0x238>
   8325c:	6967      	ldr	r7, [r4, #20]
   8325e:	6921      	ldr	r1, [r4, #16]
   83260:	6823      	ldr	r3, [r4, #0]
   83262:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83266:	1a5b      	subs	r3, r3, r1
   83268:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8326c:	1c58      	adds	r0, r3, #1
   8326e:	107f      	asrs	r7, r7, #1
   83270:	4440      	add	r0, r8
   83272:	4287      	cmp	r7, r0
   83274:	463a      	mov	r2, r7
   83276:	bf3c      	itt	cc
   83278:	4607      	movcc	r7, r0
   8327a:	463a      	movcc	r2, r7
   8327c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   83280:	9300      	str	r3, [sp, #0]
   83282:	f000 80fb 	beq.w	8347c <__sfvwrite_r+0x2d8>
   83286:	4611      	mov	r1, r2
   83288:	4648      	mov	r0, r9
   8328a:	f000 f9c5 	bl	83618 <_malloc_r>
   8328e:	9b00      	ldr	r3, [sp, #0]
   83290:	4682      	mov	sl, r0
   83292:	2800      	cmp	r0, #0
   83294:	f000 810e 	beq.w	834b4 <__sfvwrite_r+0x310>
   83298:	461a      	mov	r2, r3
   8329a:	6921      	ldr	r1, [r4, #16]
   8329c:	9300      	str	r3, [sp, #0]
   8329e:	f7fe fbf7 	bl	81a90 <memcpy>
   832a2:	89a2      	ldrh	r2, [r4, #12]
   832a4:	9b00      	ldr	r3, [sp, #0]
   832a6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   832aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   832ae:	81a2      	strh	r2, [r4, #12]
   832b0:	eb0a 0003 	add.w	r0, sl, r3
   832b4:	f8c4 a010 	str.w	sl, [r4, #16]
   832b8:	1afb      	subs	r3, r7, r3
   832ba:	6167      	str	r7, [r4, #20]
   832bc:	46c2      	mov	sl, r8
   832be:	4647      	mov	r7, r8
   832c0:	6020      	str	r0, [r4, #0]
   832c2:	60a3      	str	r3, [r4, #8]
   832c4:	4652      	mov	r2, sl
   832c6:	4659      	mov	r1, fp
   832c8:	f000 fc76 	bl	83bb8 <memmove>
   832cc:	68a0      	ldr	r0, [r4, #8]
   832ce:	6822      	ldr	r2, [r4, #0]
   832d0:	1bc0      	subs	r0, r0, r7
   832d2:	60a0      	str	r0, [r4, #8]
   832d4:	4640      	mov	r0, r8
   832d6:	eb02 030a 	add.w	r3, r2, sl
   832da:	6023      	str	r3, [r4, #0]
   832dc:	68b3      	ldr	r3, [r6, #8]
   832de:	4483      	add	fp, r0
   832e0:	1a1b      	subs	r3, r3, r0
   832e2:	ebc0 0808 	rsb	r8, r0, r8
   832e6:	60b3      	str	r3, [r6, #8]
   832e8:	2b00      	cmp	r3, #0
   832ea:	d08f      	beq.n	8320c <__sfvwrite_r+0x68>
   832ec:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   832f0:	f1b8 0f00 	cmp.w	r8, #0
   832f4:	d1a6      	bne.n	83244 <__sfvwrite_r+0xa0>
   832f6:	f8d5 b000 	ldr.w	fp, [r5]
   832fa:	f8d5 8004 	ldr.w	r8, [r5, #4]
   832fe:	3508      	adds	r5, #8
   83300:	e79d      	b.n	8323e <__sfvwrite_r+0x9a>
   83302:	f8d5 b000 	ldr.w	fp, [r5]
   83306:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8330a:	3508      	adds	r5, #8
   8330c:	e766      	b.n	831dc <__sfvwrite_r+0x38>
   8330e:	2000      	movs	r0, #0
   83310:	4770      	bx	lr
   83312:	6820      	ldr	r0, [r4, #0]
   83314:	6923      	ldr	r3, [r4, #16]
   83316:	4298      	cmp	r0, r3
   83318:	d803      	bhi.n	83322 <__sfvwrite_r+0x17e>
   8331a:	6962      	ldr	r2, [r4, #20]
   8331c:	4590      	cmp	r8, r2
   8331e:	f080 8085 	bcs.w	8342c <__sfvwrite_r+0x288>
   83322:	4547      	cmp	r7, r8
   83324:	bf28      	it	cs
   83326:	4647      	movcs	r7, r8
   83328:	4659      	mov	r1, fp
   8332a:	463a      	mov	r2, r7
   8332c:	f000 fc44 	bl	83bb8 <memmove>
   83330:	68a3      	ldr	r3, [r4, #8]
   83332:	6822      	ldr	r2, [r4, #0]
   83334:	1bdb      	subs	r3, r3, r7
   83336:	443a      	add	r2, r7
   83338:	60a3      	str	r3, [r4, #8]
   8333a:	6022      	str	r2, [r4, #0]
   8333c:	2b00      	cmp	r3, #0
   8333e:	d149      	bne.n	833d4 <__sfvwrite_r+0x230>
   83340:	4648      	mov	r0, r9
   83342:	4621      	mov	r1, r4
   83344:	f7ff fcea 	bl	82d1c <_fflush_r>
   83348:	2800      	cmp	r0, #0
   8334a:	d043      	beq.n	833d4 <__sfvwrite_r+0x230>
   8334c:	89a3      	ldrh	r3, [r4, #12]
   8334e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83352:	f04f 30ff 	mov.w	r0, #4294967295
   83356:	81a3      	strh	r3, [r4, #12]
   83358:	b003      	add	sp, #12
   8335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8335e:	4680      	mov	r8, r0
   83360:	4683      	mov	fp, r0
   83362:	4682      	mov	sl, r0
   83364:	9000      	str	r0, [sp, #0]
   83366:	f1ba 0f00 	cmp.w	sl, #0
   8336a:	d02b      	beq.n	833c4 <__sfvwrite_r+0x220>
   8336c:	9b00      	ldr	r3, [sp, #0]
   8336e:	2b00      	cmp	r3, #0
   83370:	d04f      	beq.n	83412 <__sfvwrite_r+0x26e>
   83372:	45d0      	cmp	r8, sl
   83374:	4643      	mov	r3, r8
   83376:	bf28      	it	cs
   83378:	4653      	movcs	r3, sl
   8337a:	6820      	ldr	r0, [r4, #0]
   8337c:	6921      	ldr	r1, [r4, #16]
   8337e:	461f      	mov	r7, r3
   83380:	4288      	cmp	r0, r1
   83382:	f8d4 e008 	ldr.w	lr, [r4, #8]
   83386:	6962      	ldr	r2, [r4, #20]
   83388:	d903      	bls.n	83392 <__sfvwrite_r+0x1ee>
   8338a:	eb0e 0c02 	add.w	ip, lr, r2
   8338e:	4563      	cmp	r3, ip
   83390:	dc5e      	bgt.n	83450 <__sfvwrite_r+0x2ac>
   83392:	4293      	cmp	r3, r2
   83394:	db24      	blt.n	833e0 <__sfvwrite_r+0x23c>
   83396:	4613      	mov	r3, r2
   83398:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8339a:	4648      	mov	r0, r9
   8339c:	69e1      	ldr	r1, [r4, #28]
   8339e:	465a      	mov	r2, fp
   833a0:	47b8      	blx	r7
   833a2:	1e07      	subs	r7, r0, #0
   833a4:	ddd2      	ble.n	8334c <__sfvwrite_r+0x1a8>
   833a6:	ebb8 0807 	subs.w	r8, r8, r7
   833aa:	d029      	beq.n	83400 <__sfvwrite_r+0x25c>
   833ac:	68b3      	ldr	r3, [r6, #8]
   833ae:	44bb      	add	fp, r7
   833b0:	1bdb      	subs	r3, r3, r7
   833b2:	ebc7 0a0a 	rsb	sl, r7, sl
   833b6:	60b3      	str	r3, [r6, #8]
   833b8:	2b00      	cmp	r3, #0
   833ba:	f43f af27 	beq.w	8320c <__sfvwrite_r+0x68>
   833be:	f1ba 0f00 	cmp.w	sl, #0
   833c2:	d1d3      	bne.n	8336c <__sfvwrite_r+0x1c8>
   833c4:	2300      	movs	r3, #0
   833c6:	f8d5 b000 	ldr.w	fp, [r5]
   833ca:	f8d5 a004 	ldr.w	sl, [r5, #4]
   833ce:	9300      	str	r3, [sp, #0]
   833d0:	3508      	adds	r5, #8
   833d2:	e7c8      	b.n	83366 <__sfvwrite_r+0x1c2>
   833d4:	4638      	mov	r0, r7
   833d6:	e781      	b.n	832dc <__sfvwrite_r+0x138>
   833d8:	4647      	mov	r7, r8
   833da:	46c2      	mov	sl, r8
   833dc:	6820      	ldr	r0, [r4, #0]
   833de:	e771      	b.n	832c4 <__sfvwrite_r+0x120>
   833e0:	461a      	mov	r2, r3
   833e2:	4659      	mov	r1, fp
   833e4:	9301      	str	r3, [sp, #4]
   833e6:	f000 fbe7 	bl	83bb8 <memmove>
   833ea:	68a2      	ldr	r2, [r4, #8]
   833ec:	6821      	ldr	r1, [r4, #0]
   833ee:	9b01      	ldr	r3, [sp, #4]
   833f0:	ebb8 0807 	subs.w	r8, r8, r7
   833f4:	eba2 0203 	sub.w	r2, r2, r3
   833f8:	440b      	add	r3, r1
   833fa:	60a2      	str	r2, [r4, #8]
   833fc:	6023      	str	r3, [r4, #0]
   833fe:	d1d5      	bne.n	833ac <__sfvwrite_r+0x208>
   83400:	4648      	mov	r0, r9
   83402:	4621      	mov	r1, r4
   83404:	f7ff fc8a 	bl	82d1c <_fflush_r>
   83408:	2800      	cmp	r0, #0
   8340a:	d19f      	bne.n	8334c <__sfvwrite_r+0x1a8>
   8340c:	f8cd 8000 	str.w	r8, [sp]
   83410:	e7cc      	b.n	833ac <__sfvwrite_r+0x208>
   83412:	4658      	mov	r0, fp
   83414:	210a      	movs	r1, #10
   83416:	4652      	mov	r2, sl
   83418:	f000 fb84 	bl	83b24 <memchr>
   8341c:	2800      	cmp	r0, #0
   8341e:	d041      	beq.n	834a4 <__sfvwrite_r+0x300>
   83420:	3001      	adds	r0, #1
   83422:	2301      	movs	r3, #1
   83424:	ebcb 0800 	rsb	r8, fp, r0
   83428:	9300      	str	r3, [sp, #0]
   8342a:	e7a2      	b.n	83372 <__sfvwrite_r+0x1ce>
   8342c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   83430:	4543      	cmp	r3, r8
   83432:	bf28      	it	cs
   83434:	4643      	movcs	r3, r8
   83436:	fb93 f3f2 	sdiv	r3, r3, r2
   8343a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8343c:	fb03 f302 	mul.w	r3, r3, r2
   83440:	4648      	mov	r0, r9
   83442:	69e1      	ldr	r1, [r4, #28]
   83444:	465a      	mov	r2, fp
   83446:	47b8      	blx	r7
   83448:	2800      	cmp	r0, #0
   8344a:	f73f af47 	bgt.w	832dc <__sfvwrite_r+0x138>
   8344e:	e77d      	b.n	8334c <__sfvwrite_r+0x1a8>
   83450:	4662      	mov	r2, ip
   83452:	4659      	mov	r1, fp
   83454:	f8cd c004 	str.w	ip, [sp, #4]
   83458:	f000 fbae 	bl	83bb8 <memmove>
   8345c:	6823      	ldr	r3, [r4, #0]
   8345e:	f8dd c004 	ldr.w	ip, [sp, #4]
   83462:	4648      	mov	r0, r9
   83464:	4463      	add	r3, ip
   83466:	6023      	str	r3, [r4, #0]
   83468:	4621      	mov	r1, r4
   8346a:	f7ff fc57 	bl	82d1c <_fflush_r>
   8346e:	f8dd c004 	ldr.w	ip, [sp, #4]
   83472:	2800      	cmp	r0, #0
   83474:	f47f af6a 	bne.w	8334c <__sfvwrite_r+0x1a8>
   83478:	4667      	mov	r7, ip
   8347a:	e794      	b.n	833a6 <__sfvwrite_r+0x202>
   8347c:	4648      	mov	r0, r9
   8347e:	f000 fc03 	bl	83c88 <_realloc_r>
   83482:	9b00      	ldr	r3, [sp, #0]
   83484:	4682      	mov	sl, r0
   83486:	2800      	cmp	r0, #0
   83488:	f47f af12 	bne.w	832b0 <__sfvwrite_r+0x10c>
   8348c:	4648      	mov	r0, r9
   8348e:	6921      	ldr	r1, [r4, #16]
   83490:	f7ff fdb0 	bl	82ff4 <_free_r>
   83494:	89a3      	ldrh	r3, [r4, #12]
   83496:	220c      	movs	r2, #12
   83498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8349c:	b29b      	uxth	r3, r3
   8349e:	f8c9 2000 	str.w	r2, [r9]
   834a2:	e754      	b.n	8334e <__sfvwrite_r+0x1aa>
   834a4:	2301      	movs	r3, #1
   834a6:	f10a 0801 	add.w	r8, sl, #1
   834aa:	9300      	str	r3, [sp, #0]
   834ac:	e761      	b.n	83372 <__sfvwrite_r+0x1ce>
   834ae:	f04f 30ff 	mov.w	r0, #4294967295
   834b2:	e6ac      	b.n	8320e <__sfvwrite_r+0x6a>
   834b4:	230c      	movs	r3, #12
   834b6:	f8c9 3000 	str.w	r3, [r9]
   834ba:	89a3      	ldrh	r3, [r4, #12]
   834bc:	e747      	b.n	8334e <__sfvwrite_r+0x1aa>
   834be:	bf00      	nop
   834c0:	7ffffc00 	.word	0x7ffffc00

000834c4 <_fwalk_reent>:
   834c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   834c8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   834cc:	d01e      	beq.n	8350c <_fwalk_reent+0x48>
   834ce:	4688      	mov	r8, r1
   834d0:	4607      	mov	r7, r0
   834d2:	f04f 0900 	mov.w	r9, #0
   834d6:	6875      	ldr	r5, [r6, #4]
   834d8:	68b4      	ldr	r4, [r6, #8]
   834da:	3d01      	subs	r5, #1
   834dc:	d410      	bmi.n	83500 <_fwalk_reent+0x3c>
   834de:	89a3      	ldrh	r3, [r4, #12]
   834e0:	3d01      	subs	r5, #1
   834e2:	2b01      	cmp	r3, #1
   834e4:	d908      	bls.n	834f8 <_fwalk_reent+0x34>
   834e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   834ea:	3301      	adds	r3, #1
   834ec:	d004      	beq.n	834f8 <_fwalk_reent+0x34>
   834ee:	4638      	mov	r0, r7
   834f0:	4621      	mov	r1, r4
   834f2:	47c0      	blx	r8
   834f4:	ea49 0900 	orr.w	r9, r9, r0
   834f8:	1c6b      	adds	r3, r5, #1
   834fa:	f104 0468 	add.w	r4, r4, #104	; 0x68
   834fe:	d1ee      	bne.n	834de <_fwalk_reent+0x1a>
   83500:	6836      	ldr	r6, [r6, #0]
   83502:	2e00      	cmp	r6, #0
   83504:	d1e7      	bne.n	834d6 <_fwalk_reent+0x12>
   83506:	4648      	mov	r0, r9
   83508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8350c:	46b1      	mov	r9, r6
   8350e:	4648      	mov	r0, r9
   83510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083514 <__locale_charset>:
   83514:	4800      	ldr	r0, [pc, #0]	; (83518 <__locale_charset+0x4>)
   83516:	4770      	bx	lr
   83518:	2007055c 	.word	0x2007055c

0008351c <__locale_mb_cur_max>:
   8351c:	4b01      	ldr	r3, [pc, #4]	; (83524 <__locale_mb_cur_max+0x8>)
   8351e:	6818      	ldr	r0, [r3, #0]
   83520:	4770      	bx	lr
   83522:	bf00      	nop
   83524:	2007057c 	.word	0x2007057c

00083528 <__smakebuf_r>:
   83528:	898b      	ldrh	r3, [r1, #12]
   8352a:	b29a      	uxth	r2, r3
   8352c:	f012 0f02 	tst.w	r2, #2
   83530:	d13c      	bne.n	835ac <__smakebuf_r+0x84>
   83532:	b5f0      	push	{r4, r5, r6, r7, lr}
   83534:	460c      	mov	r4, r1
   83536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8353a:	b091      	sub	sp, #68	; 0x44
   8353c:	2900      	cmp	r1, #0
   8353e:	4605      	mov	r5, r0
   83540:	db19      	blt.n	83576 <__smakebuf_r+0x4e>
   83542:	aa01      	add	r2, sp, #4
   83544:	f000 ff2a 	bl	8439c <_fstat_r>
   83548:	2800      	cmp	r0, #0
   8354a:	db12      	blt.n	83572 <__smakebuf_r+0x4a>
   8354c:	9b02      	ldr	r3, [sp, #8]
   8354e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83552:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   83556:	fab7 f787 	clz	r7, r7
   8355a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8355e:	ea4f 1757 	mov.w	r7, r7, lsr #5
   83562:	d02a      	beq.n	835ba <__smakebuf_r+0x92>
   83564:	89a3      	ldrh	r3, [r4, #12]
   83566:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8356a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8356e:	81a3      	strh	r3, [r4, #12]
   83570:	e00b      	b.n	8358a <__smakebuf_r+0x62>
   83572:	89a3      	ldrh	r3, [r4, #12]
   83574:	b29a      	uxth	r2, r3
   83576:	f012 0f80 	tst.w	r2, #128	; 0x80
   8357a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8357e:	81a3      	strh	r3, [r4, #12]
   83580:	bf0c      	ite	eq
   83582:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83586:	2640      	movne	r6, #64	; 0x40
   83588:	2700      	movs	r7, #0
   8358a:	4628      	mov	r0, r5
   8358c:	4631      	mov	r1, r6
   8358e:	f000 f843 	bl	83618 <_malloc_r>
   83592:	89a3      	ldrh	r3, [r4, #12]
   83594:	b340      	cbz	r0, 835e8 <__smakebuf_r+0xc0>
   83596:	4a1a      	ldr	r2, [pc, #104]	; (83600 <__smakebuf_r+0xd8>)
   83598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8359c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8359e:	81a3      	strh	r3, [r4, #12]
   835a0:	6020      	str	r0, [r4, #0]
   835a2:	6120      	str	r0, [r4, #16]
   835a4:	6166      	str	r6, [r4, #20]
   835a6:	b99f      	cbnz	r7, 835d0 <__smakebuf_r+0xa8>
   835a8:	b011      	add	sp, #68	; 0x44
   835aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   835ac:	f101 0343 	add.w	r3, r1, #67	; 0x43
   835b0:	2201      	movs	r2, #1
   835b2:	600b      	str	r3, [r1, #0]
   835b4:	610b      	str	r3, [r1, #16]
   835b6:	614a      	str	r2, [r1, #20]
   835b8:	4770      	bx	lr
   835ba:	4b12      	ldr	r3, [pc, #72]	; (83604 <__smakebuf_r+0xdc>)
   835bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   835be:	429a      	cmp	r2, r3
   835c0:	d1d0      	bne.n	83564 <__smakebuf_r+0x3c>
   835c2:	89a3      	ldrh	r3, [r4, #12]
   835c4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   835c8:	4333      	orrs	r3, r6
   835ca:	81a3      	strh	r3, [r4, #12]
   835cc:	64e6      	str	r6, [r4, #76]	; 0x4c
   835ce:	e7dc      	b.n	8358a <__smakebuf_r+0x62>
   835d0:	4628      	mov	r0, r5
   835d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   835d6:	f000 fef5 	bl	843c4 <_isatty_r>
   835da:	2800      	cmp	r0, #0
   835dc:	d0e4      	beq.n	835a8 <__smakebuf_r+0x80>
   835de:	89a3      	ldrh	r3, [r4, #12]
   835e0:	f043 0301 	orr.w	r3, r3, #1
   835e4:	81a3      	strh	r3, [r4, #12]
   835e6:	e7df      	b.n	835a8 <__smakebuf_r+0x80>
   835e8:	059a      	lsls	r2, r3, #22
   835ea:	d4dd      	bmi.n	835a8 <__smakebuf_r+0x80>
   835ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
   835f0:	f043 0302 	orr.w	r3, r3, #2
   835f4:	2101      	movs	r1, #1
   835f6:	81a3      	strh	r3, [r4, #12]
   835f8:	6022      	str	r2, [r4, #0]
   835fa:	6122      	str	r2, [r4, #16]
   835fc:	6161      	str	r1, [r4, #20]
   835fe:	e7d3      	b.n	835a8 <__smakebuf_r+0x80>
   83600:	00082d49 	.word	0x00082d49
   83604:	000840e9 	.word	0x000840e9

00083608 <malloc>:
   83608:	4b02      	ldr	r3, [pc, #8]	; (83614 <malloc+0xc>)
   8360a:	4601      	mov	r1, r0
   8360c:	6818      	ldr	r0, [r3, #0]
   8360e:	f000 b803 	b.w	83618 <_malloc_r>
   83612:	bf00      	nop
   83614:	20070558 	.word	0x20070558

00083618 <_malloc_r>:
   83618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8361c:	f101 050b 	add.w	r5, r1, #11
   83620:	2d16      	cmp	r5, #22
   83622:	b083      	sub	sp, #12
   83624:	4606      	mov	r6, r0
   83626:	d927      	bls.n	83678 <_malloc_r+0x60>
   83628:	f035 0507 	bics.w	r5, r5, #7
   8362c:	f100 80b6 	bmi.w	8379c <_malloc_r+0x184>
   83630:	42a9      	cmp	r1, r5
   83632:	f200 80b3 	bhi.w	8379c <_malloc_r+0x184>
   83636:	f000 fb23 	bl	83c80 <__malloc_lock>
   8363a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8363e:	d222      	bcs.n	83686 <_malloc_r+0x6e>
   83640:	4fbc      	ldr	r7, [pc, #752]	; (83934 <_malloc_r+0x31c>)
   83642:	08e8      	lsrs	r0, r5, #3
   83644:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   83648:	68dc      	ldr	r4, [r3, #12]
   8364a:	429c      	cmp	r4, r3
   8364c:	f000 81bc 	beq.w	839c8 <_malloc_r+0x3b0>
   83650:	6863      	ldr	r3, [r4, #4]
   83652:	68e1      	ldr	r1, [r4, #12]
   83654:	f023 0303 	bic.w	r3, r3, #3
   83658:	4423      	add	r3, r4
   8365a:	685a      	ldr	r2, [r3, #4]
   8365c:	68a5      	ldr	r5, [r4, #8]
   8365e:	f042 0201 	orr.w	r2, r2, #1
   83662:	60e9      	str	r1, [r5, #12]
   83664:	4630      	mov	r0, r6
   83666:	608d      	str	r5, [r1, #8]
   83668:	605a      	str	r2, [r3, #4]
   8366a:	f000 fb0b 	bl	83c84 <__malloc_unlock>
   8366e:	3408      	adds	r4, #8
   83670:	4620      	mov	r0, r4
   83672:	b003      	add	sp, #12
   83674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83678:	2910      	cmp	r1, #16
   8367a:	f200 808f 	bhi.w	8379c <_malloc_r+0x184>
   8367e:	f000 faff 	bl	83c80 <__malloc_lock>
   83682:	2510      	movs	r5, #16
   83684:	e7dc      	b.n	83640 <_malloc_r+0x28>
   83686:	0a68      	lsrs	r0, r5, #9
   83688:	f000 808f 	beq.w	837aa <_malloc_r+0x192>
   8368c:	2804      	cmp	r0, #4
   8368e:	f200 8147 	bhi.w	83920 <_malloc_r+0x308>
   83692:	09a8      	lsrs	r0, r5, #6
   83694:	3038      	adds	r0, #56	; 0x38
   83696:	0041      	lsls	r1, r0, #1
   83698:	4fa6      	ldr	r7, [pc, #664]	; (83934 <_malloc_r+0x31c>)
   8369a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8369e:	68cc      	ldr	r4, [r1, #12]
   836a0:	42a1      	cmp	r1, r4
   836a2:	d106      	bne.n	836b2 <_malloc_r+0x9a>
   836a4:	e00c      	b.n	836c0 <_malloc_r+0xa8>
   836a6:	2a00      	cmp	r2, #0
   836a8:	f280 8082 	bge.w	837b0 <_malloc_r+0x198>
   836ac:	68e4      	ldr	r4, [r4, #12]
   836ae:	42a1      	cmp	r1, r4
   836b0:	d006      	beq.n	836c0 <_malloc_r+0xa8>
   836b2:	6863      	ldr	r3, [r4, #4]
   836b4:	f023 0303 	bic.w	r3, r3, #3
   836b8:	1b5a      	subs	r2, r3, r5
   836ba:	2a0f      	cmp	r2, #15
   836bc:	ddf3      	ble.n	836a6 <_malloc_r+0x8e>
   836be:	3801      	subs	r0, #1
   836c0:	3001      	adds	r0, #1
   836c2:	499c      	ldr	r1, [pc, #624]	; (83934 <_malloc_r+0x31c>)
   836c4:	693c      	ldr	r4, [r7, #16]
   836c6:	f101 0e08 	add.w	lr, r1, #8
   836ca:	4574      	cmp	r4, lr
   836cc:	f000 8171 	beq.w	839b2 <_malloc_r+0x39a>
   836d0:	6863      	ldr	r3, [r4, #4]
   836d2:	f023 0303 	bic.w	r3, r3, #3
   836d6:	1b5a      	subs	r2, r3, r5
   836d8:	2a0f      	cmp	r2, #15
   836da:	f300 8157 	bgt.w	8398c <_malloc_r+0x374>
   836de:	2a00      	cmp	r2, #0
   836e0:	f8c1 e014 	str.w	lr, [r1, #20]
   836e4:	f8c1 e010 	str.w	lr, [r1, #16]
   836e8:	da66      	bge.n	837b8 <_malloc_r+0x1a0>
   836ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   836ee:	f080 812d 	bcs.w	8394c <_malloc_r+0x334>
   836f2:	08db      	lsrs	r3, r3, #3
   836f4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   836f8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   836fc:	684a      	ldr	r2, [r1, #4]
   836fe:	2301      	movs	r3, #1
   83700:	fa03 f30c 	lsl.w	r3, r3, ip
   83704:	f8d8 c008 	ldr.w	ip, [r8, #8]
   83708:	4313      	orrs	r3, r2
   8370a:	f8c4 c008 	str.w	ip, [r4, #8]
   8370e:	f8c4 800c 	str.w	r8, [r4, #12]
   83712:	604b      	str	r3, [r1, #4]
   83714:	f8c8 4008 	str.w	r4, [r8, #8]
   83718:	f8cc 400c 	str.w	r4, [ip, #12]
   8371c:	1082      	asrs	r2, r0, #2
   8371e:	2401      	movs	r4, #1
   83720:	4094      	lsls	r4, r2
   83722:	429c      	cmp	r4, r3
   83724:	d855      	bhi.n	837d2 <_malloc_r+0x1ba>
   83726:	4223      	tst	r3, r4
   83728:	d106      	bne.n	83738 <_malloc_r+0x120>
   8372a:	f020 0003 	bic.w	r0, r0, #3
   8372e:	0064      	lsls	r4, r4, #1
   83730:	4223      	tst	r3, r4
   83732:	f100 0004 	add.w	r0, r0, #4
   83736:	d0fa      	beq.n	8372e <_malloc_r+0x116>
   83738:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   8373c:	46c4      	mov	ip, r8
   8373e:	4681      	mov	r9, r0
   83740:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83744:	459c      	cmp	ip, r3
   83746:	d107      	bne.n	83758 <_malloc_r+0x140>
   83748:	e135      	b.n	839b6 <_malloc_r+0x39e>
   8374a:	2900      	cmp	r1, #0
   8374c:	f280 8145 	bge.w	839da <_malloc_r+0x3c2>
   83750:	68db      	ldr	r3, [r3, #12]
   83752:	459c      	cmp	ip, r3
   83754:	f000 812f 	beq.w	839b6 <_malloc_r+0x39e>
   83758:	685a      	ldr	r2, [r3, #4]
   8375a:	f022 0203 	bic.w	r2, r2, #3
   8375e:	1b51      	subs	r1, r2, r5
   83760:	290f      	cmp	r1, #15
   83762:	ddf2      	ble.n	8374a <_malloc_r+0x132>
   83764:	461c      	mov	r4, r3
   83766:	68da      	ldr	r2, [r3, #12]
   83768:	f854 cf08 	ldr.w	ip, [r4, #8]!
   8376c:	f045 0901 	orr.w	r9, r5, #1
   83770:	f041 0801 	orr.w	r8, r1, #1
   83774:	441d      	add	r5, r3
   83776:	f8c3 9004 	str.w	r9, [r3, #4]
   8377a:	4630      	mov	r0, r6
   8377c:	f8cc 200c 	str.w	r2, [ip, #12]
   83780:	f8c2 c008 	str.w	ip, [r2, #8]
   83784:	617d      	str	r5, [r7, #20]
   83786:	613d      	str	r5, [r7, #16]
   83788:	f8c5 e00c 	str.w	lr, [r5, #12]
   8378c:	f8c5 e008 	str.w	lr, [r5, #8]
   83790:	f8c5 8004 	str.w	r8, [r5, #4]
   83794:	5069      	str	r1, [r5, r1]
   83796:	f000 fa75 	bl	83c84 <__malloc_unlock>
   8379a:	e769      	b.n	83670 <_malloc_r+0x58>
   8379c:	2400      	movs	r4, #0
   8379e:	4620      	mov	r0, r4
   837a0:	230c      	movs	r3, #12
   837a2:	6033      	str	r3, [r6, #0]
   837a4:	b003      	add	sp, #12
   837a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837aa:	217e      	movs	r1, #126	; 0x7e
   837ac:	203f      	movs	r0, #63	; 0x3f
   837ae:	e773      	b.n	83698 <_malloc_r+0x80>
   837b0:	4423      	add	r3, r4
   837b2:	685a      	ldr	r2, [r3, #4]
   837b4:	68e1      	ldr	r1, [r4, #12]
   837b6:	e751      	b.n	8365c <_malloc_r+0x44>
   837b8:	4423      	add	r3, r4
   837ba:	685a      	ldr	r2, [r3, #4]
   837bc:	4630      	mov	r0, r6
   837be:	f042 0201 	orr.w	r2, r2, #1
   837c2:	605a      	str	r2, [r3, #4]
   837c4:	3408      	adds	r4, #8
   837c6:	f000 fa5d 	bl	83c84 <__malloc_unlock>
   837ca:	4620      	mov	r0, r4
   837cc:	b003      	add	sp, #12
   837ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837d2:	68bc      	ldr	r4, [r7, #8]
   837d4:	6863      	ldr	r3, [r4, #4]
   837d6:	f023 0803 	bic.w	r8, r3, #3
   837da:	4545      	cmp	r5, r8
   837dc:	d804      	bhi.n	837e8 <_malloc_r+0x1d0>
   837de:	ebc5 0308 	rsb	r3, r5, r8
   837e2:	2b0f      	cmp	r3, #15
   837e4:	f300 808c 	bgt.w	83900 <_malloc_r+0x2e8>
   837e8:	4b53      	ldr	r3, [pc, #332]	; (83938 <_malloc_r+0x320>)
   837ea:	f8df a15c 	ldr.w	sl, [pc, #348]	; 83948 <_malloc_r+0x330>
   837ee:	681a      	ldr	r2, [r3, #0]
   837f0:	f8da 3000 	ldr.w	r3, [sl]
   837f4:	442a      	add	r2, r5
   837f6:	3301      	adds	r3, #1
   837f8:	eb04 0b08 	add.w	fp, r4, r8
   837fc:	f000 8151 	beq.w	83aa2 <_malloc_r+0x48a>
   83800:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   83804:	320f      	adds	r2, #15
   83806:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8380a:	f022 020f 	bic.w	r2, r2, #15
   8380e:	4611      	mov	r1, r2
   83810:	4630      	mov	r0, r6
   83812:	9201      	str	r2, [sp, #4]
   83814:	f000 fc28 	bl	84068 <_sbrk_r>
   83818:	f1b0 3fff 	cmp.w	r0, #4294967295
   8381c:	4681      	mov	r9, r0
   8381e:	9a01      	ldr	r2, [sp, #4]
   83820:	f000 8148 	beq.w	83ab4 <_malloc_r+0x49c>
   83824:	4583      	cmp	fp, r0
   83826:	f200 80ef 	bhi.w	83a08 <_malloc_r+0x3f0>
   8382a:	4b44      	ldr	r3, [pc, #272]	; (8393c <_malloc_r+0x324>)
   8382c:	45cb      	cmp	fp, r9
   8382e:	6819      	ldr	r1, [r3, #0]
   83830:	4411      	add	r1, r2
   83832:	6019      	str	r1, [r3, #0]
   83834:	f000 8143 	beq.w	83abe <_malloc_r+0x4a6>
   83838:	f8da 0000 	ldr.w	r0, [sl]
   8383c:	f8df e108 	ldr.w	lr, [pc, #264]	; 83948 <_malloc_r+0x330>
   83840:	3001      	adds	r0, #1
   83842:	bf1b      	ittet	ne
   83844:	ebcb 0b09 	rsbne	fp, fp, r9
   83848:	4459      	addne	r1, fp
   8384a:	f8ce 9000 	streq.w	r9, [lr]
   8384e:	6019      	strne	r1, [r3, #0]
   83850:	f019 0107 	ands.w	r1, r9, #7
   83854:	f000 8108 	beq.w	83a68 <_malloc_r+0x450>
   83858:	f1c1 0008 	rsb	r0, r1, #8
   8385c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83860:	4481      	add	r9, r0
   83862:	3108      	adds	r1, #8
   83864:	444a      	add	r2, r9
   83866:	f3c2 020b 	ubfx	r2, r2, #0, #12
   8386a:	ebc2 0a01 	rsb	sl, r2, r1
   8386e:	4651      	mov	r1, sl
   83870:	4630      	mov	r0, r6
   83872:	9301      	str	r3, [sp, #4]
   83874:	f000 fbf8 	bl	84068 <_sbrk_r>
   83878:	1c43      	adds	r3, r0, #1
   8387a:	9b01      	ldr	r3, [sp, #4]
   8387c:	f000 812d 	beq.w	83ada <_malloc_r+0x4c2>
   83880:	ebc9 0200 	rsb	r2, r9, r0
   83884:	4452      	add	r2, sl
   83886:	f042 0201 	orr.w	r2, r2, #1
   8388a:	6819      	ldr	r1, [r3, #0]
   8388c:	42bc      	cmp	r4, r7
   8388e:	4451      	add	r1, sl
   83890:	f8c7 9008 	str.w	r9, [r7, #8]
   83894:	6019      	str	r1, [r3, #0]
   83896:	f8c9 2004 	str.w	r2, [r9, #4]
   8389a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8393c <_malloc_r+0x324>
   8389e:	d016      	beq.n	838ce <_malloc_r+0x2b6>
   838a0:	f1b8 0f0f 	cmp.w	r8, #15
   838a4:	f240 80ef 	bls.w	83a86 <_malloc_r+0x46e>
   838a8:	6862      	ldr	r2, [r4, #4]
   838aa:	f1a8 030c 	sub.w	r3, r8, #12
   838ae:	f023 0307 	bic.w	r3, r3, #7
   838b2:	f002 0201 	and.w	r2, r2, #1
   838b6:	18e0      	adds	r0, r4, r3
   838b8:	f04f 0e05 	mov.w	lr, #5
   838bc:	431a      	orrs	r2, r3
   838be:	2b0f      	cmp	r3, #15
   838c0:	6062      	str	r2, [r4, #4]
   838c2:	f8c0 e004 	str.w	lr, [r0, #4]
   838c6:	f8c0 e008 	str.w	lr, [r0, #8]
   838ca:	f200 810a 	bhi.w	83ae2 <_malloc_r+0x4ca>
   838ce:	4b1c      	ldr	r3, [pc, #112]	; (83940 <_malloc_r+0x328>)
   838d0:	68bc      	ldr	r4, [r7, #8]
   838d2:	681a      	ldr	r2, [r3, #0]
   838d4:	4291      	cmp	r1, r2
   838d6:	bf88      	it	hi
   838d8:	6019      	strhi	r1, [r3, #0]
   838da:	4b1a      	ldr	r3, [pc, #104]	; (83944 <_malloc_r+0x32c>)
   838dc:	681a      	ldr	r2, [r3, #0]
   838de:	4291      	cmp	r1, r2
   838e0:	6862      	ldr	r2, [r4, #4]
   838e2:	bf88      	it	hi
   838e4:	6019      	strhi	r1, [r3, #0]
   838e6:	f022 0203 	bic.w	r2, r2, #3
   838ea:	4295      	cmp	r5, r2
   838ec:	eba2 0305 	sub.w	r3, r2, r5
   838f0:	d801      	bhi.n	838f6 <_malloc_r+0x2de>
   838f2:	2b0f      	cmp	r3, #15
   838f4:	dc04      	bgt.n	83900 <_malloc_r+0x2e8>
   838f6:	4630      	mov	r0, r6
   838f8:	f000 f9c4 	bl	83c84 <__malloc_unlock>
   838fc:	2400      	movs	r4, #0
   838fe:	e6b7      	b.n	83670 <_malloc_r+0x58>
   83900:	f045 0201 	orr.w	r2, r5, #1
   83904:	f043 0301 	orr.w	r3, r3, #1
   83908:	4425      	add	r5, r4
   8390a:	6062      	str	r2, [r4, #4]
   8390c:	4630      	mov	r0, r6
   8390e:	60bd      	str	r5, [r7, #8]
   83910:	3408      	adds	r4, #8
   83912:	606b      	str	r3, [r5, #4]
   83914:	f000 f9b6 	bl	83c84 <__malloc_unlock>
   83918:	4620      	mov	r0, r4
   8391a:	b003      	add	sp, #12
   8391c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83920:	2814      	cmp	r0, #20
   83922:	d969      	bls.n	839f8 <_malloc_r+0x3e0>
   83924:	2854      	cmp	r0, #84	; 0x54
   83926:	f200 8098 	bhi.w	83a5a <_malloc_r+0x442>
   8392a:	0b28      	lsrs	r0, r5, #12
   8392c:	306e      	adds	r0, #110	; 0x6e
   8392e:	0041      	lsls	r1, r0, #1
   83930:	e6b2      	b.n	83698 <_malloc_r+0x80>
   83932:	bf00      	nop
   83934:	20070580 	.word	0x20070580
   83938:	200748b0 	.word	0x200748b0
   8393c:	200748b4 	.word	0x200748b4
   83940:	200748ac 	.word	0x200748ac
   83944:	200748a8 	.word	0x200748a8
   83948:	2007098c 	.word	0x2007098c
   8394c:	0a5a      	lsrs	r2, r3, #9
   8394e:	2a04      	cmp	r2, #4
   83950:	d955      	bls.n	839fe <_malloc_r+0x3e6>
   83952:	2a14      	cmp	r2, #20
   83954:	f200 80a7 	bhi.w	83aa6 <_malloc_r+0x48e>
   83958:	325b      	adds	r2, #91	; 0x5b
   8395a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8395e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   83962:	f8dc 1008 	ldr.w	r1, [ip, #8]
   83966:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83b20 <_malloc_r+0x508>
   8396a:	4561      	cmp	r1, ip
   8396c:	d07f      	beq.n	83a6e <_malloc_r+0x456>
   8396e:	684a      	ldr	r2, [r1, #4]
   83970:	f022 0203 	bic.w	r2, r2, #3
   83974:	4293      	cmp	r3, r2
   83976:	d202      	bcs.n	8397e <_malloc_r+0x366>
   83978:	6889      	ldr	r1, [r1, #8]
   8397a:	458c      	cmp	ip, r1
   8397c:	d1f7      	bne.n	8396e <_malloc_r+0x356>
   8397e:	68ca      	ldr	r2, [r1, #12]
   83980:	687b      	ldr	r3, [r7, #4]
   83982:	60e2      	str	r2, [r4, #12]
   83984:	60a1      	str	r1, [r4, #8]
   83986:	6094      	str	r4, [r2, #8]
   83988:	60cc      	str	r4, [r1, #12]
   8398a:	e6c7      	b.n	8371c <_malloc_r+0x104>
   8398c:	f045 0701 	orr.w	r7, r5, #1
   83990:	f042 0301 	orr.w	r3, r2, #1
   83994:	4425      	add	r5, r4
   83996:	6067      	str	r7, [r4, #4]
   83998:	4630      	mov	r0, r6
   8399a:	614d      	str	r5, [r1, #20]
   8399c:	610d      	str	r5, [r1, #16]
   8399e:	f8c5 e00c 	str.w	lr, [r5, #12]
   839a2:	f8c5 e008 	str.w	lr, [r5, #8]
   839a6:	606b      	str	r3, [r5, #4]
   839a8:	50aa      	str	r2, [r5, r2]
   839aa:	3408      	adds	r4, #8
   839ac:	f000 f96a 	bl	83c84 <__malloc_unlock>
   839b0:	e65e      	b.n	83670 <_malloc_r+0x58>
   839b2:	684b      	ldr	r3, [r1, #4]
   839b4:	e6b2      	b.n	8371c <_malloc_r+0x104>
   839b6:	f109 0901 	add.w	r9, r9, #1
   839ba:	f019 0f03 	tst.w	r9, #3
   839be:	f10c 0c08 	add.w	ip, ip, #8
   839c2:	f47f aebd 	bne.w	83740 <_malloc_r+0x128>
   839c6:	e02c      	b.n	83a22 <_malloc_r+0x40a>
   839c8:	f104 0308 	add.w	r3, r4, #8
   839cc:	6964      	ldr	r4, [r4, #20]
   839ce:	42a3      	cmp	r3, r4
   839d0:	bf08      	it	eq
   839d2:	3002      	addeq	r0, #2
   839d4:	f43f ae75 	beq.w	836c2 <_malloc_r+0xaa>
   839d8:	e63a      	b.n	83650 <_malloc_r+0x38>
   839da:	461c      	mov	r4, r3
   839dc:	441a      	add	r2, r3
   839de:	6851      	ldr	r1, [r2, #4]
   839e0:	68db      	ldr	r3, [r3, #12]
   839e2:	f854 5f08 	ldr.w	r5, [r4, #8]!
   839e6:	f041 0101 	orr.w	r1, r1, #1
   839ea:	6051      	str	r1, [r2, #4]
   839ec:	4630      	mov	r0, r6
   839ee:	60eb      	str	r3, [r5, #12]
   839f0:	609d      	str	r5, [r3, #8]
   839f2:	f000 f947 	bl	83c84 <__malloc_unlock>
   839f6:	e63b      	b.n	83670 <_malloc_r+0x58>
   839f8:	305b      	adds	r0, #91	; 0x5b
   839fa:	0041      	lsls	r1, r0, #1
   839fc:	e64c      	b.n	83698 <_malloc_r+0x80>
   839fe:	099a      	lsrs	r2, r3, #6
   83a00:	3238      	adds	r2, #56	; 0x38
   83a02:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83a06:	e7aa      	b.n	8395e <_malloc_r+0x346>
   83a08:	42bc      	cmp	r4, r7
   83a0a:	4b45      	ldr	r3, [pc, #276]	; (83b20 <_malloc_r+0x508>)
   83a0c:	f43f af0d 	beq.w	8382a <_malloc_r+0x212>
   83a10:	689c      	ldr	r4, [r3, #8]
   83a12:	6862      	ldr	r2, [r4, #4]
   83a14:	f022 0203 	bic.w	r2, r2, #3
   83a18:	e767      	b.n	838ea <_malloc_r+0x2d2>
   83a1a:	f8d8 8000 	ldr.w	r8, [r8]
   83a1e:	4598      	cmp	r8, r3
   83a20:	d17c      	bne.n	83b1c <_malloc_r+0x504>
   83a22:	f010 0f03 	tst.w	r0, #3
   83a26:	f1a8 0308 	sub.w	r3, r8, #8
   83a2a:	f100 30ff 	add.w	r0, r0, #4294967295
   83a2e:	d1f4      	bne.n	83a1a <_malloc_r+0x402>
   83a30:	687b      	ldr	r3, [r7, #4]
   83a32:	ea23 0304 	bic.w	r3, r3, r4
   83a36:	607b      	str	r3, [r7, #4]
   83a38:	0064      	lsls	r4, r4, #1
   83a3a:	429c      	cmp	r4, r3
   83a3c:	f63f aec9 	bhi.w	837d2 <_malloc_r+0x1ba>
   83a40:	2c00      	cmp	r4, #0
   83a42:	f43f aec6 	beq.w	837d2 <_malloc_r+0x1ba>
   83a46:	4223      	tst	r3, r4
   83a48:	4648      	mov	r0, r9
   83a4a:	f47f ae75 	bne.w	83738 <_malloc_r+0x120>
   83a4e:	0064      	lsls	r4, r4, #1
   83a50:	4223      	tst	r3, r4
   83a52:	f100 0004 	add.w	r0, r0, #4
   83a56:	d0fa      	beq.n	83a4e <_malloc_r+0x436>
   83a58:	e66e      	b.n	83738 <_malloc_r+0x120>
   83a5a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   83a5e:	d818      	bhi.n	83a92 <_malloc_r+0x47a>
   83a60:	0be8      	lsrs	r0, r5, #15
   83a62:	3077      	adds	r0, #119	; 0x77
   83a64:	0041      	lsls	r1, r0, #1
   83a66:	e617      	b.n	83698 <_malloc_r+0x80>
   83a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83a6c:	e6fa      	b.n	83864 <_malloc_r+0x24c>
   83a6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   83a72:	1092      	asrs	r2, r2, #2
   83a74:	f04f 0c01 	mov.w	ip, #1
   83a78:	fa0c f202 	lsl.w	r2, ip, r2
   83a7c:	4313      	orrs	r3, r2
   83a7e:	f8c8 3004 	str.w	r3, [r8, #4]
   83a82:	460a      	mov	r2, r1
   83a84:	e77d      	b.n	83982 <_malloc_r+0x36a>
   83a86:	2301      	movs	r3, #1
   83a88:	f8c9 3004 	str.w	r3, [r9, #4]
   83a8c:	464c      	mov	r4, r9
   83a8e:	2200      	movs	r2, #0
   83a90:	e72b      	b.n	838ea <_malloc_r+0x2d2>
   83a92:	f240 5354 	movw	r3, #1364	; 0x554
   83a96:	4298      	cmp	r0, r3
   83a98:	d81c      	bhi.n	83ad4 <_malloc_r+0x4bc>
   83a9a:	0ca8      	lsrs	r0, r5, #18
   83a9c:	307c      	adds	r0, #124	; 0x7c
   83a9e:	0041      	lsls	r1, r0, #1
   83aa0:	e5fa      	b.n	83698 <_malloc_r+0x80>
   83aa2:	3210      	adds	r2, #16
   83aa4:	e6b3      	b.n	8380e <_malloc_r+0x1f6>
   83aa6:	2a54      	cmp	r2, #84	; 0x54
   83aa8:	d823      	bhi.n	83af2 <_malloc_r+0x4da>
   83aaa:	0b1a      	lsrs	r2, r3, #12
   83aac:	326e      	adds	r2, #110	; 0x6e
   83aae:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83ab2:	e754      	b.n	8395e <_malloc_r+0x346>
   83ab4:	68bc      	ldr	r4, [r7, #8]
   83ab6:	6862      	ldr	r2, [r4, #4]
   83ab8:	f022 0203 	bic.w	r2, r2, #3
   83abc:	e715      	b.n	838ea <_malloc_r+0x2d2>
   83abe:	f3cb 000b 	ubfx	r0, fp, #0, #12
   83ac2:	2800      	cmp	r0, #0
   83ac4:	f47f aeb8 	bne.w	83838 <_malloc_r+0x220>
   83ac8:	4442      	add	r2, r8
   83aca:	68bb      	ldr	r3, [r7, #8]
   83acc:	f042 0201 	orr.w	r2, r2, #1
   83ad0:	605a      	str	r2, [r3, #4]
   83ad2:	e6fc      	b.n	838ce <_malloc_r+0x2b6>
   83ad4:	21fc      	movs	r1, #252	; 0xfc
   83ad6:	207e      	movs	r0, #126	; 0x7e
   83ad8:	e5de      	b.n	83698 <_malloc_r+0x80>
   83ada:	2201      	movs	r2, #1
   83adc:	f04f 0a00 	mov.w	sl, #0
   83ae0:	e6d3      	b.n	8388a <_malloc_r+0x272>
   83ae2:	f104 0108 	add.w	r1, r4, #8
   83ae6:	4630      	mov	r0, r6
   83ae8:	f7ff fa84 	bl	82ff4 <_free_r>
   83aec:	f8da 1000 	ldr.w	r1, [sl]
   83af0:	e6ed      	b.n	838ce <_malloc_r+0x2b6>
   83af2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83af6:	d804      	bhi.n	83b02 <_malloc_r+0x4ea>
   83af8:	0bda      	lsrs	r2, r3, #15
   83afa:	3277      	adds	r2, #119	; 0x77
   83afc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83b00:	e72d      	b.n	8395e <_malloc_r+0x346>
   83b02:	f240 5154 	movw	r1, #1364	; 0x554
   83b06:	428a      	cmp	r2, r1
   83b08:	d804      	bhi.n	83b14 <_malloc_r+0x4fc>
   83b0a:	0c9a      	lsrs	r2, r3, #18
   83b0c:	327c      	adds	r2, #124	; 0x7c
   83b0e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83b12:	e724      	b.n	8395e <_malloc_r+0x346>
   83b14:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   83b18:	227e      	movs	r2, #126	; 0x7e
   83b1a:	e720      	b.n	8395e <_malloc_r+0x346>
   83b1c:	687b      	ldr	r3, [r7, #4]
   83b1e:	e78b      	b.n	83a38 <_malloc_r+0x420>
   83b20:	20070580 	.word	0x20070580

00083b24 <memchr>:
   83b24:	0783      	lsls	r3, r0, #30
   83b26:	b470      	push	{r4, r5, r6}
   83b28:	b2c9      	uxtb	r1, r1
   83b2a:	d040      	beq.n	83bae <memchr+0x8a>
   83b2c:	1e54      	subs	r4, r2, #1
   83b2e:	2a00      	cmp	r2, #0
   83b30:	d03f      	beq.n	83bb2 <memchr+0x8e>
   83b32:	7803      	ldrb	r3, [r0, #0]
   83b34:	428b      	cmp	r3, r1
   83b36:	bf18      	it	ne
   83b38:	1c43      	addne	r3, r0, #1
   83b3a:	d105      	bne.n	83b48 <memchr+0x24>
   83b3c:	e01c      	b.n	83b78 <memchr+0x54>
   83b3e:	b1ec      	cbz	r4, 83b7c <memchr+0x58>
   83b40:	7802      	ldrb	r2, [r0, #0]
   83b42:	3c01      	subs	r4, #1
   83b44:	428a      	cmp	r2, r1
   83b46:	d017      	beq.n	83b78 <memchr+0x54>
   83b48:	f013 0f03 	tst.w	r3, #3
   83b4c:	4618      	mov	r0, r3
   83b4e:	f103 0301 	add.w	r3, r3, #1
   83b52:	d1f4      	bne.n	83b3e <memchr+0x1a>
   83b54:	2c03      	cmp	r4, #3
   83b56:	d814      	bhi.n	83b82 <memchr+0x5e>
   83b58:	b184      	cbz	r4, 83b7c <memchr+0x58>
   83b5a:	7803      	ldrb	r3, [r0, #0]
   83b5c:	428b      	cmp	r3, r1
   83b5e:	d00b      	beq.n	83b78 <memchr+0x54>
   83b60:	1905      	adds	r5, r0, r4
   83b62:	1c43      	adds	r3, r0, #1
   83b64:	e002      	b.n	83b6c <memchr+0x48>
   83b66:	7802      	ldrb	r2, [r0, #0]
   83b68:	428a      	cmp	r2, r1
   83b6a:	d005      	beq.n	83b78 <memchr+0x54>
   83b6c:	42ab      	cmp	r3, r5
   83b6e:	4618      	mov	r0, r3
   83b70:	f103 0301 	add.w	r3, r3, #1
   83b74:	d1f7      	bne.n	83b66 <memchr+0x42>
   83b76:	2000      	movs	r0, #0
   83b78:	bc70      	pop	{r4, r5, r6}
   83b7a:	4770      	bx	lr
   83b7c:	4620      	mov	r0, r4
   83b7e:	bc70      	pop	{r4, r5, r6}
   83b80:	4770      	bx	lr
   83b82:	4602      	mov	r2, r0
   83b84:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83b88:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83b8c:	6813      	ldr	r3, [r2, #0]
   83b8e:	4610      	mov	r0, r2
   83b90:	4073      	eors	r3, r6
   83b92:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   83b96:	ea25 0303 	bic.w	r3, r5, r3
   83b9a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83b9e:	f102 0204 	add.w	r2, r2, #4
   83ba2:	d1d9      	bne.n	83b58 <memchr+0x34>
   83ba4:	3c04      	subs	r4, #4
   83ba6:	2c03      	cmp	r4, #3
   83ba8:	4610      	mov	r0, r2
   83baa:	d8ef      	bhi.n	83b8c <memchr+0x68>
   83bac:	e7d4      	b.n	83b58 <memchr+0x34>
   83bae:	4614      	mov	r4, r2
   83bb0:	e7d0      	b.n	83b54 <memchr+0x30>
   83bb2:	4610      	mov	r0, r2
   83bb4:	e7e0      	b.n	83b78 <memchr+0x54>
   83bb6:	bf00      	nop

00083bb8 <memmove>:
   83bb8:	4288      	cmp	r0, r1
   83bba:	b5f0      	push	{r4, r5, r6, r7, lr}
   83bbc:	d90d      	bls.n	83bda <memmove+0x22>
   83bbe:	188b      	adds	r3, r1, r2
   83bc0:	4298      	cmp	r0, r3
   83bc2:	d20a      	bcs.n	83bda <memmove+0x22>
   83bc4:	1881      	adds	r1, r0, r2
   83bc6:	2a00      	cmp	r2, #0
   83bc8:	d054      	beq.n	83c74 <memmove+0xbc>
   83bca:	1a9a      	subs	r2, r3, r2
   83bcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83bd0:	4293      	cmp	r3, r2
   83bd2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   83bd6:	d1f9      	bne.n	83bcc <memmove+0x14>
   83bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83bda:	2a0f      	cmp	r2, #15
   83bdc:	d948      	bls.n	83c70 <memmove+0xb8>
   83bde:	ea40 0301 	orr.w	r3, r0, r1
   83be2:	079b      	lsls	r3, r3, #30
   83be4:	d147      	bne.n	83c76 <memmove+0xbe>
   83be6:	4615      	mov	r5, r2
   83be8:	f100 0410 	add.w	r4, r0, #16
   83bec:	f101 0310 	add.w	r3, r1, #16
   83bf0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83bf4:	3d10      	subs	r5, #16
   83bf6:	f844 6c10 	str.w	r6, [r4, #-16]
   83bfa:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83bfe:	2d0f      	cmp	r5, #15
   83c00:	f844 6c0c 	str.w	r6, [r4, #-12]
   83c04:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83c08:	f104 0410 	add.w	r4, r4, #16
   83c0c:	f844 6c18 	str.w	r6, [r4, #-24]
   83c10:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83c14:	f103 0310 	add.w	r3, r3, #16
   83c18:	f844 6c14 	str.w	r6, [r4, #-20]
   83c1c:	d8e8      	bhi.n	83bf0 <memmove+0x38>
   83c1e:	f1a2 0310 	sub.w	r3, r2, #16
   83c22:	f023 030f 	bic.w	r3, r3, #15
   83c26:	f002 0e0f 	and.w	lr, r2, #15
   83c2a:	3310      	adds	r3, #16
   83c2c:	f1be 0f03 	cmp.w	lr, #3
   83c30:	4419      	add	r1, r3
   83c32:	4403      	add	r3, r0
   83c34:	d921      	bls.n	83c7a <memmove+0xc2>
   83c36:	460e      	mov	r6, r1
   83c38:	4674      	mov	r4, lr
   83c3a:	1f1d      	subs	r5, r3, #4
   83c3c:	f856 7b04 	ldr.w	r7, [r6], #4
   83c40:	3c04      	subs	r4, #4
   83c42:	2c03      	cmp	r4, #3
   83c44:	f845 7f04 	str.w	r7, [r5, #4]!
   83c48:	d8f8      	bhi.n	83c3c <memmove+0x84>
   83c4a:	f1ae 0404 	sub.w	r4, lr, #4
   83c4e:	f024 0403 	bic.w	r4, r4, #3
   83c52:	3404      	adds	r4, #4
   83c54:	4423      	add	r3, r4
   83c56:	4421      	add	r1, r4
   83c58:	f002 0203 	and.w	r2, r2, #3
   83c5c:	b152      	cbz	r2, 83c74 <memmove+0xbc>
   83c5e:	3b01      	subs	r3, #1
   83c60:	440a      	add	r2, r1
   83c62:	f811 4b01 	ldrb.w	r4, [r1], #1
   83c66:	4291      	cmp	r1, r2
   83c68:	f803 4f01 	strb.w	r4, [r3, #1]!
   83c6c:	d1f9      	bne.n	83c62 <memmove+0xaa>
   83c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c70:	4603      	mov	r3, r0
   83c72:	e7f3      	b.n	83c5c <memmove+0xa4>
   83c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c76:	4603      	mov	r3, r0
   83c78:	e7f1      	b.n	83c5e <memmove+0xa6>
   83c7a:	4672      	mov	r2, lr
   83c7c:	e7ee      	b.n	83c5c <memmove+0xa4>
   83c7e:	bf00      	nop

00083c80 <__malloc_lock>:
   83c80:	4770      	bx	lr
   83c82:	bf00      	nop

00083c84 <__malloc_unlock>:
   83c84:	4770      	bx	lr
   83c86:	bf00      	nop

00083c88 <_realloc_r>:
   83c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83c8c:	4617      	mov	r7, r2
   83c8e:	b083      	sub	sp, #12
   83c90:	460d      	mov	r5, r1
   83c92:	2900      	cmp	r1, #0
   83c94:	f000 80e2 	beq.w	83e5c <_realloc_r+0x1d4>
   83c98:	4681      	mov	r9, r0
   83c9a:	f107 040b 	add.w	r4, r7, #11
   83c9e:	f7ff ffef 	bl	83c80 <__malloc_lock>
   83ca2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   83ca6:	2c16      	cmp	r4, #22
   83ca8:	f023 0603 	bic.w	r6, r3, #3
   83cac:	f1a5 0808 	sub.w	r8, r5, #8
   83cb0:	d84b      	bhi.n	83d4a <_realloc_r+0xc2>
   83cb2:	2210      	movs	r2, #16
   83cb4:	4614      	mov	r4, r2
   83cb6:	42a7      	cmp	r7, r4
   83cb8:	d84c      	bhi.n	83d54 <_realloc_r+0xcc>
   83cba:	4296      	cmp	r6, r2
   83cbc:	da51      	bge.n	83d62 <_realloc_r+0xda>
   83cbe:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 84064 <_realloc_r+0x3dc>
   83cc2:	eb08 0106 	add.w	r1, r8, r6
   83cc6:	f8db 0008 	ldr.w	r0, [fp, #8]
   83cca:	4288      	cmp	r0, r1
   83ccc:	f000 80d3 	beq.w	83e76 <_realloc_r+0x1ee>
   83cd0:	6848      	ldr	r0, [r1, #4]
   83cd2:	f020 0e01 	bic.w	lr, r0, #1
   83cd6:	448e      	add	lr, r1
   83cd8:	f8de e004 	ldr.w	lr, [lr, #4]
   83cdc:	f01e 0f01 	tst.w	lr, #1
   83ce0:	d154      	bne.n	83d8c <_realloc_r+0x104>
   83ce2:	f020 0003 	bic.w	r0, r0, #3
   83ce6:	4430      	add	r0, r6
   83ce8:	4290      	cmp	r0, r2
   83cea:	f280 80bd 	bge.w	83e68 <_realloc_r+0x1e0>
   83cee:	07db      	lsls	r3, r3, #31
   83cf0:	f100 8090 	bmi.w	83e14 <_realloc_r+0x18c>
   83cf4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83cf8:	ebc3 0a08 	rsb	sl, r3, r8
   83cfc:	f8da 3004 	ldr.w	r3, [sl, #4]
   83d00:	f023 0303 	bic.w	r3, r3, #3
   83d04:	eb00 0e03 	add.w	lr, r0, r3
   83d08:	4596      	cmp	lr, r2
   83d0a:	db49      	blt.n	83da0 <_realloc_r+0x118>
   83d0c:	4657      	mov	r7, sl
   83d0e:	68cb      	ldr	r3, [r1, #12]
   83d10:	6889      	ldr	r1, [r1, #8]
   83d12:	1f32      	subs	r2, r6, #4
   83d14:	60cb      	str	r3, [r1, #12]
   83d16:	6099      	str	r1, [r3, #8]
   83d18:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83d1c:	f8da 300c 	ldr.w	r3, [sl, #12]
   83d20:	2a24      	cmp	r2, #36	; 0x24
   83d22:	60cb      	str	r3, [r1, #12]
   83d24:	6099      	str	r1, [r3, #8]
   83d26:	f200 8133 	bhi.w	83f90 <_realloc_r+0x308>
   83d2a:	2a13      	cmp	r2, #19
   83d2c:	f240 80fa 	bls.w	83f24 <_realloc_r+0x29c>
   83d30:	682b      	ldr	r3, [r5, #0]
   83d32:	2a1b      	cmp	r2, #27
   83d34:	f8ca 3008 	str.w	r3, [sl, #8]
   83d38:	686b      	ldr	r3, [r5, #4]
   83d3a:	f8ca 300c 	str.w	r3, [sl, #12]
   83d3e:	f200 813b 	bhi.w	83fb8 <_realloc_r+0x330>
   83d42:	3508      	adds	r5, #8
   83d44:	f10a 0310 	add.w	r3, sl, #16
   83d48:	e0ed      	b.n	83f26 <_realloc_r+0x29e>
   83d4a:	f024 0407 	bic.w	r4, r4, #7
   83d4e:	2c00      	cmp	r4, #0
   83d50:	4622      	mov	r2, r4
   83d52:	dab0      	bge.n	83cb6 <_realloc_r+0x2e>
   83d54:	230c      	movs	r3, #12
   83d56:	2000      	movs	r0, #0
   83d58:	f8c9 3000 	str.w	r3, [r9]
   83d5c:	b003      	add	sp, #12
   83d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d62:	462f      	mov	r7, r5
   83d64:	1b32      	subs	r2, r6, r4
   83d66:	2a0f      	cmp	r2, #15
   83d68:	f003 0301 	and.w	r3, r3, #1
   83d6c:	d840      	bhi.n	83df0 <_realloc_r+0x168>
   83d6e:	4333      	orrs	r3, r6
   83d70:	f8c8 3004 	str.w	r3, [r8, #4]
   83d74:	4446      	add	r6, r8
   83d76:	6873      	ldr	r3, [r6, #4]
   83d78:	f043 0301 	orr.w	r3, r3, #1
   83d7c:	6073      	str	r3, [r6, #4]
   83d7e:	4648      	mov	r0, r9
   83d80:	f7ff ff80 	bl	83c84 <__malloc_unlock>
   83d84:	4638      	mov	r0, r7
   83d86:	b003      	add	sp, #12
   83d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d8c:	07d9      	lsls	r1, r3, #31
   83d8e:	d441      	bmi.n	83e14 <_realloc_r+0x18c>
   83d90:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83d94:	ebc3 0a08 	rsb	sl, r3, r8
   83d98:	f8da 3004 	ldr.w	r3, [sl, #4]
   83d9c:	f023 0303 	bic.w	r3, r3, #3
   83da0:	4433      	add	r3, r6
   83da2:	4293      	cmp	r3, r2
   83da4:	db36      	blt.n	83e14 <_realloc_r+0x18c>
   83da6:	4657      	mov	r7, sl
   83da8:	f8da 100c 	ldr.w	r1, [sl, #12]
   83dac:	f857 0f08 	ldr.w	r0, [r7, #8]!
   83db0:	1f32      	subs	r2, r6, #4
   83db2:	2a24      	cmp	r2, #36	; 0x24
   83db4:	60c1      	str	r1, [r0, #12]
   83db6:	6088      	str	r0, [r1, #8]
   83db8:	f200 80f5 	bhi.w	83fa6 <_realloc_r+0x31e>
   83dbc:	2a13      	cmp	r2, #19
   83dbe:	f240 80f0 	bls.w	83fa2 <_realloc_r+0x31a>
   83dc2:	6829      	ldr	r1, [r5, #0]
   83dc4:	2a1b      	cmp	r2, #27
   83dc6:	f8ca 1008 	str.w	r1, [sl, #8]
   83dca:	6869      	ldr	r1, [r5, #4]
   83dcc:	f8ca 100c 	str.w	r1, [sl, #12]
   83dd0:	f200 8107 	bhi.w	83fe2 <_realloc_r+0x35a>
   83dd4:	3508      	adds	r5, #8
   83dd6:	f10a 0210 	add.w	r2, sl, #16
   83dda:	6829      	ldr	r1, [r5, #0]
   83ddc:	461e      	mov	r6, r3
   83dde:	6011      	str	r1, [r2, #0]
   83de0:	6869      	ldr	r1, [r5, #4]
   83de2:	46d0      	mov	r8, sl
   83de4:	6051      	str	r1, [r2, #4]
   83de6:	68ab      	ldr	r3, [r5, #8]
   83de8:	6093      	str	r3, [r2, #8]
   83dea:	f8da 3004 	ldr.w	r3, [sl, #4]
   83dee:	e7b9      	b.n	83d64 <_realloc_r+0xdc>
   83df0:	eb08 0104 	add.w	r1, r8, r4
   83df4:	4323      	orrs	r3, r4
   83df6:	f042 0001 	orr.w	r0, r2, #1
   83dfa:	f8c8 3004 	str.w	r3, [r8, #4]
   83dfe:	440a      	add	r2, r1
   83e00:	6048      	str	r0, [r1, #4]
   83e02:	6853      	ldr	r3, [r2, #4]
   83e04:	3108      	adds	r1, #8
   83e06:	f043 0301 	orr.w	r3, r3, #1
   83e0a:	6053      	str	r3, [r2, #4]
   83e0c:	4648      	mov	r0, r9
   83e0e:	f7ff f8f1 	bl	82ff4 <_free_r>
   83e12:	e7b4      	b.n	83d7e <_realloc_r+0xf6>
   83e14:	4639      	mov	r1, r7
   83e16:	4648      	mov	r0, r9
   83e18:	f7ff fbfe 	bl	83618 <_malloc_r>
   83e1c:	4607      	mov	r7, r0
   83e1e:	2800      	cmp	r0, #0
   83e20:	d0ad      	beq.n	83d7e <_realloc_r+0xf6>
   83e22:	f855 3c04 	ldr.w	r3, [r5, #-4]
   83e26:	f1a0 0108 	sub.w	r1, r0, #8
   83e2a:	f023 0201 	bic.w	r2, r3, #1
   83e2e:	4442      	add	r2, r8
   83e30:	4291      	cmp	r1, r2
   83e32:	f000 80a6 	beq.w	83f82 <_realloc_r+0x2fa>
   83e36:	1f32      	subs	r2, r6, #4
   83e38:	2a24      	cmp	r2, #36	; 0x24
   83e3a:	f200 8093 	bhi.w	83f64 <_realloc_r+0x2dc>
   83e3e:	2a13      	cmp	r2, #19
   83e40:	d865      	bhi.n	83f0e <_realloc_r+0x286>
   83e42:	4603      	mov	r3, r0
   83e44:	462a      	mov	r2, r5
   83e46:	6811      	ldr	r1, [r2, #0]
   83e48:	6019      	str	r1, [r3, #0]
   83e4a:	6851      	ldr	r1, [r2, #4]
   83e4c:	6059      	str	r1, [r3, #4]
   83e4e:	6892      	ldr	r2, [r2, #8]
   83e50:	609a      	str	r2, [r3, #8]
   83e52:	4629      	mov	r1, r5
   83e54:	4648      	mov	r0, r9
   83e56:	f7ff f8cd 	bl	82ff4 <_free_r>
   83e5a:	e790      	b.n	83d7e <_realloc_r+0xf6>
   83e5c:	4611      	mov	r1, r2
   83e5e:	b003      	add	sp, #12
   83e60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83e64:	f7ff bbd8 	b.w	83618 <_malloc_r>
   83e68:	68ca      	ldr	r2, [r1, #12]
   83e6a:	6889      	ldr	r1, [r1, #8]
   83e6c:	462f      	mov	r7, r5
   83e6e:	60ca      	str	r2, [r1, #12]
   83e70:	4606      	mov	r6, r0
   83e72:	6091      	str	r1, [r2, #8]
   83e74:	e776      	b.n	83d64 <_realloc_r+0xdc>
   83e76:	6841      	ldr	r1, [r0, #4]
   83e78:	f104 0010 	add.w	r0, r4, #16
   83e7c:	f021 0103 	bic.w	r1, r1, #3
   83e80:	4431      	add	r1, r6
   83e82:	4281      	cmp	r1, r0
   83e84:	da5a      	bge.n	83f3c <_realloc_r+0x2b4>
   83e86:	07db      	lsls	r3, r3, #31
   83e88:	d4c4      	bmi.n	83e14 <_realloc_r+0x18c>
   83e8a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83e8e:	ebc3 0a08 	rsb	sl, r3, r8
   83e92:	f8da 3004 	ldr.w	r3, [sl, #4]
   83e96:	f023 0303 	bic.w	r3, r3, #3
   83e9a:	eb01 0c03 	add.w	ip, r1, r3
   83e9e:	4560      	cmp	r0, ip
   83ea0:	f73f af7e 	bgt.w	83da0 <_realloc_r+0x118>
   83ea4:	4657      	mov	r7, sl
   83ea6:	f8da 300c 	ldr.w	r3, [sl, #12]
   83eaa:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83eae:	1f32      	subs	r2, r6, #4
   83eb0:	2a24      	cmp	r2, #36	; 0x24
   83eb2:	60cb      	str	r3, [r1, #12]
   83eb4:	6099      	str	r1, [r3, #8]
   83eb6:	f200 80b6 	bhi.w	84026 <_realloc_r+0x39e>
   83eba:	2a13      	cmp	r2, #19
   83ebc:	f240 80a7 	bls.w	8400e <_realloc_r+0x386>
   83ec0:	682b      	ldr	r3, [r5, #0]
   83ec2:	2a1b      	cmp	r2, #27
   83ec4:	f8ca 3008 	str.w	r3, [sl, #8]
   83ec8:	686b      	ldr	r3, [r5, #4]
   83eca:	f8ca 300c 	str.w	r3, [sl, #12]
   83ece:	f200 80b3 	bhi.w	84038 <_realloc_r+0x3b0>
   83ed2:	3508      	adds	r5, #8
   83ed4:	f10a 0310 	add.w	r3, sl, #16
   83ed8:	682a      	ldr	r2, [r5, #0]
   83eda:	601a      	str	r2, [r3, #0]
   83edc:	686a      	ldr	r2, [r5, #4]
   83ede:	605a      	str	r2, [r3, #4]
   83ee0:	68aa      	ldr	r2, [r5, #8]
   83ee2:	609a      	str	r2, [r3, #8]
   83ee4:	ebc4 030c 	rsb	r3, r4, ip
   83ee8:	eb0a 0204 	add.w	r2, sl, r4
   83eec:	f043 0301 	orr.w	r3, r3, #1
   83ef0:	f8cb 2008 	str.w	r2, [fp, #8]
   83ef4:	6053      	str	r3, [r2, #4]
   83ef6:	f8da 3004 	ldr.w	r3, [sl, #4]
   83efa:	4648      	mov	r0, r9
   83efc:	f003 0301 	and.w	r3, r3, #1
   83f00:	431c      	orrs	r4, r3
   83f02:	f8ca 4004 	str.w	r4, [sl, #4]
   83f06:	f7ff febd 	bl	83c84 <__malloc_unlock>
   83f0a:	4638      	mov	r0, r7
   83f0c:	e73b      	b.n	83d86 <_realloc_r+0xfe>
   83f0e:	682b      	ldr	r3, [r5, #0]
   83f10:	2a1b      	cmp	r2, #27
   83f12:	6003      	str	r3, [r0, #0]
   83f14:	686b      	ldr	r3, [r5, #4]
   83f16:	6043      	str	r3, [r0, #4]
   83f18:	d828      	bhi.n	83f6c <_realloc_r+0x2e4>
   83f1a:	f100 0308 	add.w	r3, r0, #8
   83f1e:	f105 0208 	add.w	r2, r5, #8
   83f22:	e790      	b.n	83e46 <_realloc_r+0x1be>
   83f24:	463b      	mov	r3, r7
   83f26:	682a      	ldr	r2, [r5, #0]
   83f28:	4676      	mov	r6, lr
   83f2a:	601a      	str	r2, [r3, #0]
   83f2c:	686a      	ldr	r2, [r5, #4]
   83f2e:	46d0      	mov	r8, sl
   83f30:	605a      	str	r2, [r3, #4]
   83f32:	68aa      	ldr	r2, [r5, #8]
   83f34:	609a      	str	r2, [r3, #8]
   83f36:	f8da 3004 	ldr.w	r3, [sl, #4]
   83f3a:	e713      	b.n	83d64 <_realloc_r+0xdc>
   83f3c:	1b0b      	subs	r3, r1, r4
   83f3e:	eb08 0204 	add.w	r2, r8, r4
   83f42:	f043 0301 	orr.w	r3, r3, #1
   83f46:	f8cb 2008 	str.w	r2, [fp, #8]
   83f4a:	6053      	str	r3, [r2, #4]
   83f4c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   83f50:	4648      	mov	r0, r9
   83f52:	f003 0301 	and.w	r3, r3, #1
   83f56:	431c      	orrs	r4, r3
   83f58:	f845 4c04 	str.w	r4, [r5, #-4]
   83f5c:	f7ff fe92 	bl	83c84 <__malloc_unlock>
   83f60:	4628      	mov	r0, r5
   83f62:	e710      	b.n	83d86 <_realloc_r+0xfe>
   83f64:	4629      	mov	r1, r5
   83f66:	f7ff fe27 	bl	83bb8 <memmove>
   83f6a:	e772      	b.n	83e52 <_realloc_r+0x1ca>
   83f6c:	68ab      	ldr	r3, [r5, #8]
   83f6e:	2a24      	cmp	r2, #36	; 0x24
   83f70:	6083      	str	r3, [r0, #8]
   83f72:	68eb      	ldr	r3, [r5, #12]
   83f74:	60c3      	str	r3, [r0, #12]
   83f76:	d02b      	beq.n	83fd0 <_realloc_r+0x348>
   83f78:	f100 0310 	add.w	r3, r0, #16
   83f7c:	f105 0210 	add.w	r2, r5, #16
   83f80:	e761      	b.n	83e46 <_realloc_r+0x1be>
   83f82:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83f86:	462f      	mov	r7, r5
   83f88:	f022 0203 	bic.w	r2, r2, #3
   83f8c:	4416      	add	r6, r2
   83f8e:	e6e9      	b.n	83d64 <_realloc_r+0xdc>
   83f90:	4629      	mov	r1, r5
   83f92:	4638      	mov	r0, r7
   83f94:	4676      	mov	r6, lr
   83f96:	46d0      	mov	r8, sl
   83f98:	f7ff fe0e 	bl	83bb8 <memmove>
   83f9c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83fa0:	e6e0      	b.n	83d64 <_realloc_r+0xdc>
   83fa2:	463a      	mov	r2, r7
   83fa4:	e719      	b.n	83dda <_realloc_r+0x152>
   83fa6:	4629      	mov	r1, r5
   83fa8:	4638      	mov	r0, r7
   83faa:	461e      	mov	r6, r3
   83fac:	46d0      	mov	r8, sl
   83fae:	f7ff fe03 	bl	83bb8 <memmove>
   83fb2:	f8da 3004 	ldr.w	r3, [sl, #4]
   83fb6:	e6d5      	b.n	83d64 <_realloc_r+0xdc>
   83fb8:	68ab      	ldr	r3, [r5, #8]
   83fba:	2a24      	cmp	r2, #36	; 0x24
   83fbc:	f8ca 3010 	str.w	r3, [sl, #16]
   83fc0:	68eb      	ldr	r3, [r5, #12]
   83fc2:	f8ca 3014 	str.w	r3, [sl, #20]
   83fc6:	d018      	beq.n	83ffa <_realloc_r+0x372>
   83fc8:	3510      	adds	r5, #16
   83fca:	f10a 0318 	add.w	r3, sl, #24
   83fce:	e7aa      	b.n	83f26 <_realloc_r+0x29e>
   83fd0:	692a      	ldr	r2, [r5, #16]
   83fd2:	f100 0318 	add.w	r3, r0, #24
   83fd6:	6102      	str	r2, [r0, #16]
   83fd8:	6969      	ldr	r1, [r5, #20]
   83fda:	f105 0218 	add.w	r2, r5, #24
   83fde:	6141      	str	r1, [r0, #20]
   83fe0:	e731      	b.n	83e46 <_realloc_r+0x1be>
   83fe2:	68a9      	ldr	r1, [r5, #8]
   83fe4:	2a24      	cmp	r2, #36	; 0x24
   83fe6:	f8ca 1010 	str.w	r1, [sl, #16]
   83fea:	68e9      	ldr	r1, [r5, #12]
   83fec:	f8ca 1014 	str.w	r1, [sl, #20]
   83ff0:	d00f      	beq.n	84012 <_realloc_r+0x38a>
   83ff2:	3510      	adds	r5, #16
   83ff4:	f10a 0218 	add.w	r2, sl, #24
   83ff8:	e6ef      	b.n	83dda <_realloc_r+0x152>
   83ffa:	692a      	ldr	r2, [r5, #16]
   83ffc:	f10a 0320 	add.w	r3, sl, #32
   84000:	f8ca 2018 	str.w	r2, [sl, #24]
   84004:	696a      	ldr	r2, [r5, #20]
   84006:	3518      	adds	r5, #24
   84008:	f8ca 201c 	str.w	r2, [sl, #28]
   8400c:	e78b      	b.n	83f26 <_realloc_r+0x29e>
   8400e:	463b      	mov	r3, r7
   84010:	e762      	b.n	83ed8 <_realloc_r+0x250>
   84012:	6929      	ldr	r1, [r5, #16]
   84014:	f10a 0220 	add.w	r2, sl, #32
   84018:	f8ca 1018 	str.w	r1, [sl, #24]
   8401c:	6969      	ldr	r1, [r5, #20]
   8401e:	3518      	adds	r5, #24
   84020:	f8ca 101c 	str.w	r1, [sl, #28]
   84024:	e6d9      	b.n	83dda <_realloc_r+0x152>
   84026:	4629      	mov	r1, r5
   84028:	4638      	mov	r0, r7
   8402a:	f8cd c004 	str.w	ip, [sp, #4]
   8402e:	f7ff fdc3 	bl	83bb8 <memmove>
   84032:	f8dd c004 	ldr.w	ip, [sp, #4]
   84036:	e755      	b.n	83ee4 <_realloc_r+0x25c>
   84038:	68ab      	ldr	r3, [r5, #8]
   8403a:	2a24      	cmp	r2, #36	; 0x24
   8403c:	f8ca 3010 	str.w	r3, [sl, #16]
   84040:	68eb      	ldr	r3, [r5, #12]
   84042:	f8ca 3014 	str.w	r3, [sl, #20]
   84046:	d003      	beq.n	84050 <_realloc_r+0x3c8>
   84048:	3510      	adds	r5, #16
   8404a:	f10a 0318 	add.w	r3, sl, #24
   8404e:	e743      	b.n	83ed8 <_realloc_r+0x250>
   84050:	692a      	ldr	r2, [r5, #16]
   84052:	f10a 0320 	add.w	r3, sl, #32
   84056:	f8ca 2018 	str.w	r2, [sl, #24]
   8405a:	696a      	ldr	r2, [r5, #20]
   8405c:	3518      	adds	r5, #24
   8405e:	f8ca 201c 	str.w	r2, [sl, #28]
   84062:	e739      	b.n	83ed8 <_realloc_r+0x250>
   84064:	20070580 	.word	0x20070580

00084068 <_sbrk_r>:
   84068:	b538      	push	{r3, r4, r5, lr}
   8406a:	4c07      	ldr	r4, [pc, #28]	; (84088 <_sbrk_r+0x20>)
   8406c:	2300      	movs	r3, #0
   8406e:	4605      	mov	r5, r0
   84070:	4608      	mov	r0, r1
   84072:	6023      	str	r3, [r4, #0]
   84074:	f7fd f944 	bl	81300 <_sbrk>
   84078:	1c43      	adds	r3, r0, #1
   8407a:	d000      	beq.n	8407e <_sbrk_r+0x16>
   8407c:	bd38      	pop	{r3, r4, r5, pc}
   8407e:	6823      	ldr	r3, [r4, #0]
   84080:	2b00      	cmp	r3, #0
   84082:	d0fb      	beq.n	8407c <_sbrk_r+0x14>
   84084:	602b      	str	r3, [r5, #0]
   84086:	bd38      	pop	{r3, r4, r5, pc}
   84088:	200748e8 	.word	0x200748e8

0008408c <__sread>:
   8408c:	b510      	push	{r4, lr}
   8408e:	460c      	mov	r4, r1
   84090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84094:	f000 f9bc 	bl	84410 <_read_r>
   84098:	2800      	cmp	r0, #0
   8409a:	db03      	blt.n	840a4 <__sread+0x18>
   8409c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8409e:	4403      	add	r3, r0
   840a0:	6523      	str	r3, [r4, #80]	; 0x50
   840a2:	bd10      	pop	{r4, pc}
   840a4:	89a3      	ldrh	r3, [r4, #12]
   840a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   840aa:	81a3      	strh	r3, [r4, #12]
   840ac:	bd10      	pop	{r4, pc}
   840ae:	bf00      	nop

000840b0 <__swrite>:
   840b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   840b4:	460c      	mov	r4, r1
   840b6:	8989      	ldrh	r1, [r1, #12]
   840b8:	461d      	mov	r5, r3
   840ba:	05cb      	lsls	r3, r1, #23
   840bc:	4616      	mov	r6, r2
   840be:	4607      	mov	r7, r0
   840c0:	d506      	bpl.n	840d0 <__swrite+0x20>
   840c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   840c6:	2200      	movs	r2, #0
   840c8:	2302      	movs	r3, #2
   840ca:	f000 f98d 	bl	843e8 <_lseek_r>
   840ce:	89a1      	ldrh	r1, [r4, #12]
   840d0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   840d4:	81a1      	strh	r1, [r4, #12]
   840d6:	4638      	mov	r0, r7
   840d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   840dc:	4632      	mov	r2, r6
   840de:	462b      	mov	r3, r5
   840e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   840e4:	f000 b8a0 	b.w	84228 <_write_r>

000840e8 <__sseek>:
   840e8:	b510      	push	{r4, lr}
   840ea:	460c      	mov	r4, r1
   840ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   840f0:	f000 f97a 	bl	843e8 <_lseek_r>
   840f4:	89a3      	ldrh	r3, [r4, #12]
   840f6:	1c42      	adds	r2, r0, #1
   840f8:	bf0e      	itee	eq
   840fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   840fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84102:	6520      	strne	r0, [r4, #80]	; 0x50
   84104:	81a3      	strh	r3, [r4, #12]
   84106:	bd10      	pop	{r4, pc}

00084108 <__sclose>:
   84108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8410c:	f000 b8f2 	b.w	842f4 <_close_r>

00084110 <__swbuf_r>:
   84110:	b570      	push	{r4, r5, r6, lr}
   84112:	460d      	mov	r5, r1
   84114:	4614      	mov	r4, r2
   84116:	4606      	mov	r6, r0
   84118:	b110      	cbz	r0, 84120 <__swbuf_r+0x10>
   8411a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8411c:	2b00      	cmp	r3, #0
   8411e:	d048      	beq.n	841b2 <__swbuf_r+0xa2>
   84120:	89a2      	ldrh	r2, [r4, #12]
   84122:	69a3      	ldr	r3, [r4, #24]
   84124:	b291      	uxth	r1, r2
   84126:	0708      	lsls	r0, r1, #28
   84128:	60a3      	str	r3, [r4, #8]
   8412a:	d538      	bpl.n	8419e <__swbuf_r+0x8e>
   8412c:	6923      	ldr	r3, [r4, #16]
   8412e:	2b00      	cmp	r3, #0
   84130:	d035      	beq.n	8419e <__swbuf_r+0x8e>
   84132:	0489      	lsls	r1, r1, #18
   84134:	b2ed      	uxtb	r5, r5
   84136:	d515      	bpl.n	84164 <__swbuf_r+0x54>
   84138:	6822      	ldr	r2, [r4, #0]
   8413a:	6961      	ldr	r1, [r4, #20]
   8413c:	1ad3      	subs	r3, r2, r3
   8413e:	428b      	cmp	r3, r1
   84140:	da1c      	bge.n	8417c <__swbuf_r+0x6c>
   84142:	3301      	adds	r3, #1
   84144:	68a1      	ldr	r1, [r4, #8]
   84146:	1c50      	adds	r0, r2, #1
   84148:	3901      	subs	r1, #1
   8414a:	60a1      	str	r1, [r4, #8]
   8414c:	6020      	str	r0, [r4, #0]
   8414e:	7015      	strb	r5, [r2, #0]
   84150:	6962      	ldr	r2, [r4, #20]
   84152:	429a      	cmp	r2, r3
   84154:	d01a      	beq.n	8418c <__swbuf_r+0x7c>
   84156:	89a3      	ldrh	r3, [r4, #12]
   84158:	07db      	lsls	r3, r3, #31
   8415a:	d501      	bpl.n	84160 <__swbuf_r+0x50>
   8415c:	2d0a      	cmp	r5, #10
   8415e:	d015      	beq.n	8418c <__swbuf_r+0x7c>
   84160:	4628      	mov	r0, r5
   84162:	bd70      	pop	{r4, r5, r6, pc}
   84164:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8416a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8416e:	81a2      	strh	r2, [r4, #12]
   84170:	6822      	ldr	r2, [r4, #0]
   84172:	6661      	str	r1, [r4, #100]	; 0x64
   84174:	6961      	ldr	r1, [r4, #20]
   84176:	1ad3      	subs	r3, r2, r3
   84178:	428b      	cmp	r3, r1
   8417a:	dbe2      	blt.n	84142 <__swbuf_r+0x32>
   8417c:	4630      	mov	r0, r6
   8417e:	4621      	mov	r1, r4
   84180:	f7fe fdcc 	bl	82d1c <_fflush_r>
   84184:	b940      	cbnz	r0, 84198 <__swbuf_r+0x88>
   84186:	6822      	ldr	r2, [r4, #0]
   84188:	2301      	movs	r3, #1
   8418a:	e7db      	b.n	84144 <__swbuf_r+0x34>
   8418c:	4630      	mov	r0, r6
   8418e:	4621      	mov	r1, r4
   84190:	f7fe fdc4 	bl	82d1c <_fflush_r>
   84194:	2800      	cmp	r0, #0
   84196:	d0e3      	beq.n	84160 <__swbuf_r+0x50>
   84198:	f04f 30ff 	mov.w	r0, #4294967295
   8419c:	bd70      	pop	{r4, r5, r6, pc}
   8419e:	4630      	mov	r0, r6
   841a0:	4621      	mov	r1, r4
   841a2:	f7fe fca5 	bl	82af0 <__swsetup_r>
   841a6:	2800      	cmp	r0, #0
   841a8:	d1f6      	bne.n	84198 <__swbuf_r+0x88>
   841aa:	89a2      	ldrh	r2, [r4, #12]
   841ac:	6923      	ldr	r3, [r4, #16]
   841ae:	b291      	uxth	r1, r2
   841b0:	e7bf      	b.n	84132 <__swbuf_r+0x22>
   841b2:	f7fe fe47 	bl	82e44 <__sinit>
   841b6:	e7b3      	b.n	84120 <__swbuf_r+0x10>

000841b8 <_wcrtomb_r>:
   841b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   841bc:	4605      	mov	r5, r0
   841be:	b086      	sub	sp, #24
   841c0:	461e      	mov	r6, r3
   841c2:	460c      	mov	r4, r1
   841c4:	b1a1      	cbz	r1, 841f0 <_wcrtomb_r+0x38>
   841c6:	4b10      	ldr	r3, [pc, #64]	; (84208 <_wcrtomb_r+0x50>)
   841c8:	4617      	mov	r7, r2
   841ca:	f8d3 8000 	ldr.w	r8, [r3]
   841ce:	f7ff f9a1 	bl	83514 <__locale_charset>
   841d2:	9600      	str	r6, [sp, #0]
   841d4:	4603      	mov	r3, r0
   841d6:	4621      	mov	r1, r4
   841d8:	463a      	mov	r2, r7
   841da:	4628      	mov	r0, r5
   841dc:	47c0      	blx	r8
   841de:	1c43      	adds	r3, r0, #1
   841e0:	d103      	bne.n	841ea <_wcrtomb_r+0x32>
   841e2:	2200      	movs	r2, #0
   841e4:	238a      	movs	r3, #138	; 0x8a
   841e6:	6032      	str	r2, [r6, #0]
   841e8:	602b      	str	r3, [r5, #0]
   841ea:	b006      	add	sp, #24
   841ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   841f0:	4b05      	ldr	r3, [pc, #20]	; (84208 <_wcrtomb_r+0x50>)
   841f2:	681f      	ldr	r7, [r3, #0]
   841f4:	f7ff f98e 	bl	83514 <__locale_charset>
   841f8:	9600      	str	r6, [sp, #0]
   841fa:	4603      	mov	r3, r0
   841fc:	4622      	mov	r2, r4
   841fe:	4628      	mov	r0, r5
   84200:	a903      	add	r1, sp, #12
   84202:	47b8      	blx	r7
   84204:	e7eb      	b.n	841de <_wcrtomb_r+0x26>
   84206:	bf00      	nop
   84208:	20070990 	.word	0x20070990

0008420c <__ascii_wctomb>:
   8420c:	b121      	cbz	r1, 84218 <__ascii_wctomb+0xc>
   8420e:	2aff      	cmp	r2, #255	; 0xff
   84210:	d804      	bhi.n	8421c <__ascii_wctomb+0x10>
   84212:	700a      	strb	r2, [r1, #0]
   84214:	2001      	movs	r0, #1
   84216:	4770      	bx	lr
   84218:	4608      	mov	r0, r1
   8421a:	4770      	bx	lr
   8421c:	238a      	movs	r3, #138	; 0x8a
   8421e:	6003      	str	r3, [r0, #0]
   84220:	f04f 30ff 	mov.w	r0, #4294967295
   84224:	4770      	bx	lr
   84226:	bf00      	nop

00084228 <_write_r>:
   84228:	b570      	push	{r4, r5, r6, lr}
   8422a:	4c08      	ldr	r4, [pc, #32]	; (8424c <_write_r+0x24>)
   8422c:	4606      	mov	r6, r0
   8422e:	2500      	movs	r5, #0
   84230:	4608      	mov	r0, r1
   84232:	4611      	mov	r1, r2
   84234:	461a      	mov	r2, r3
   84236:	6025      	str	r5, [r4, #0]
   84238:	f7fb ffda 	bl	801f0 <_write>
   8423c:	1c43      	adds	r3, r0, #1
   8423e:	d000      	beq.n	84242 <_write_r+0x1a>
   84240:	bd70      	pop	{r4, r5, r6, pc}
   84242:	6823      	ldr	r3, [r4, #0]
   84244:	2b00      	cmp	r3, #0
   84246:	d0fb      	beq.n	84240 <_write_r+0x18>
   84248:	6033      	str	r3, [r6, #0]
   8424a:	bd70      	pop	{r4, r5, r6, pc}
   8424c:	200748e8 	.word	0x200748e8

00084250 <__register_exitproc>:
   84250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84254:	4c25      	ldr	r4, [pc, #148]	; (842ec <__register_exitproc+0x9c>)
   84256:	4606      	mov	r6, r0
   84258:	6825      	ldr	r5, [r4, #0]
   8425a:	4688      	mov	r8, r1
   8425c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   84260:	4692      	mov	sl, r2
   84262:	4699      	mov	r9, r3
   84264:	b3c4      	cbz	r4, 842d8 <__register_exitproc+0x88>
   84266:	6860      	ldr	r0, [r4, #4]
   84268:	281f      	cmp	r0, #31
   8426a:	dc17      	bgt.n	8429c <__register_exitproc+0x4c>
   8426c:	1c41      	adds	r1, r0, #1
   8426e:	b176      	cbz	r6, 8428e <__register_exitproc+0x3e>
   84270:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   84274:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   84278:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   8427c:	2201      	movs	r2, #1
   8427e:	4082      	lsls	r2, r0
   84280:	4315      	orrs	r5, r2
   84282:	2e02      	cmp	r6, #2
   84284:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   84288:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8428c:	d01e      	beq.n	842cc <__register_exitproc+0x7c>
   8428e:	1c83      	adds	r3, r0, #2
   84290:	6061      	str	r1, [r4, #4]
   84292:	2000      	movs	r0, #0
   84294:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   84298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8429c:	4b14      	ldr	r3, [pc, #80]	; (842f0 <__register_exitproc+0xa0>)
   8429e:	b303      	cbz	r3, 842e2 <__register_exitproc+0x92>
   842a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   842a4:	f7ff f9b0 	bl	83608 <malloc>
   842a8:	4604      	mov	r4, r0
   842aa:	b1d0      	cbz	r0, 842e2 <__register_exitproc+0x92>
   842ac:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   842b0:	2700      	movs	r7, #0
   842b2:	e884 0088 	stmia.w	r4, {r3, r7}
   842b6:	4638      	mov	r0, r7
   842b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   842bc:	2101      	movs	r1, #1
   842be:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   842c2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   842c6:	2e00      	cmp	r6, #0
   842c8:	d0e1      	beq.n	8428e <__register_exitproc+0x3e>
   842ca:	e7d1      	b.n	84270 <__register_exitproc+0x20>
   842cc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   842d0:	431a      	orrs	r2, r3
   842d2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   842d6:	e7da      	b.n	8428e <__register_exitproc+0x3e>
   842d8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   842dc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   842e0:	e7c1      	b.n	84266 <__register_exitproc+0x16>
   842e2:	f04f 30ff 	mov.w	r0, #4294967295
   842e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   842ea:	bf00      	nop
   842ec:	00084ca4 	.word	0x00084ca4
   842f0:	00083609 	.word	0x00083609

000842f4 <_close_r>:
   842f4:	b538      	push	{r3, r4, r5, lr}
   842f6:	4c07      	ldr	r4, [pc, #28]	; (84314 <_close_r+0x20>)
   842f8:	2300      	movs	r3, #0
   842fa:	4605      	mov	r5, r0
   842fc:	4608      	mov	r0, r1
   842fe:	6023      	str	r3, [r4, #0]
   84300:	f7fd f818 	bl	81334 <_close>
   84304:	1c43      	adds	r3, r0, #1
   84306:	d000      	beq.n	8430a <_close_r+0x16>
   84308:	bd38      	pop	{r3, r4, r5, pc}
   8430a:	6823      	ldr	r3, [r4, #0]
   8430c:	2b00      	cmp	r3, #0
   8430e:	d0fb      	beq.n	84308 <_close_r+0x14>
   84310:	602b      	str	r3, [r5, #0]
   84312:	bd38      	pop	{r3, r4, r5, pc}
   84314:	200748e8 	.word	0x200748e8

00084318 <_fclose_r>:
   84318:	2900      	cmp	r1, #0
   8431a:	d03d      	beq.n	84398 <_fclose_r+0x80>
   8431c:	b570      	push	{r4, r5, r6, lr}
   8431e:	4605      	mov	r5, r0
   84320:	460c      	mov	r4, r1
   84322:	b108      	cbz	r0, 84328 <_fclose_r+0x10>
   84324:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84326:	b37b      	cbz	r3, 84388 <_fclose_r+0x70>
   84328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8432c:	b90b      	cbnz	r3, 84332 <_fclose_r+0x1a>
   8432e:	2000      	movs	r0, #0
   84330:	bd70      	pop	{r4, r5, r6, pc}
   84332:	4628      	mov	r0, r5
   84334:	4621      	mov	r1, r4
   84336:	f7fe fc4d 	bl	82bd4 <__sflush_r>
   8433a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8433c:	4606      	mov	r6, r0
   8433e:	b133      	cbz	r3, 8434e <_fclose_r+0x36>
   84340:	4628      	mov	r0, r5
   84342:	69e1      	ldr	r1, [r4, #28]
   84344:	4798      	blx	r3
   84346:	2800      	cmp	r0, #0
   84348:	bfb8      	it	lt
   8434a:	f04f 36ff 	movlt.w	r6, #4294967295
   8434e:	89a3      	ldrh	r3, [r4, #12]
   84350:	061b      	lsls	r3, r3, #24
   84352:	d41c      	bmi.n	8438e <_fclose_r+0x76>
   84354:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84356:	b141      	cbz	r1, 8436a <_fclose_r+0x52>
   84358:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8435c:	4299      	cmp	r1, r3
   8435e:	d002      	beq.n	84366 <_fclose_r+0x4e>
   84360:	4628      	mov	r0, r5
   84362:	f7fe fe47 	bl	82ff4 <_free_r>
   84366:	2300      	movs	r3, #0
   84368:	6323      	str	r3, [r4, #48]	; 0x30
   8436a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8436c:	b121      	cbz	r1, 84378 <_fclose_r+0x60>
   8436e:	4628      	mov	r0, r5
   84370:	f7fe fe40 	bl	82ff4 <_free_r>
   84374:	2300      	movs	r3, #0
   84376:	6463      	str	r3, [r4, #68]	; 0x44
   84378:	f7fe fd6a 	bl	82e50 <__sfp_lock_acquire>
   8437c:	2300      	movs	r3, #0
   8437e:	81a3      	strh	r3, [r4, #12]
   84380:	f7fe fd68 	bl	82e54 <__sfp_lock_release>
   84384:	4630      	mov	r0, r6
   84386:	bd70      	pop	{r4, r5, r6, pc}
   84388:	f7fe fd5c 	bl	82e44 <__sinit>
   8438c:	e7cc      	b.n	84328 <_fclose_r+0x10>
   8438e:	4628      	mov	r0, r5
   84390:	6921      	ldr	r1, [r4, #16]
   84392:	f7fe fe2f 	bl	82ff4 <_free_r>
   84396:	e7dd      	b.n	84354 <_fclose_r+0x3c>
   84398:	2000      	movs	r0, #0
   8439a:	4770      	bx	lr

0008439c <_fstat_r>:
   8439c:	b538      	push	{r3, r4, r5, lr}
   8439e:	4c08      	ldr	r4, [pc, #32]	; (843c0 <_fstat_r+0x24>)
   843a0:	2300      	movs	r3, #0
   843a2:	4605      	mov	r5, r0
   843a4:	4608      	mov	r0, r1
   843a6:	4611      	mov	r1, r2
   843a8:	6023      	str	r3, [r4, #0]
   843aa:	f7fc ffc7 	bl	8133c <_fstat>
   843ae:	1c43      	adds	r3, r0, #1
   843b0:	d000      	beq.n	843b4 <_fstat_r+0x18>
   843b2:	bd38      	pop	{r3, r4, r5, pc}
   843b4:	6823      	ldr	r3, [r4, #0]
   843b6:	2b00      	cmp	r3, #0
   843b8:	d0fb      	beq.n	843b2 <_fstat_r+0x16>
   843ba:	602b      	str	r3, [r5, #0]
   843bc:	bd38      	pop	{r3, r4, r5, pc}
   843be:	bf00      	nop
   843c0:	200748e8 	.word	0x200748e8

000843c4 <_isatty_r>:
   843c4:	b538      	push	{r3, r4, r5, lr}
   843c6:	4c07      	ldr	r4, [pc, #28]	; (843e4 <_isatty_r+0x20>)
   843c8:	2300      	movs	r3, #0
   843ca:	4605      	mov	r5, r0
   843cc:	4608      	mov	r0, r1
   843ce:	6023      	str	r3, [r4, #0]
   843d0:	f7fc ffba 	bl	81348 <_isatty>
   843d4:	1c43      	adds	r3, r0, #1
   843d6:	d000      	beq.n	843da <_isatty_r+0x16>
   843d8:	bd38      	pop	{r3, r4, r5, pc}
   843da:	6823      	ldr	r3, [r4, #0]
   843dc:	2b00      	cmp	r3, #0
   843de:	d0fb      	beq.n	843d8 <_isatty_r+0x14>
   843e0:	602b      	str	r3, [r5, #0]
   843e2:	bd38      	pop	{r3, r4, r5, pc}
   843e4:	200748e8 	.word	0x200748e8

000843e8 <_lseek_r>:
   843e8:	b570      	push	{r4, r5, r6, lr}
   843ea:	4c08      	ldr	r4, [pc, #32]	; (8440c <_lseek_r+0x24>)
   843ec:	4606      	mov	r6, r0
   843ee:	2500      	movs	r5, #0
   843f0:	4608      	mov	r0, r1
   843f2:	4611      	mov	r1, r2
   843f4:	461a      	mov	r2, r3
   843f6:	6025      	str	r5, [r4, #0]
   843f8:	f7fc ffa8 	bl	8134c <_lseek>
   843fc:	1c43      	adds	r3, r0, #1
   843fe:	d000      	beq.n	84402 <_lseek_r+0x1a>
   84400:	bd70      	pop	{r4, r5, r6, pc}
   84402:	6823      	ldr	r3, [r4, #0]
   84404:	2b00      	cmp	r3, #0
   84406:	d0fb      	beq.n	84400 <_lseek_r+0x18>
   84408:	6033      	str	r3, [r6, #0]
   8440a:	bd70      	pop	{r4, r5, r6, pc}
   8440c:	200748e8 	.word	0x200748e8

00084410 <_read_r>:
   84410:	b570      	push	{r4, r5, r6, lr}
   84412:	4c08      	ldr	r4, [pc, #32]	; (84434 <_read_r+0x24>)
   84414:	4606      	mov	r6, r0
   84416:	2500      	movs	r5, #0
   84418:	4608      	mov	r0, r1
   8441a:	4611      	mov	r1, r2
   8441c:	461a      	mov	r2, r3
   8441e:	6025      	str	r5, [r4, #0]
   84420:	f7fb fec8 	bl	801b4 <_read>
   84424:	1c43      	adds	r3, r0, #1
   84426:	d000      	beq.n	8442a <_read_r+0x1a>
   84428:	bd70      	pop	{r4, r5, r6, pc}
   8442a:	6823      	ldr	r3, [r4, #0]
   8442c:	2b00      	cmp	r3, #0
   8442e:	d0fb      	beq.n	84428 <_read_r+0x18>
   84430:	6033      	str	r3, [r6, #0]
   84432:	bd70      	pop	{r4, r5, r6, pc}
   84434:	200748e8 	.word	0x200748e8

00084438 <__aeabi_uldivmod>:
   84438:	b953      	cbnz	r3, 84450 <__aeabi_uldivmod+0x18>
   8443a:	b94a      	cbnz	r2, 84450 <__aeabi_uldivmod+0x18>
   8443c:	2900      	cmp	r1, #0
   8443e:	bf08      	it	eq
   84440:	2800      	cmpeq	r0, #0
   84442:	bf1c      	itt	ne
   84444:	f04f 31ff 	movne.w	r1, #4294967295
   84448:	f04f 30ff 	movne.w	r0, #4294967295
   8444c:	f000 b83c 	b.w	844c8 <__aeabi_idiv0>
   84450:	b082      	sub	sp, #8
   84452:	46ec      	mov	ip, sp
   84454:	e92d 5000 	stmdb	sp!, {ip, lr}
   84458:	f000 f81e 	bl	84498 <__gnu_uldivmod_helper>
   8445c:	f8dd e004 	ldr.w	lr, [sp, #4]
   84460:	b002      	add	sp, #8
   84462:	bc0c      	pop	{r2, r3}
   84464:	4770      	bx	lr
   84466:	bf00      	nop

00084468 <__gnu_ldivmod_helper>:
   84468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8446c:	9c06      	ldr	r4, [sp, #24]
   8446e:	4690      	mov	r8, r2
   84470:	4606      	mov	r6, r0
   84472:	460f      	mov	r7, r1
   84474:	461d      	mov	r5, r3
   84476:	f000 f829 	bl	844cc <__divdi3>
   8447a:	fb08 fc01 	mul.w	ip, r8, r1
   8447e:	fba8 2300 	umull	r2, r3, r8, r0
   84482:	fb00 c505 	mla	r5, r0, r5, ip
   84486:	1ab2      	subs	r2, r6, r2
   84488:	442b      	add	r3, r5
   8448a:	eb67 0303 	sbc.w	r3, r7, r3
   8448e:	4686      	mov	lr, r0
   84490:	e9c4 2300 	strd	r2, r3, [r4]
   84494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084498 <__gnu_uldivmod_helper>:
   84498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8449c:	9e08      	ldr	r6, [sp, #32]
   8449e:	4617      	mov	r7, r2
   844a0:	4680      	mov	r8, r0
   844a2:	4689      	mov	r9, r1
   844a4:	461d      	mov	r5, r3
   844a6:	f000 f967 	bl	84778 <__udivdi3>
   844aa:	fb00 f305 	mul.w	r3, r0, r5
   844ae:	fba0 4507 	umull	r4, r5, r0, r7
   844b2:	fb07 3701 	mla	r7, r7, r1, r3
   844b6:	ebb8 0404 	subs.w	r4, r8, r4
   844ba:	443d      	add	r5, r7
   844bc:	eb69 0505 	sbc.w	r5, r9, r5
   844c0:	e9c6 4500 	strd	r4, r5, [r6]
   844c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000844c8 <__aeabi_idiv0>:
   844c8:	4770      	bx	lr
   844ca:	bf00      	nop

000844cc <__divdi3>:
   844cc:	2900      	cmp	r1, #0
   844ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   844d2:	f2c0 80a8 	blt.w	84626 <__divdi3+0x15a>
   844d6:	2600      	movs	r6, #0
   844d8:	2b00      	cmp	r3, #0
   844da:	f2c0 809e 	blt.w	8461a <__divdi3+0x14e>
   844de:	4681      	mov	r9, r0
   844e0:	468e      	mov	lr, r1
   844e2:	4690      	mov	r8, r2
   844e4:	469c      	mov	ip, r3
   844e6:	4617      	mov	r7, r2
   844e8:	4604      	mov	r4, r0
   844ea:	460d      	mov	r5, r1
   844ec:	2b00      	cmp	r3, #0
   844ee:	d13d      	bne.n	8456c <__divdi3+0xa0>
   844f0:	428a      	cmp	r2, r1
   844f2:	d959      	bls.n	845a8 <__divdi3+0xdc>
   844f4:	fab2 f382 	clz	r3, r2
   844f8:	b13b      	cbz	r3, 8450a <__divdi3+0x3e>
   844fa:	f1c3 0220 	rsb	r2, r3, #32
   844fe:	409d      	lsls	r5, r3
   84500:	fa20 f202 	lsr.w	r2, r0, r2
   84504:	409f      	lsls	r7, r3
   84506:	4315      	orrs	r5, r2
   84508:	409c      	lsls	r4, r3
   8450a:	0c39      	lsrs	r1, r7, #16
   8450c:	fbb5 f0f1 	udiv	r0, r5, r1
   84510:	fa1f fe87 	uxth.w	lr, r7
   84514:	fb01 5510 	mls	r5, r1, r0, r5
   84518:	fb0e f300 	mul.w	r3, lr, r0
   8451c:	0c22      	lsrs	r2, r4, #16
   8451e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   84522:	42ab      	cmp	r3, r5
   84524:	d909      	bls.n	8453a <__divdi3+0x6e>
   84526:	19ed      	adds	r5, r5, r7
   84528:	f100 32ff 	add.w	r2, r0, #4294967295
   8452c:	f080 810b 	bcs.w	84746 <__divdi3+0x27a>
   84530:	42ab      	cmp	r3, r5
   84532:	f240 8108 	bls.w	84746 <__divdi3+0x27a>
   84536:	3802      	subs	r0, #2
   84538:	443d      	add	r5, r7
   8453a:	1aed      	subs	r5, r5, r3
   8453c:	fbb5 f3f1 	udiv	r3, r5, r1
   84540:	fb01 5513 	mls	r5, r1, r3, r5
   84544:	fb0e fe03 	mul.w	lr, lr, r3
   84548:	b2a4      	uxth	r4, r4
   8454a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   8454e:	45ae      	cmp	lr, r5
   84550:	d908      	bls.n	84564 <__divdi3+0x98>
   84552:	19ed      	adds	r5, r5, r7
   84554:	f103 32ff 	add.w	r2, r3, #4294967295
   84558:	f080 80f7 	bcs.w	8474a <__divdi3+0x27e>
   8455c:	45ae      	cmp	lr, r5
   8455e:	f240 80f4 	bls.w	8474a <__divdi3+0x27e>
   84562:	3b02      	subs	r3, #2
   84564:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   84568:	2200      	movs	r2, #0
   8456a:	e003      	b.n	84574 <__divdi3+0xa8>
   8456c:	428b      	cmp	r3, r1
   8456e:	d90f      	bls.n	84590 <__divdi3+0xc4>
   84570:	2200      	movs	r2, #0
   84572:	4613      	mov	r3, r2
   84574:	1c34      	adds	r4, r6, #0
   84576:	bf18      	it	ne
   84578:	2401      	movne	r4, #1
   8457a:	4260      	negs	r0, r4
   8457c:	f04f 0500 	mov.w	r5, #0
   84580:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   84584:	4058      	eors	r0, r3
   84586:	4051      	eors	r1, r2
   84588:	1900      	adds	r0, r0, r4
   8458a:	4169      	adcs	r1, r5
   8458c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84590:	fab3 f283 	clz	r2, r3
   84594:	2a00      	cmp	r2, #0
   84596:	f040 8089 	bne.w	846ac <__divdi3+0x1e0>
   8459a:	428b      	cmp	r3, r1
   8459c:	d302      	bcc.n	845a4 <__divdi3+0xd8>
   8459e:	4580      	cmp	r8, r0
   845a0:	f200 80e2 	bhi.w	84768 <__divdi3+0x29c>
   845a4:	2301      	movs	r3, #1
   845a6:	e7e5      	b.n	84574 <__divdi3+0xa8>
   845a8:	b912      	cbnz	r2, 845b0 <__divdi3+0xe4>
   845aa:	2301      	movs	r3, #1
   845ac:	fbb3 f7f2 	udiv	r7, r3, r2
   845b0:	fab7 f887 	clz	r8, r7
   845b4:	f1b8 0f00 	cmp.w	r8, #0
   845b8:	d13b      	bne.n	84632 <__divdi3+0x166>
   845ba:	1bed      	subs	r5, r5, r7
   845bc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   845c0:	fa1f fe87 	uxth.w	lr, r7
   845c4:	2201      	movs	r2, #1
   845c6:	fbb5 f0fc 	udiv	r0, r5, ip
   845ca:	fb0c 5510 	mls	r5, ip, r0, r5
   845ce:	fb0e f300 	mul.w	r3, lr, r0
   845d2:	0c21      	lsrs	r1, r4, #16
   845d4:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   845d8:	42ab      	cmp	r3, r5
   845da:	d907      	bls.n	845ec <__divdi3+0x120>
   845dc:	19ed      	adds	r5, r5, r7
   845de:	f100 31ff 	add.w	r1, r0, #4294967295
   845e2:	d202      	bcs.n	845ea <__divdi3+0x11e>
   845e4:	42ab      	cmp	r3, r5
   845e6:	f200 80c3 	bhi.w	84770 <__divdi3+0x2a4>
   845ea:	4608      	mov	r0, r1
   845ec:	1aed      	subs	r5, r5, r3
   845ee:	fbb5 f3fc 	udiv	r3, r5, ip
   845f2:	fb0c 5513 	mls	r5, ip, r3, r5
   845f6:	fb0e fe03 	mul.w	lr, lr, r3
   845fa:	b2a4      	uxth	r4, r4
   845fc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   84600:	45ae      	cmp	lr, r5
   84602:	d907      	bls.n	84614 <__divdi3+0x148>
   84604:	19ed      	adds	r5, r5, r7
   84606:	f103 31ff 	add.w	r1, r3, #4294967295
   8460a:	d202      	bcs.n	84612 <__divdi3+0x146>
   8460c:	45ae      	cmp	lr, r5
   8460e:	f200 80ad 	bhi.w	8476c <__divdi3+0x2a0>
   84612:	460b      	mov	r3, r1
   84614:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   84618:	e7ac      	b.n	84574 <__divdi3+0xa8>
   8461a:	4252      	negs	r2, r2
   8461c:	ea6f 0606 	mvn.w	r6, r6
   84620:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84624:	e75b      	b.n	844de <__divdi3+0x12>
   84626:	4240      	negs	r0, r0
   84628:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8462c:	f04f 36ff 	mov.w	r6, #4294967295
   84630:	e752      	b.n	844d8 <__divdi3+0xc>
   84632:	fa07 f708 	lsl.w	r7, r7, r8
   84636:	f1c8 0220 	rsb	r2, r8, #32
   8463a:	fa25 f302 	lsr.w	r3, r5, r2
   8463e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84642:	fbb3 f1fc 	udiv	r1, r3, ip
   84646:	fa1f fe87 	uxth.w	lr, r7
   8464a:	fb0c 3311 	mls	r3, ip, r1, r3
   8464e:	fa24 f202 	lsr.w	r2, r4, r2
   84652:	fa05 f508 	lsl.w	r5, r5, r8
   84656:	fb0e f901 	mul.w	r9, lr, r1
   8465a:	432a      	orrs	r2, r5
   8465c:	0c10      	lsrs	r0, r2, #16
   8465e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   84662:	4599      	cmp	r9, r3
   84664:	fa04 f408 	lsl.w	r4, r4, r8
   84668:	d907      	bls.n	8467a <__divdi3+0x1ae>
   8466a:	19db      	adds	r3, r3, r7
   8466c:	f101 30ff 	add.w	r0, r1, #4294967295
   84670:	d278      	bcs.n	84764 <__divdi3+0x298>
   84672:	4599      	cmp	r9, r3
   84674:	d976      	bls.n	84764 <__divdi3+0x298>
   84676:	3902      	subs	r1, #2
   84678:	443b      	add	r3, r7
   8467a:	ebc9 0303 	rsb	r3, r9, r3
   8467e:	fbb3 f0fc 	udiv	r0, r3, ip
   84682:	fb0c 3310 	mls	r3, ip, r0, r3
   84686:	fb0e f500 	mul.w	r5, lr, r0
   8468a:	b292      	uxth	r2, r2
   8468c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   84690:	429d      	cmp	r5, r3
   84692:	d907      	bls.n	846a4 <__divdi3+0x1d8>
   84694:	19db      	adds	r3, r3, r7
   84696:	f100 32ff 	add.w	r2, r0, #4294967295
   8469a:	d25f      	bcs.n	8475c <__divdi3+0x290>
   8469c:	429d      	cmp	r5, r3
   8469e:	d95d      	bls.n	8475c <__divdi3+0x290>
   846a0:	3802      	subs	r0, #2
   846a2:	443b      	add	r3, r7
   846a4:	1b5d      	subs	r5, r3, r5
   846a6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   846aa:	e78c      	b.n	845c6 <__divdi3+0xfa>
   846ac:	f1c2 0320 	rsb	r3, r2, #32
   846b0:	fa28 f103 	lsr.w	r1, r8, r3
   846b4:	fa0c fc02 	lsl.w	ip, ip, r2
   846b8:	ea41 0c0c 	orr.w	ip, r1, ip
   846bc:	ea4f 401c 	mov.w	r0, ip, lsr #16
   846c0:	fa2e f103 	lsr.w	r1, lr, r3
   846c4:	fbb1 f5f0 	udiv	r5, r1, r0
   846c8:	fa1f f78c 	uxth.w	r7, ip
   846cc:	fb00 1115 	mls	r1, r0, r5, r1
   846d0:	fa29 f303 	lsr.w	r3, r9, r3
   846d4:	fa0e fe02 	lsl.w	lr, lr, r2
   846d8:	fb07 f905 	mul.w	r9, r7, r5
   846dc:	ea43 0e0e 	orr.w	lr, r3, lr
   846e0:	ea4f 431e 	mov.w	r3, lr, lsr #16
   846e4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   846e8:	4589      	cmp	r9, r1
   846ea:	fa08 f802 	lsl.w	r8, r8, r2
   846ee:	d908      	bls.n	84702 <__divdi3+0x236>
   846f0:	eb11 010c 	adds.w	r1, r1, ip
   846f4:	f105 33ff 	add.w	r3, r5, #4294967295
   846f8:	d232      	bcs.n	84760 <__divdi3+0x294>
   846fa:	4589      	cmp	r9, r1
   846fc:	d930      	bls.n	84760 <__divdi3+0x294>
   846fe:	3d02      	subs	r5, #2
   84700:	4461      	add	r1, ip
   84702:	ebc9 0101 	rsb	r1, r9, r1
   84706:	fbb1 f3f0 	udiv	r3, r1, r0
   8470a:	fb00 1113 	mls	r1, r0, r3, r1
   8470e:	fb07 f703 	mul.w	r7, r7, r3
   84712:	fa1f fe8e 	uxth.w	lr, lr
   84716:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   8471a:	4577      	cmp	r7, lr
   8471c:	d908      	bls.n	84730 <__divdi3+0x264>
   8471e:	eb1e 0e0c 	adds.w	lr, lr, ip
   84722:	f103 31ff 	add.w	r1, r3, #4294967295
   84726:	d217      	bcs.n	84758 <__divdi3+0x28c>
   84728:	4577      	cmp	r7, lr
   8472a:	d915      	bls.n	84758 <__divdi3+0x28c>
   8472c:	3b02      	subs	r3, #2
   8472e:	44e6      	add	lr, ip
   84730:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   84734:	fba3 8908 	umull	r8, r9, r3, r8
   84738:	ebc7 0e0e 	rsb	lr, r7, lr
   8473c:	45ce      	cmp	lr, r9
   8473e:	d309      	bcc.n	84754 <__divdi3+0x288>
   84740:	d005      	beq.n	8474e <__divdi3+0x282>
   84742:	2200      	movs	r2, #0
   84744:	e716      	b.n	84574 <__divdi3+0xa8>
   84746:	4610      	mov	r0, r2
   84748:	e6f7      	b.n	8453a <__divdi3+0x6e>
   8474a:	4613      	mov	r3, r2
   8474c:	e70a      	b.n	84564 <__divdi3+0x98>
   8474e:	4094      	lsls	r4, r2
   84750:	4544      	cmp	r4, r8
   84752:	d2f6      	bcs.n	84742 <__divdi3+0x276>
   84754:	3b01      	subs	r3, #1
   84756:	e7f4      	b.n	84742 <__divdi3+0x276>
   84758:	460b      	mov	r3, r1
   8475a:	e7e9      	b.n	84730 <__divdi3+0x264>
   8475c:	4610      	mov	r0, r2
   8475e:	e7a1      	b.n	846a4 <__divdi3+0x1d8>
   84760:	461d      	mov	r5, r3
   84762:	e7ce      	b.n	84702 <__divdi3+0x236>
   84764:	4601      	mov	r1, r0
   84766:	e788      	b.n	8467a <__divdi3+0x1ae>
   84768:	4613      	mov	r3, r2
   8476a:	e703      	b.n	84574 <__divdi3+0xa8>
   8476c:	3b02      	subs	r3, #2
   8476e:	e751      	b.n	84614 <__divdi3+0x148>
   84770:	3802      	subs	r0, #2
   84772:	443d      	add	r5, r7
   84774:	e73a      	b.n	845ec <__divdi3+0x120>
   84776:	bf00      	nop

00084778 <__udivdi3>:
   84778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8477c:	2b00      	cmp	r3, #0
   8477e:	d144      	bne.n	8480a <__udivdi3+0x92>
   84780:	428a      	cmp	r2, r1
   84782:	4615      	mov	r5, r2
   84784:	4604      	mov	r4, r0
   84786:	d94f      	bls.n	84828 <__udivdi3+0xb0>
   84788:	fab2 f782 	clz	r7, r2
   8478c:	460e      	mov	r6, r1
   8478e:	b14f      	cbz	r7, 847a4 <__udivdi3+0x2c>
   84790:	f1c7 0320 	rsb	r3, r7, #32
   84794:	40b9      	lsls	r1, r7
   84796:	fa20 f603 	lsr.w	r6, r0, r3
   8479a:	fa02 f507 	lsl.w	r5, r2, r7
   8479e:	430e      	orrs	r6, r1
   847a0:	fa00 f407 	lsl.w	r4, r0, r7
   847a4:	0c2f      	lsrs	r7, r5, #16
   847a6:	fbb6 f0f7 	udiv	r0, r6, r7
   847aa:	fa1f fe85 	uxth.w	lr, r5
   847ae:	fb07 6210 	mls	r2, r7, r0, r6
   847b2:	fb0e f100 	mul.w	r1, lr, r0
   847b6:	0c26      	lsrs	r6, r4, #16
   847b8:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   847bc:	4299      	cmp	r1, r3
   847be:	d909      	bls.n	847d4 <__udivdi3+0x5c>
   847c0:	195b      	adds	r3, r3, r5
   847c2:	f100 32ff 	add.w	r2, r0, #4294967295
   847c6:	f080 80ee 	bcs.w	849a6 <__udivdi3+0x22e>
   847ca:	4299      	cmp	r1, r3
   847cc:	f240 80eb 	bls.w	849a6 <__udivdi3+0x22e>
   847d0:	3802      	subs	r0, #2
   847d2:	442b      	add	r3, r5
   847d4:	1a59      	subs	r1, r3, r1
   847d6:	fbb1 f3f7 	udiv	r3, r1, r7
   847da:	fb07 1113 	mls	r1, r7, r3, r1
   847de:	fb0e fe03 	mul.w	lr, lr, r3
   847e2:	b2a4      	uxth	r4, r4
   847e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   847e8:	458e      	cmp	lr, r1
   847ea:	d908      	bls.n	847fe <__udivdi3+0x86>
   847ec:	1949      	adds	r1, r1, r5
   847ee:	f103 32ff 	add.w	r2, r3, #4294967295
   847f2:	f080 80da 	bcs.w	849aa <__udivdi3+0x232>
   847f6:	458e      	cmp	lr, r1
   847f8:	f240 80d7 	bls.w	849aa <__udivdi3+0x232>
   847fc:	3b02      	subs	r3, #2
   847fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   84802:	2600      	movs	r6, #0
   84804:	4631      	mov	r1, r6
   84806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8480a:	428b      	cmp	r3, r1
   8480c:	d847      	bhi.n	8489e <__udivdi3+0x126>
   8480e:	fab3 f683 	clz	r6, r3
   84812:	2e00      	cmp	r6, #0
   84814:	d148      	bne.n	848a8 <__udivdi3+0x130>
   84816:	428b      	cmp	r3, r1
   84818:	d302      	bcc.n	84820 <__udivdi3+0xa8>
   8481a:	4282      	cmp	r2, r0
   8481c:	f200 80cf 	bhi.w	849be <__udivdi3+0x246>
   84820:	2001      	movs	r0, #1
   84822:	4631      	mov	r1, r6
   84824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84828:	b912      	cbnz	r2, 84830 <__udivdi3+0xb8>
   8482a:	2501      	movs	r5, #1
   8482c:	fbb5 f5f2 	udiv	r5, r5, r2
   84830:	fab5 fc85 	clz	ip, r5
   84834:	f1bc 0f00 	cmp.w	ip, #0
   84838:	d178      	bne.n	8492c <__udivdi3+0x1b4>
   8483a:	1b49      	subs	r1, r1, r5
   8483c:	0c2f      	lsrs	r7, r5, #16
   8483e:	fa1f fe85 	uxth.w	lr, r5
   84842:	2601      	movs	r6, #1
   84844:	fbb1 f0f7 	udiv	r0, r1, r7
   84848:	fb07 1110 	mls	r1, r7, r0, r1
   8484c:	fb0e f200 	mul.w	r2, lr, r0
   84850:	0c23      	lsrs	r3, r4, #16
   84852:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   84856:	428a      	cmp	r2, r1
   84858:	d907      	bls.n	8486a <__udivdi3+0xf2>
   8485a:	1949      	adds	r1, r1, r5
   8485c:	f100 33ff 	add.w	r3, r0, #4294967295
   84860:	d202      	bcs.n	84868 <__udivdi3+0xf0>
   84862:	428a      	cmp	r2, r1
   84864:	f200 80bc 	bhi.w	849e0 <__udivdi3+0x268>
   84868:	4618      	mov	r0, r3
   8486a:	1a89      	subs	r1, r1, r2
   8486c:	fbb1 f3f7 	udiv	r3, r1, r7
   84870:	fb07 1113 	mls	r1, r7, r3, r1
   84874:	fb0e fe03 	mul.w	lr, lr, r3
   84878:	b2a4      	uxth	r4, r4
   8487a:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   8487e:	4596      	cmp	lr, r2
   84880:	d908      	bls.n	84894 <__udivdi3+0x11c>
   84882:	1952      	adds	r2, r2, r5
   84884:	f103 31ff 	add.w	r1, r3, #4294967295
   84888:	f080 8091 	bcs.w	849ae <__udivdi3+0x236>
   8488c:	4596      	cmp	lr, r2
   8488e:	f240 808e 	bls.w	849ae <__udivdi3+0x236>
   84892:	3b02      	subs	r3, #2
   84894:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   84898:	4631      	mov	r1, r6
   8489a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8489e:	2600      	movs	r6, #0
   848a0:	4630      	mov	r0, r6
   848a2:	4631      	mov	r1, r6
   848a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   848a8:	f1c6 0420 	rsb	r4, r6, #32
   848ac:	fa22 f504 	lsr.w	r5, r2, r4
   848b0:	40b3      	lsls	r3, r6
   848b2:	432b      	orrs	r3, r5
   848b4:	fa21 f704 	lsr.w	r7, r1, r4
   848b8:	ea4f 4813 	mov.w	r8, r3, lsr #16
   848bc:	fbb7 fcf8 	udiv	ip, r7, r8
   848c0:	fa1f f983 	uxth.w	r9, r3
   848c4:	fb08 771c 	mls	r7, r8, ip, r7
   848c8:	fa20 fe04 	lsr.w	lr, r0, r4
   848cc:	fa01 f506 	lsl.w	r5, r1, r6
   848d0:	fb09 f40c 	mul.w	r4, r9, ip
   848d4:	ea4e 0505 	orr.w	r5, lr, r5
   848d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   848dc:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   848e0:	42bc      	cmp	r4, r7
   848e2:	fa02 f206 	lsl.w	r2, r2, r6
   848e6:	d904      	bls.n	848f2 <__udivdi3+0x17a>
   848e8:	18ff      	adds	r7, r7, r3
   848ea:	f10c 31ff 	add.w	r1, ip, #4294967295
   848ee:	d368      	bcc.n	849c2 <__udivdi3+0x24a>
   848f0:	468c      	mov	ip, r1
   848f2:	1b3f      	subs	r7, r7, r4
   848f4:	fbb7 f4f8 	udiv	r4, r7, r8
   848f8:	fb08 7714 	mls	r7, r8, r4, r7
   848fc:	fb09 f904 	mul.w	r9, r9, r4
   84900:	b2ad      	uxth	r5, r5
   84902:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   84906:	4589      	cmp	r9, r1
   84908:	d904      	bls.n	84914 <__udivdi3+0x19c>
   8490a:	18c9      	adds	r1, r1, r3
   8490c:	f104 35ff 	add.w	r5, r4, #4294967295
   84910:	d35d      	bcc.n	849ce <__udivdi3+0x256>
   84912:	462c      	mov	r4, r5
   84914:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   84918:	fba4 2302 	umull	r2, r3, r4, r2
   8491c:	ebc9 0101 	rsb	r1, r9, r1
   84920:	4299      	cmp	r1, r3
   84922:	d349      	bcc.n	849b8 <__udivdi3+0x240>
   84924:	d045      	beq.n	849b2 <__udivdi3+0x23a>
   84926:	4620      	mov	r0, r4
   84928:	2600      	movs	r6, #0
   8492a:	e76b      	b.n	84804 <__udivdi3+0x8c>
   8492c:	f1cc 0420 	rsb	r4, ip, #32
   84930:	fa05 f50c 	lsl.w	r5, r5, ip
   84934:	fa21 f304 	lsr.w	r3, r1, r4
   84938:	0c2a      	lsrs	r2, r5, #16
   8493a:	fbb3 f6f2 	udiv	r6, r3, r2
   8493e:	fa1f fe85 	uxth.w	lr, r5
   84942:	fb02 3816 	mls	r8, r2, r6, r3
   84946:	fa20 f704 	lsr.w	r7, r0, r4
   8494a:	fa01 f10c 	lsl.w	r1, r1, ip
   8494e:	fb0e f906 	mul.w	r9, lr, r6
   84952:	430f      	orrs	r7, r1
   84954:	0c3c      	lsrs	r4, r7, #16
   84956:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   8495a:	4599      	cmp	r9, r3
   8495c:	fa00 f40c 	lsl.w	r4, r0, ip
   84960:	d907      	bls.n	84972 <__udivdi3+0x1fa>
   84962:	195b      	adds	r3, r3, r5
   84964:	f106 31ff 	add.w	r1, r6, #4294967295
   84968:	d238      	bcs.n	849dc <__udivdi3+0x264>
   8496a:	4599      	cmp	r9, r3
   8496c:	d936      	bls.n	849dc <__udivdi3+0x264>
   8496e:	3e02      	subs	r6, #2
   84970:	442b      	add	r3, r5
   84972:	ebc9 0303 	rsb	r3, r9, r3
   84976:	fbb3 f0f2 	udiv	r0, r3, r2
   8497a:	fb02 3310 	mls	r3, r2, r0, r3
   8497e:	fb0e f100 	mul.w	r1, lr, r0
   84982:	b2bf      	uxth	r7, r7
   84984:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   84988:	4299      	cmp	r1, r3
   8498a:	d907      	bls.n	8499c <__udivdi3+0x224>
   8498c:	195b      	adds	r3, r3, r5
   8498e:	f100 37ff 	add.w	r7, r0, #4294967295
   84992:	d221      	bcs.n	849d8 <__udivdi3+0x260>
   84994:	4299      	cmp	r1, r3
   84996:	d91f      	bls.n	849d8 <__udivdi3+0x260>
   84998:	3802      	subs	r0, #2
   8499a:	442b      	add	r3, r5
   8499c:	4617      	mov	r7, r2
   8499e:	1a59      	subs	r1, r3, r1
   849a0:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   849a4:	e74e      	b.n	84844 <__udivdi3+0xcc>
   849a6:	4610      	mov	r0, r2
   849a8:	e714      	b.n	847d4 <__udivdi3+0x5c>
   849aa:	4613      	mov	r3, r2
   849ac:	e727      	b.n	847fe <__udivdi3+0x86>
   849ae:	460b      	mov	r3, r1
   849b0:	e770      	b.n	84894 <__udivdi3+0x11c>
   849b2:	40b0      	lsls	r0, r6
   849b4:	4290      	cmp	r0, r2
   849b6:	d2b6      	bcs.n	84926 <__udivdi3+0x1ae>
   849b8:	1e60      	subs	r0, r4, #1
   849ba:	2600      	movs	r6, #0
   849bc:	e722      	b.n	84804 <__udivdi3+0x8c>
   849be:	4630      	mov	r0, r6
   849c0:	e720      	b.n	84804 <__udivdi3+0x8c>
   849c2:	42bc      	cmp	r4, r7
   849c4:	d994      	bls.n	848f0 <__udivdi3+0x178>
   849c6:	f1ac 0c02 	sub.w	ip, ip, #2
   849ca:	441f      	add	r7, r3
   849cc:	e791      	b.n	848f2 <__udivdi3+0x17a>
   849ce:	4589      	cmp	r9, r1
   849d0:	d99f      	bls.n	84912 <__udivdi3+0x19a>
   849d2:	3c02      	subs	r4, #2
   849d4:	4419      	add	r1, r3
   849d6:	e79d      	b.n	84914 <__udivdi3+0x19c>
   849d8:	4638      	mov	r0, r7
   849da:	e7df      	b.n	8499c <__udivdi3+0x224>
   849dc:	460e      	mov	r6, r1
   849de:	e7c8      	b.n	84972 <__udivdi3+0x1fa>
   849e0:	3802      	subs	r0, #2
   849e2:	4429      	add	r1, r5
   849e4:	e741      	b.n	8486a <__udivdi3+0xf2>
   849e6:	bf00      	nop

000849e8 <gs_uc_mac_address>:
   849e8:	0400 1c25 02a0 0000 2d2d 4520 414d 2043     ..%.....-- EMAC 
   849f8:	7845 6d61 6c70 2065 2d2d 2d0d 202d 7241     Example --.-- Ar
   84a08:	7564 6e69 206f 7544 2f65 2058 2d2d 2d0d     duino Due/X --.-
   84a18:	202d 6f43 706d 6c69 6465 203a 754a 206c     - Compiled: Jul 
   84a28:	3831 3220 3130 2036 3332 353a 3a32 3630     18 2016 23:52:06
   84a38:	2d20 0d2d 0000 0000 2d2d 4d20 4341 2520      --.....-- MAC %
   84a48:	3a78 7825 253a 3a78 7825 253a 3a78 7825     x:%x:%x:%x:%x:%x
   84a58:	0d0a 0000 2d2d 4920 2050 2520 2e64 6425     ....-- IP  %d.%d
   84a68:	252e 2e64 6425 0d0a 0000 0000 4850 2059     .%d.%d......PHY 
   84a78:	6e49 7469 6169 696c 657a 4520 5252 524f     Initialize ERROR
   84a88:	0d21 0000 7541 6f74 4e20 6765 746f 6169     !...Auto Negotia
   84a98:	6574 4520 5252 524f 0d21 0000 6553 2074     te ERROR!...Set 
   84aa8:	696c 6b6e 4520 5252 524f 0d21 0000 0000     link ERROR!.....
   84ab8:	694c 6b6e 6420 7465 6365 6574 2e64 0d20     Link detected. .
   84ac8:	0000 0000 3a45 4120 5052 5320 6e65 2064     ....E: ARP Send 
   84ad8:	202d 7830 7825 0d0a 0000 0000 3a45 4920     - 0x%x......E: I
   84ae8:	4d43 2050 6553 646e 2d20 3020 2578 0a78     CMP Send - 0x%x.
   84af8:	000d 0000 3d3d 3d3d 3d3d 203d 5049 2520     ....======= IP %
   84b08:	6434 6220 7479 7365 202c 4548 4441 5245     4d bytes, HEADER
   84b18:	3d20 3d3d 3d3d 3d3d 3d3d 0a3d 000d 0000      ==========.....
   84b28:	4920 2050 6556 7372 6f69 206e 2020 2020      IP Version     
   84b38:	2020 3d20 7620 252e 0064 0000 0d0a 4820        = v.%d..... H
   84b48:	6165 6564 2072 654c 676e 6874 2020 2020     eader Length    
   84b58:	3d20 2520 0064 0000 0d0a 5420 7079 2065      = %d..... Type 
   84b68:	666f 7320 7265 6976 6563 2020 3d20 3020     of service   = 0
   84b78:	2578 0078 0d0a 5420 746f 6c61 4920 2050     x%x... Total IP 
   84b88:	654c 676e 6874 2020 3d20 3020 2578 0058     Length   = 0x%X.
   84b98:	0d0a 4920 2044 2020 2020 2020 2020 2020     .. ID           
   84ba8:	2020 2020 3d20 3020 2578 0058 0d0a 4820          = 0x%X... H
   84bb8:	6165 6564 2072 6843 6365 736b 6d75 2020     eader Checksum  
   84bc8:	3d20 3020 2578 0058 200d 7250 746f 636f      = 0x%X.. Protoc
   84bd8:	6c6f 2020 2020 2020 2020 2020 203d 0000     ol          = ..
   84be8:	4349 504d 0000 0000 5049 0000 4354 0050     ICMP....IP..TCP.
   84bf8:	4455 0050 6425 2820 7830 5825 0029 0000     UDP.%d (0x%X)...
   84c08:	0d0a 4920 2050 7253 2063 6441 7264 7365     .. IP Src Addres
   84c18:	2073 2020 3d20 2520 3a64 6425 253a 3a64     s    = %d:%d:%d:
   84c28:	6425 0000 0d0a 4920 2050 6544 7473 4120     %d.... IP Dest A
   84c38:	6464 6572 7373 2020 3d20 2520 3a64 6425     ddress   = %d:%d
   84c48:	253a 3a64 6425 0000 0d0a 2d2d 2d2d 2d2d     :%d:%d....------
   84c58:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   84c68:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   84c78:	2d2d 000d 3d3d 203d 6544 6166 6c75 2074     --..=== Default 
   84c88:	5f77 6b70 5f74 6f66 6d72 7461 203d 7830     w_pkt_format= 0x
   84c98:	5825 3d3d 0a3d 000d 0043 0000               %X===...C...

00084ca4 <_global_impure_ptr>:
   84ca4:	0130 2007 000a 0000                         0.. ....

00084cac <zeroes.6869>:
   84cac:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   84cbc:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   84ccc:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   84cdc:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00084cec <blanks.6868>:
   84cec:	2020 2020 2020 2020 2020 2020 2020 2020                     

00084cfc <_init>:
   84cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84cfe:	bf00      	nop
   84d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84d02:	bc08      	pop	{r3}
   84d04:	469e      	mov	lr, r3
   84d06:	4770      	bx	lr

00084d08 <__init_array_start>:
   84d08:	00082bb5 	.word	0x00082bb5

00084d0c <__frame_dummy_init_array_entry>:
   84d0c:	00080119                                ....

00084d10 <_fini>:
   84d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84d12:	bf00      	nop
   84d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84d16:	bc08      	pop	{r3}
   84d18:	469e      	mov	lr, r3
   84d1a:	4770      	bx	lr

00084d1c <__fini_array_start>:
   84d1c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00084ca0 00000000 00000000 00000000     .L..............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <lc_ctype_charset>:
2007055c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007057c <__mb_cur_max>:
2007057c:	00000001                                ....

20070580 <__malloc_av_>:
	...
20070588:	20070580 20070580 20070588 20070588     ... ... ... ... 
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 

20070988 <__malloc_trim_threshold>:
20070988:	00020000                                ....

2007098c <__malloc_sbrk_base>:
2007098c:	ffffffff                                ....

20070990 <__wctomb>:
20070990:	0008420d                                .B..
